<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rock</name>
    </assembly>
    <members>
        <member name="T:Rock.Address.GeocodeContainer">
            <summary>
            Singleton class that uses MEF to load and cache all of the GeocodeComponent classes
            </summary>
        </member>
        <member name="T:Rock.Extension.Container`2">
            <summary>
            Singleton generic class that uses MEF to load and cache all of the component classes
            </summary>
        </member>
        <member name="T:Rock.Extension.IContainer">
            <summary>
            Interface for MEF Container
            </summary>
        </member>
        <member name="M:Rock.Extension.IContainer.Refresh">
            <summary>
            Refreshes the components.
            </summary>
        </member>
        <member name="P:Rock.Extension.IContainer.Dictionary">
            <summary>
            Gets the component name and attributes.
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Refresh">
            <summary>
            Forces a reloading of all the GeocodeService classes
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Extension.Container`2.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Rock.Extension.Container`2.Components">
            <summary>
            Gets the componentss.
            </summary>
        </member>
        <member name="P:Rock.Extension.Container`2.Dictionary">
            <summary>
            Gets the component names and their attributes
            </summary>
        </member>
        <member name="P:Rock.Extension.Container`2.MEFComponents">
            <summary>
            Gets or sets the components.
            </summary>
            <value>
            The components.
            </value>
        </member>
        <member name="P:Rock.Address.GeocodeContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Attribute.AccountsFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Attribute.FieldAttribute">
            <summary>
            A class Attribute that can be used by any object that inherits from <see cref="T:Rock.Attribute.IHasAttributes"/> to specify what attributes it needs.  The 
            Framework provides methods in the <see cref="T:Rock.Attribute.Helper"/> class to create, read, and update the attributes
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Rock.Attribute.FieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.FieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
            <param name="fieldTypeAssembly">The field type assembly.</param>
            <param name="fieldTypeClass">The field type class.</param>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Name">
            <summary>
            Gets or sets the user-friendly name of the attribute
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Description">
            <summary>
            Gets or sets the description of the attribute
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the attribute.  This is the value that will be used if a specific value has not yet been created
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Order">
            <summary>
            Gets or sets the order of the attribute.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldTypeAssembly">
            <summary>
            Gets or sets the assembly name of the <see cref="T:Rock.Field.IFieldType"/> to be used for the attribute
            </summary>
            <value>
            The field type assembly.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldTypeClass">
            <summary>
            Gets or sets the class name of the <see cref="T:Rock.Field.IFieldType"/> to be used for the attribute.
            </summary>
            <value>
            The field type class.
            </value>
        </member>
        <member name="P:Rock.Attribute.FieldAttribute.FieldConfigurationValues">
            <summary>
            Gets or sets the field configuration values.
            </summary>
            <value>
            The field configuration values.
            </value>
        </member>
        <member name="M:Rock.Attribute.AccountsFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.AccountsFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.BooleanFieldAttribute">
            <summary>
            Field Attribute for selecting either true or false.
            </summary>
        </member>
        <member name="M:Rock.Attribute.BooleanFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.BooleanFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key. (null means derive from name)</param>
        </member>
        <member name="T:Rock.Attribute.CampusFieldAttribute">
            <summary>
            Field Attribute to select 0 or 1 Campus
            </summary>
        </member>
        <member name="M:Rock.Attribute.CampusFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultCampusId">The default campus id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.BinaryFileTypeFieldAttribute">
            <summary>
            Field Attribute to select a binary file type
            </summary>
        </member>
        <member name="M:Rock.Attribute.BinaryFileTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.BinaryFileTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultBinaryFileTypeGuid">The default binary file type guid.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.ComponentFieldAttribute">
            <summary>
            Field Attribute to select a MEF component
            </summary>
        </member>
        <member name="M:Rock.Attribute.ComponentFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.ComponentFieldAttribute"/> class.
            </summary>
            <param name="MEF">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.ComponentsFieldAttribute">
            <summary>
            Field Attribute to select multiple MEF components
            </summary>
        </member>
        <member name="M:Rock.Attribute.ComponentsFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.ComponentFieldAttribute"/> class.
            </summary>
            <param name="MEF">The MEF container assembly name.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CategoryFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.CategoryFieldAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CategoryFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.AttributeCategoryFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.AttributeCategoryFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CategoryFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DecimalFieldAttribute">
            <summary>
            Field Attribute for setting a non-integer number with decimals.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DecimalFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Double,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DecimalFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DateFieldAttribute">
            <summary>
            Field attribute for selecting a DateTime.
            </summary>
        </member>
        <member name="T:Rock.Attribute.AccountFieldAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Attribute.AccountFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.AccountFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.WorkflowTypeFieldAttribute">
            <summary>
            Field Attribute to select a workflow type
            </summary>
        </member>
        <member name="M:Rock.Attribute.WorkflowTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultWorkflowTypeGuid">The default binary file type guid.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupTypeFieldAttribute">
            <summary>
            Field Attribute to select 0 or 1 GroupType
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupTypeFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupTypeFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupTypeId">The default group type id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.EmailTemplateFieldAttribute">
            <summary>
            Field Attribute to select 0 or more GroupTypes
            </summary>
        </member>
        <member name="M:Rock.Attribute.EmailTemplateFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.EmailTemplateFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupTypeId">The default group type id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomCheckboxListFieldAttribute">
            <summary>
            Field Attribute for selecting an item from a checkbox list.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomCheckboxListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomCheckboxListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomRadioListFieldAttribute">
            <summary>
            Field Attribute for selecting radio button options.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomRadioListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomRadioListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CustomDropdownListFieldAttribute">
            <summary>
            Field Attribute for selecting an item from a drop down list.
            </summary>
        </member>
        <member name="M:Rock.Attribute.CustomDropdownListFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CustomDropdownListFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="listSource">The source of the values to display in a list.  Format is either 'value1,value2,value3,...', 'value1:text1,value2:text2,value3:text3,...', or a SQL Select statement that returns result set with a 'Value' and 'Text' column.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.  If multiple values are supported (i.e. checkbox) each value should be delimited by a comma</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.DefinedValueFieldAttribute">
            <summary>
            Field Attribute to select 0 or more DefinedValues for the given DefinedType id.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DefinedValueFieldAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DefinedValueFieldAttribute"/> class.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.CampusesFieldAttribute">
            <summary>
            Field Attribute to select 0 or more Campuses
            </summary>
        </member>
        <member name="M:Rock.Attribute.CampusesFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.CampusesFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultCampusId">The default campus id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.EntityTypeAttribute">
            <summary>
            Field Attribute used to specify an EntityType
            Value returns EntityType.Name
            </summary>
        </member>
        <member name="M:Rock.Attribute.EntityTypeAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.EntityTypeAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:Rock.Attribute.DetailPageAttribute">
            <summary>
            Field attribute for selecting a "detail" page for the established UX pattern.
            </summary>
        </member>
        <member name="M:Rock.Attribute.DetailPageAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.DetailPageAttribute"/> class.
            </summary>
        </member>
        <member name="P:Rock.Attribute.DetailPageAttribute.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Rock.Attribute.GroupFieldAttribute">
            <summary>
            Field Attribute to select a single (or null) Group
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupId">The default group id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.GroupTypesFieldAttribute">
            <summary>
            Field Attribute to select 0 or more GroupTypes
            </summary>
        </member>
        <member name="M:Rock.Attribute.GroupTypesFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.GroupTypesFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultGroupTypeId">The default group type id.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.IntegerFieldAttribute">
            <summary>
            Field Attribute to set an integer.
            </summary>
        </member>
        <member name="M:Rock.Attribute.IntegerFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.IntegerFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="defaultValue">The default value.</param>
            <param name="category">The category.</param>
            <param name="order">The order.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Attribute.LinkedPageAttribute">
            <summary>
            Field Attribute for selecting a "linked" page.
            </summary>
        </member>
        <member name="M:Rock.Attribute.LinkedPageAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.LinkedPageAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rock.Data.MergeFieldAttribute">
            <summary>
            Custom attribute used to decorate model properties that should be available as merge field when previewing a sample list of entities (ex DataView)
            </summary>
        </member>
        <member name="T:Rock.Field.Types.ComponentsFieldType">
            <summary>
            Field Type used to display a checkbox list of MEF Components of a specific type
            </summary>
        </member>
        <member name="T:Rock.Field.FieldType">
            <summary>
            Abstract class that all custom field types should inherit from
            </summary>
        </member>
        <member name="T:Rock.Field.IFieldType">
            <summary>
            Interface that a custom field type must implement
            </summary>
        </member>
        <member name="M:Rock.Field.IFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Formats the value based on the type and qualifiers
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">The value.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationKeys">
            <summary>
            Gets a list of the configuration keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration values
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration values.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.IFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates an HTML control.
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads the value of the control.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.IFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:Rock.Field.IFieldType.QualifierUpdated">
            <summary>
            Occurs when a qualifier is updated.
            </summary>
        </member>
        <member name="M:Rock.Field.FieldType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Rock.Field"/> class.
            </summary>
        </member>
        <member name="M:Rock.Field.FieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.FieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.FieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.FieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.FieldType.OnQualifierUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when [qualifier updated].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Rock.Field.FieldType.QualifierUpdated">
            <summary>
            Occurs when [qualifier updated].
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentsFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.CategoryFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CategoryFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Migrations.Communications">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration_5">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.UpdateEntityType(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Updates the type of the entity.
            </summary>
            <param name="name">The name.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="isEntity">if set to <c>true</c> [is entity].</param>
            <param name="isSecured">if set to <c>true</c> [is secured].</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteEntityType(System.String)">
            <summary>
            Deletes the type of the entity.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.UpdateFieldType(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the type of the field.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="assembly">The assembly.</param>
            <param name="className">Name of the class.</param>
            <param name="guid">The GUID.</param>
            <param name="IsSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddFieldType(Rock.Model.FieldType)">
            <summary>
            Adds the type of the field.
            </summary>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteFieldType(System.String)">
            <summary>
            Deletes the type of the field.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlockType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlockType(Rock.Model.BlockType)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="blockType">Type of the block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteBlockType(System.String)">
            <summary>
            Deletes the type of the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DefaultSystemBlockType(System.String,System.String,System.Guid)">
            <summary>
            Defaults the type of the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddPage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="layout">The layout.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddPage(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddPage(System.String,Rock.Model.Page)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.MovePage(System.String,System.String)">
            <summary>
            Moves the page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeletePage(System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddPageRoute(System.String,System.String)">
            <summary>
            Adds the page route.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddPageContext(System.String,System.String,System.String)">
            <summary>
            Adds the page context.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="entity">The entity.</param>
            <param name="idParameter">The id parameter.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DefaultSystemPage(System.String,System.String,System.Guid)">
            <summary>
            Defaults the system page.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlock(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
            <param name="zone">The zone.</param>
            <param name="order">The order.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlock(System.String,System.String,Rock.Model.Block)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteBlock(System.String)">
            <summary>
            Deletes the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DefaultSystemBlock(System.String,System.Guid)">
            <summary>
            Defaults the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the block attribute.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.UpdateEntityType(System.String,System.String)">
            <summary>
            Updates the type of the entity.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddAttributeValue(System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the attribute value.
            </summary>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="entityId">The entity id.</param>
            <param name="value">The value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the defined.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteDefinedType(System.String)">
            <summary>
            Deletes the type of the defined.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the defined value.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the defined value.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_5.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.Communications.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.Communications.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ExceptionLog_FKUpdates">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ExceptionLog_FKUpdates.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ExceptionLog_FKUpdates.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ExceptionList_PageCreate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ExceptionList_PageCreate.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ExceptionList_PageCreate.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialTransactionBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionBase.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionBase.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ScheduleUsingICal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleUsingICal.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleUsingICal.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdatePersonDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdatePersonDetail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdatePersonDetail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ScheduleListDetailBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleListDetailBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleListDetailBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddIndexesForPersonProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddIndexesForPersonProfile.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddIndexesForPersonProfile.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CampusLocation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CampusLocation.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CampusLocation.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RemoveDigitalSignage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveDigitalSignage.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveDigitalSignage.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.BinaryFileData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.BinaryFileData.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.BinaryFileData.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddMiddleName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddMiddleName.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddMiddleName.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddExceptionDetailPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddExceptionDetailPage.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddExceptionDetailPage.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.EditPerson">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.EditPerson.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.EditPerson.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockControlGallery">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockControlGallery.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockControlGallery.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ScheduleCategory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleCategory.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleCategory.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AdditionalCheckinDataRedux">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AdditionalCheckinDataRedux.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AdditionalCheckinDataRedux.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialTransactionRefund">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialTransactionRefund02">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund02.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund02.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialTransactionRefund03">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund03.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTransactionRefund03.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupTypeShowInNavigation">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.GroupTypeShowInNavigation.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupTypeShowInNavigation.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupMemberListBlockAttributes">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.GroupMemberListBlockAttributes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupMemberListBlockAttributes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DeadBlockCleanup01">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.DeadBlockCleanup01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DeadBlockCleanup01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.TagGuid">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.TagGuid.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.TagGuid.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AttributeCategories">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.AttributeCategories.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AttributeCategories.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateGivingBlocks">
             <summary>
            
             </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration.UpdateEntityType(System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Updates the type of the entity.
            </summary>
            <param name="name">The name.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="isEntity">if set to <c>true</c> [is entity].</param>
            <param name="isSecured">if set to <c>true</c> [is secured].</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteEntityType(System.String)">
            <summary>
            Deletes the type of the entity.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.UpdateFieldType(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the type of the field.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="assembly">The assembly.</param>
            <param name="className">Name of the class.</param>
            <param name="guid">The GUID.</param>
            <param name="IsSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddFieldType(Rock.Model.FieldType)">
            <summary>
            Adds the type of the field.
            </summary>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteFieldType(System.String)">
            <summary>
            Deletes the type of the field.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlockType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlockType(Rock.Model.BlockType)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="blockType">Type of the block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteBlockType(System.String)">
            <summary>
            Deletes the type of the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DefaultSystemBlockType(System.String,System.String,System.Guid)">
            <summary>
            Defaults the type of the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddPage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="layout">The layout.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddPage(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddPage(System.String,Rock.Model.Page)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.MovePage(System.String,System.String)">
            <summary>
            Moves the page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeletePage(System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddPageRoute(System.String,System.String)">
            <summary>
            Adds the page route.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddPageContext(System.String,System.String,System.String)">
            <summary>
            Adds the page context.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="entity">The entity.</param>
            <param name="idParameter">The id parameter.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DefaultSystemPage(System.String,System.String,System.Guid)">
            <summary>
            Defaults the system page.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlock(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
            <param name="zone">The zone.</param>
            <param name="order">The order.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlock(System.String,System.String,Rock.Model.Block)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteBlock(System.String)">
            <summary>
            Deletes the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DefaultSystemBlock(System.String,System.Guid)">
            <summary>
            Defaults the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the block attribute.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.UpdateEntityType(System.String,System.String)">
            <summary>
            Updates the type of the entity.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddAttributeValue(System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the attribute value.
            </summary>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="entityId">The entity id.</param>
            <param name="value">The value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the defined.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteDefinedType(System.String)">
            <summary>
            Deletes the type of the defined.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the defined value.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the defined value.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.UpdateGivingBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateGivingBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AttributeCategoriesEmptyMigration">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.AttributeCategoriesEmptyMigration.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AttributeCategoriesEmptyMigration.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PathLength260">
             <summary>
            
             </summary>
        </member>
        <member name="M:Rock.Migrations.PathLength260.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PathLength260.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Model.BinaryFileDataService">
            <summary>
            BinaryFileData Service class
            </summary>
        </member>
        <member name="T:Rock.Data.Service`1">
            <summary>
            Generic POCO service class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Data.Service`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.Service`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.Service`1.#ctor(Rock.Data.IRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.Service`1"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="M:Rock.Data.Service`1.Queryable">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Queryable(System.String)">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models
            with eager loading of properties specified in includes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Int32)">
            <summary>
            Gets the model with the id value
            </summary>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Guid)">
            <summary>
            Gets the model with the Guid value
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets a list of items that match the specified expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Get(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Gets a list of items that match the specified expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetList(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Gets the list.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetIds(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the ids.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Any(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Anies the specified parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.TryGet(System.Int32,`0@)">
            <summary>
            Trys to get the model with the id value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByEncryptedKey(System.String)">
            <summary>
            Gets the model by the public encrypted key.
            </summary>
            <param name="encryptedKey">The encrypted key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.GetByPublicKey(System.String)">
            <summary>
            Gets the model by the public un-encrypted key.
            </summary>
            <param name="publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.DateCreated(`0)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.DateCreated(System.Int32,System.Int32)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.DateLastModified(`0)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.DateLastModified(System.Int32,System.Int32)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.CreatedByPersonId(`0)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.CreatedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.LastModifiedByPersonId(`0)">
            <summary>
            The person id who last modified the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.LastModifiedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who last modified the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Audits(`0)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Audits(System.Int32,System.Int32)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Add(`0,System.Nullable{System.Int32})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Attach(`0)">
            <summary>
            Attaches the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rock.Data.Service`1.SetValues(`0,`0)">
            <summary>
            Copies the Values from a Source Entity into a Target Entity
            </summary>
            <param name="sourceItem">The source item.</param>
            <param name="targetItem">The target item.</param>
        </member>
        <member name="M:Rock.Data.Service`1.TriggerWorkflows(Rock.Data.IEntity,Rock.Model.WorkflowTriggerType,System.Nullable{System.Int32})">
            <summary>
            Triggers the workflows.
            </summary>
            <param name="entity">The entity.</param>
            <param name="triggerType">Type of the trigger.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Delete(`0,System.Nullable{System.Int32})">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Save(`0,System.Nullable{System.Int32})">
            <summary>
            Saves the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service`1.Reorder(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Reorders the specified items.
            </summary>
            <param name="items">The items.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Service`1.ExecuteQuery(System.String,System.Object[])">
            <summary>
            Creates a raw sql query that will return entities
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Data.Service`1.ErrorMessages">
            <summary>
            Gets or sets the save messages.
            </summary>
            <value>
            The save messages.
            </value>
        </member>
        <member name="P:Rock.Data.Service`1.Repository">
            <summary>
            Gets the Repository.
            </summary>
        </member>
        <member name="P:Rock.Data.Service`1.ParameterExpression">
            <summary>
            Gets a LINQ expression parameter.
            </summary>
            <value>
            The parameter expression.
            </value>
        </member>
        <member name="M:Rock.Model.BinaryFileDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileDataService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataService.#ctor(Rock.Data.IRepository{Rock.Model.BinaryFileData})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileDataService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataService.CanDelete(Rock.Model.BinaryFileData,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BinaryFileDataExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataExtensionMethods.Clone(Rock.Model.BinaryFileData,System.Boolean)">
            <summary>
            Clones this BinaryFileData object to a new BinaryFileData object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountService">
            <summary>
            FinancialPersonBankAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonBankAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialPersonBankAccount})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonBankAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountService.CanDelete(Rock.Model.FinancialPersonBankAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountExtensionMethods.Clone(Rock.Model.FinancialPersonBankAccount,System.Boolean)">
            <summary>
            Clones this FinancialPersonBankAccount object to a new FinancialPersonBankAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountService">
            <summary>
            FinancialPersonSavedAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonSavedAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialPersonSavedAccount})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonSavedAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountService.CanDelete(Rock.Model.FinancialPersonSavedAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountExtensionMethods.Clone(Rock.Model.FinancialPersonSavedAccount,System.Boolean)">
            <summary>
            Clones this FinancialPersonSavedAccount object to a new FinancialPersonSavedAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundService">
            <summary>
            FinancialTransactionRefund Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionRefundService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialTransactionRefund})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionRefundService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundService.CanDelete(Rock.Model.FinancialTransactionRefund,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundExtensionMethods.Clone(Rock.Model.FinancialTransactionRefund,System.Boolean)">
            <summary>
            Clones this FinancialTransactionRefund object to a new FinancialTransactionRefund object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheckService">
            <summary>
            FinancialTransactionScannedCheck Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionScannedCheckService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialTransactionScannedCheck})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionScannedCheckService"/> class
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheckExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionScannedCheckExtensionMethods.Clone(Rock.Model.FinancialTransactionScannedCheck,System.Boolean)">
            <summary>
            Clones this FinancialTransactionScannedCheck object to a new FinancialTransactionScannedCheck object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileData">
            <summary>
            File POCO Entity.
            </summary>
        </member>
        <member name="T:Rock.Data.Model`1">
            <summary>
            Represents an entity that can be secured and have attributes. 
            </summary>
        </member>
        <member name="T:Rock.Data.Entity`1">
            <summary>
            Base class that all models need to inherit from
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rock.Data.IEntity">
            <summary>
            Interface for all code-first entitites
            </summary>
        </member>
        <member name="M:Rock.Data.IEntity.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Data.IEntity.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.TypeName">
            <summary>
            Gets the unique type name of the entity.  Typically this is the qualified name of the class
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.EncryptedKey">
            <summary>
            Gets the encrypted key.
            </summary>
            <value>
            The encrypted key.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.ContextKey">
            <summary>
            Gets the context key.
            </summary>
            <value>
            The context key.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.ValidationResults">
            <summary>
            Gets the validation results.
            </summary>
            <value>
            The validation results.
            </value>
        </member>
        <member name="P:Rock.Data.IEntity.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Data.Entity`1.Clone">
            <summary>
            Creates a deep copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Entity`1.ToDictionary">
            <summary>
            Converts object to dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Entity`1.FromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Froms the dictionary.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.ToLiquid">
            <summary>
            Converts object to dictionary for DotLiquid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Entity`1.FromJson(System.String)">
            <summary>
            Static method to return an object from a json string.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Entity`1.OnAdding(Rock.Data.ModelUpdatingEventArgs)">
            <summary>
            Raises the <see cref="E:Adding"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseAddingEvent(System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Raises the adding event.
            </summary>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.OnAdded(Rock.Data.ModelUpdatedEventArgs)">
            <summary>
            Raises the <see cref="E:Added"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseAddedEvent(System.Nullable{System.Int32})">
            <summary>
            Raises the added event.
            </summary>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.OnDeleting(Rock.Data.ModelUpdatingEventArgs)">
            <summary>
            Raises the <see cref="E:Deleting"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseDeletingEvent(System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Raises the deleting event.
            </summary>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.OnDeleted(Rock.Data.ModelUpdatedEventArgs)">
            <summary>
            Raises the <see cref="E:Deleted"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseDeletedEvent(System.Nullable{System.Int32})">
            <summary>
            Raises the deleted event.
            </summary>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.OnUpdating(Rock.Data.ModelUpdatingEventArgs)">
            <summary>
            Raises the <see cref="E:Updating"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseUpdatingEvent(System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Raises the updating event.
            </summary>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.OnUpdated(Rock.Data.ModelUpdatedEventArgs)">
            <summary>
            Raises the <see cref="E:Updated"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Data.ModelUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Data.Entity`1.RaiseUpdatedEvent(System.Nullable{System.Int32})">
            <summary>
            Raises the updated event.
            </summary>
            <param name="personId">The person id.</param>
        </member>
        <member name="P:Rock.Data.Entity`1.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:Rock.Data.Entity`1.Guid">
            <summary>
            Gets or 
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.TypeId">
            <summary>
            Gets the type id.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.TypeName">
            <summary>
            Gets the unique type name of the entity.  Typically this is the qualified name of the class
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.ContextKey">
            <summary>
            Gets the context key.
            </summary>
            <value>
            The context key.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.ValidationResults">
            <summary>
            Gets the validation results.
            </summary>
        </member>
        <member name="P:Rock.Data.Entity`1.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Data.Entity`1.EncryptedKey">
            <summary>
            Gets a publicly viewable unique key for the model.
            </summary>
        </member>
        <member name="P:Rock.Data.Entity`1.FriendlyTypeName">
            <summary>
            Gets the name of the entity type friendly.
            </summary>
            <value>
            The name of the entity type friendly.
            </value>
        </member>
        <member name="E:Rock.Data.Entity`1.Adding">
            <summary>
            Occurs when model is being added.
            </summary>
        </member>
        <member name="E:Rock.Data.Entity`1.Added">
            <summary>
            Occurs when model was added.
            </summary>
        </member>
        <member name="E:Rock.Data.Entity`1.Deleting">
            <summary>
            Occurs when model is being deleted.
            </summary>
        </member>
        <member name="E:Rock.Data.Entity`1.Deleted">
            <summary>
            Occurs when model was deleted.
            </summary>
        </member>
        <member name="E:Rock.Data.Entity`1.Updating">
            <summary>
            Occurs when model is being updated.
            </summary>
        </member>
        <member name="E:Rock.Data.Entity`1.Updated">
            <summary>
            Occurs when model was updated
            </summary>
        </member>
        <member name="T:Rock.Security.ISecured">
            <summary>
            Represents a securable object.  Note each ISecured object must also expose a static Read(int id) method if the object
            types will be used in a grid with a SecureField column
            </summary>
        </member>
        <member name="M:Rock.Security.ISecured.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.ISecured.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ISecured.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.ISecured.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="P:Rock.Security.ISecured.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Security.ISecured.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the 
            qualified name of the class. 
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to 
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Security.ISecured.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="T:Rock.Attribute.IHasAttributes">
            <summary>
            Represents any class that supports having attributes
            </summary>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.GetAttributeValues(System.String)">
            <summary>
            Gets the first value of an attribute key - splitting that delimited value into a list of strings.
            </summary>
            <param name="key">The key.</param>
            <returns>A list of string values or an empty list if none exist.</returns>
        </member>
        <member name="M:Rock.Attribute.IHasAttributes.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Attribute.IHasAttributes.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Attribute.IHasAttributes.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.  This property can be used by a subclass to override the parent class's default
            value for an attribute
            </summary>
            <value>
            The attribute value defaults.
            </value>
        </member>
        <member name="M:Rock.Data.Model`1.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Data.Model`1.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Model`1.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Data.Model`1.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="M:Rock.Data.Model`1.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Model`1.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Data.Model`1.GetAttributeValues(System.String)" -->
        <member name="M:Rock.Data.Model`1.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Data.Model`1.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check the default authorization on the current type, and 
            then the authorization on the Rock.Security.GlobalDefault entity
            </summary>
        </member>
        <member name="P:Rock.Data.Model`1.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="P:Rock.Data.Model`1.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Data.Model`1.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Data.Model`1.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileData.Content">
            <summary>
            Gets or sets the content
            </summary>
            <value>
            content.
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileDataConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileDataConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:BinaryFileDatConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Net.RockWebRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.RockWebRequest.Get(System.String)">
            <summary>
            Gets the specified request URI string.
            </summary>
            <param name="requestUriString">The request URI string.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockWebRequest.Send(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends the specified request URI string.
            </summary>
            <param name="requestUriString">The request URI string.</param>
            <param name="method">The method.</param>
            <param name="queryStringData">The query string data.</param>
            <param name="formData">The form data.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Rock.Net.RockWebRequest.GetResponseString(System.IO.Stream)">
            <summary>
            Gets the response string.
            </summary>
            <param name="responseStream">The response stream.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Net.RockWebResponse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.RockWebResponse.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockWebResponse"/> class.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Rock.Net.RockWebResponse.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Rock.Net.RockWebResponse.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.BadgeComponent">
            <summary>
            Base class for person profile badges
            </summary>
        </member>
        <member name="T:Rock.Extension.Component">
            <summary>
            Abstract class that custom component classes should derive from.  
            <example>
            The derived class should define the following type attributes
            </example>
            <code>
                [Description("<i>description of component</i>")]
                [Export( typeof( Component ) )]
                [ExportMetadata( "ComponentName", "<i>Name of Component</i>" )]
            </code>
            <example>
            The derived class can also optionally define one or more property type attributes
            </example>
            <code>
                [Rock.Attribute.Property( 1, "License Key", "The Required License Key" )]
            </code>
            <example>
            To get the value of a property, the derived class can use the AttributeValues property
            </example>
            <code>
                string licenseKey = AttributeValues["LicenseKey"].Value;
            </code>
            </summary>
        </member>
        <member name="M:Rock.Extension.Component.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Extension.Component.GetAttributeValues(System.String)" -->
        <member name="M:Rock.Extension.Component.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Extension.Component.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Extension.Component"/> class.
            </summary>
        </member>
        <member name="M:Rock.Extension.Component.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Extension.Component.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Extension.Component.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Extension.Component.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="P:Rock.Extension.Component.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Extension.Component.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.  Key is the attribute key, and value is the values
            associated with the attribute and object instance
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeGuid">
            <summary>
            Gets the Entity type GUID for this entity
            </summary>
            <value>
            The type GUID.
            </value>
        </member>
        <member name="P:Rock.Extension.Component.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="!:ISecured"/> interface should return
            a value that is unique across all <see cref="!:ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Extension.Component.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.PersonProfile.BadgeComponent"/> class.
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeComponent.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.ParentPersonBlock">
            <summary>
            Gets or sets the parent person block.
            </summary>
            <value>
            The parent person block.
            </value>
        </member>
        <member name="P:Rock.PersonProfile.BadgeComponent.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.BadgeContainer">
            <summary>
            MEF Container class for Person Badge Componenets
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.BadgeContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.BadgeContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.Badge.NextSteps">
            <summary>
            NextSteps Badge
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.IconBadge">
            <summary>
            Base class for person profile icon badges
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.PersonProfile.IconBadge.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.PersonProfile.Badge.NextSteps.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.NextSteps.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.NextSteps.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.FamilyAttendance">
            <summary>
            FamilyAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.FamilyAttendance.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.FamilyAttendance.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.FamilyAttendance.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.eraAttendanceAttendance">
            <summary>
            eraAttendance Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.eraAttendanceAttendance.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.eraAttendanceAttendance.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.eraAttendanceAttendance.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.DiscScore">
            <summary>
            DiscScore Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.DiscScore.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.DiscScore.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.DiscScore.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.eRA">
            <summary>
            eRA Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.eRA.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.eRA.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.PersonProfile.Badge.RecordStatus">
            <summary>
            Record Status Badge
            </summary>
        </member>
        <member name="T:Rock.PersonProfile.TextBadge">
            <summary>
            Base class for person profile icon badges
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.TextBadge.GetText(Rock.Model.Person)">
            <summary>
            Gets the text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.TextBadge.GetBadgeType(Rock.Model.Person)">
            <summary>
            Gets the type of the badge.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.TextBadge.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.PersonProfile.Badge.RecordStatus.GetBadgeType(Rock.Model.Person)">
            <summary>
            Gets the type of the badge.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.RecordStatus.GetText(Rock.Model.Person)">
            <summary>
            Gets the text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.RecordStatus.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.Campus">
            <summary>
            Campus Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Campus.GetBadgeType(Rock.Model.Person)">
            <summary>
            Gets the type of the badge.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Campus.GetText(Rock.Model.Person)">
            <summary>
            Gets the text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.Campus.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.PersonStatus">
            <summary>
            Person Status Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.PersonStatus.GetBadgeType(Rock.Model.Person)">
            <summary>
            Gets the type of the badge.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.PersonStatus.GetText(Rock.Model.Person)">
            <summary>
            Gets the text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.PersonStatus.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.PersonProfile.Badge.Serving">
            <summary>
            Serving Badge
            </summary>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Serving.GetToolTipText(Rock.Model.Person)">
            <summary>
            Gets the tool tip text.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.PersonProfile.Badge.Serving.GetIconPath(Rock.Model.Person)">
            <summary>
            Gets the icon path.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.PersonProfile.Badge.Serving.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.EntityType">
            <summary>
            System Email Templates
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EntityType.COMMUNICATION_CHANNEL_EMAIL">
            <summary>
            Gets the guid for the email communication channel
            </summary>
        </member>
        <member name="T:Rock.Transactions.SendCommunicationTransaction">
            <summary>
            Writes entity audits 
            </summary>
        </member>
        <member name="T:Rock.Transactions.ITransaction">
            <summary>
            Represents a Transaction class
            </summary>
        </member>
        <member name="M:Rock.Transactions.ITransaction.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Rock.Transactions.SendCommunicationTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.SendCommunicationTransaction.Communication">
            <summary>
            Gets or sets the communication.
            </summary>
            <value>
            The communication.
            </value>
        </member>
        <member name="P:Rock.Transactions.SendCommunicationTransaction.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.CategoryCache">
            <summary>
            Information about a category that is cached by Rock. 
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.CachedModel`1">
            <summary>
            A Secured data transfer object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="F:Rock.Web.Cache.CachedModel`1.AttributeIds">
            <summary>
            The attribute ids
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.SaveAttributeValues(System.Nullable{System.Int32})">
            <summary>
            Saves the attribute values.
            </summary>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.GetAttributeValue(System.String)">
            <summary>
            Gets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <returns>The stored value as a string or null if none exists.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Web.Cache.CachedModel`1.GetAttributeValues(System.String)" -->
        <member name="M:Rock.Web.Cache.CachedModel`1.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the first value of an attribute key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.Cache.CachedModel`1.ReloadAttributeValues">
            <summary>
            Reloads the attribute values.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.Attributes">
            <summary>
            List of attributes associated with the object.  This property will not include the attribute values.
            The <see cref="P:Rock.Web.Cache.CachedModel`1.AttributeValues"/> property should be used to get attribute values.  Dictionary key
            is the attribute key, and value is the cached attribute
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.AttributeValues">
            <summary>
            Dictionary of all attributes and their value.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.CachedModel`1.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(System.Int32)">
            <summary>
            Returns Category object from cache.  If category does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id of the Category to read</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Read(Rock.Model.Category)">
            <summary>
            Adds Category model to cache, and returns cached object
            </summary>
            <param name="categoryModel">The categoryModel to cache</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CategoryCache.Flush(System.Int32)">
            <summary>
            Removes category from cache
            </summary>
            <param name="id">The id of the category to remove from cache</param>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.ParentCategoryId">
            <summary>
            Gets or sets the parent category id.
            </summary>
            <value>
            The parent category id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IconSmallFileId">
            <summary>
            Gets or sets the icon small file id.
            </summary>
            <value>
            The icon small file id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IconLargeFileId">
            <summary>
            Gets or sets the icon large file id.
            </summary>
            <value>
            The icon large file id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.ParentCategory">
            <summary>
            Gets the parent category.
            </summary>
            <value>
            The parent category.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CategoryCache.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.ChannelControl">
            <summary>
            abstract class for controls used to render a communication channel
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.ChannelControl.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.ChannelControl.GetDataValue(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Gets the data value.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.ChannelData">
            <summary>
            Gets or sets the channel data.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.ChannelControl.AdditionalMergeFields">
            <summary>
            Gets or sets any additional merge fields.
            </summary>
        </member>
        <member name="T:Rock.Data.IgnoreModelErrorsAttribute">
            <summary>
            derived from http://mrbigglesworth79.blogspot.in/2011/12/partial-validation-with-data.html
            </summary>
        </member>
        <member name="M:Rock.Data.IgnoreModelErrorsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.IgnoreModelErrorsAttribute"/> class.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:Rock.Data.IgnoreModelErrorsAttribute.Keys">
            <summary>
            The keys string
            </summary>
        </member>
        <member name="T:Rock.Migrations.BinaryFileTypeContributionImage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.BinaryFileTypeContributionImage.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.BinaryFileTypeContributionImage.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateCheckinAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateCheckinAttributes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateCheckinAttributes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AccountNumberSecuredGroupTypeDisplayOrder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AccountNumberSecuredGroupTypeDisplayOrder.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AccountNumberSecuredGroupTypeDisplayOrder.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientService">
            <summary>
            Communication Recipient POCO Service class
            </summary>
            <summary>
            CommunicationRecipient Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.Get(System.Int32,Rock.Model.CommunicationRecipientStatus)">
            <summary>
            Gets the specified communication id.
            </summary>
            <param name="communicationId">The communication id.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.GetByCommunicationId(System.Int32)">
            <summary>
            Gets the by communication id.
            </summary>
            <param name="communicationId">The communication id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.#ctor(Rock.Data.IRepository{Rock.Model.CommunicationRecipient})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientService.CanDelete(Rock.Model.CommunicationRecipient,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Migrations.TransactionsPageUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.TransactionsPageUpdate.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.TransactionsPageUpdate.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CheckMicrEncrypted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CheckMicrEncrypted.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CheckMicrEncrypted.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PublicPledgeBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.PublicPledgeBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PublicPledgeBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialBatchPerson">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialBatchPerson.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialBatchPerson.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.StateDropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.StateDropDownList.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.StateDropDownList.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DateTimeDataTypesSweep">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DateTimeDataTypesSweep.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DateTimeDataTypesSweep.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Net.RockRestClient">
            <summary>
            from http://stackoverflow.com/questions/4740752/how-to-login-with-webclient-c-sharp
            and http://stackoverflow.com/questions/1777221/using-cookiecontainer-with-webclient-class
            Used by Apps.CheckScannerUtility
            </summary>
        </member>
        <member name="M:Rock.Net.RockRestClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockRestClient"/> class.
            </summary>
        </member>
        <member name="M:Rock.Net.RockRestClient.#ctor(System.String,System.Net.CookieContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.RockRestClient"/> class.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebRequest(System.Uri)">
            <summary>
            Returns a <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </summary>
            <param name="address">A <see cref="T:System.Uri" /> that identifies the resource to request.</param>
            <returns>
            A new <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" /> using the specified <see cref="T:System.IAsyncResult" />.
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
            <param name="result">An <see cref="T:System.IAsyncResult" /> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> .</param>
            <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetWebResponse(System.Net.WebRequest)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" />.
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
            <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.ReadCookies(System.Net.WebResponse)">
            <summary>
            Reads the cookies.
            </summary>
            <param name="r">The r.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.Login(System.String,System.String,System.String)">
            <summary>
            Logins the specified username.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="rockBaseUrl">The rock base URL.</param>
            <param name="rockLoginUrl">The rock login URL.</param>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetData``1(System.String,System.String)">
            <summary>
            Gets the data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path, for example "api/BinaryFileTypes"</param>
            <param name="odataFilter">The odata filter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetDataByGuid``1(System.String,System.Guid)">
            <summary>
            Gets the data by GUID.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.GetDataByEnum``1(System.String,System.String,System.Enum)">
            <summary>
            Gets the data by enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getPath">The get path.</param>
            <param name="enumFieldName">Name of the enum field.</param>
            <param name="enumVal">The enum val.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Net.RockRestClient.PostData``1(System.String,``0)">
            <summary>
            Posts the data 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="postPath">The post path.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Rock.Net.RockRestClient.rockBaseUri">
            <summary>
            Gets or sets the rock base URI.
            </summary>
            <value>
            The rock base URI.
            </value>
        </member>
        <member name="P:Rock.Net.RockRestClient.CookieContainer">
            <summary>
            Gets or sets the cookie container.
            </summary>
            <value>
            The cookie container.
            </value>
        </member>
        <member name="T:Rock.Net.HttpErrorException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Net.HttpErrorException.#ctor(System.Web.Http.HttpError)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Net.HttpErrorException"/> class.
            </summary>
            <param name="httpError">The HTTP error.</param>
        </member>
        <member name="P:Rock.Net.HttpErrorException._message">
            <summary>
            Gets or sets the _message.
            </summary>
            <value>
            The _message.
            </value>
        </member>
        <member name="P:Rock.Net.HttpErrorException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Rock.Security.LoginParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Security.LoginParameters.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Rock.Security.LoginParameters.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInBlock">
            <summary>
            A RockBlock specific to check-in
            </summary>
        </member>
        <member name="T:Rock.Web.UI.RockBlock">
            <summary>
            RockBlock is the base abstract class that all Blocks should inherit from
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ContextEntity``1">
            <summary>
            Returns the ContextEntity of the Type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ContextEntity">
            <summary>
            Return the ContextEntity for blocks that are designed to have at most one ContextEntity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.RockBlock"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.#ctor(Rock.Web.Cache.PageCache,Rock.Web.Cache.BlockCache,Rock.Web.PageReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.RockBlock"/> class.
            </summary>
            <param name="currentPage">The current page.</param>
            <param name="currentBlock">The current block.</param>
            <param name="currentPageReference">The current page reference.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.Object)">
            <summary>
            Adds an object to the default MemoryCache.
            </summary>
            <param name="value">Object to cache</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object)">
            <summary>
            Adds an object to the default MemoryCache.
            </summary>
            <param name="key">Key to differentiate items from same block instance</param>
            <param name="value">Object to cache</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object,System.Int32)">
            <summary>
            Adds an object to the default MemoryCache.
            </summary>
            <param name="key">Key to differentiate items from same block instance</param>
            <param name="value">Object to cache</param>
            <param name="seconds">The Number of seconds to cache object for</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddCacheItem(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Adds an object to the default MemoryCache.
            </summary>
            <param name="key">Key to differentiate items from same block instance</param>
            <param name="value">Object to cache</param>
            <param name="cacheItemPolicy">Optional CacheItemPolicy, defaults to null</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetCacheItem(System.String)">
            <summary>
            Retrieve an object from the cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.FlushCacheItem(System.String)">
            <summary>
            Flush an object from the cache
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ItemCacheKey(System.String)">
            <summary>
            Items the cache key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            When a control renders it's content to the page, this method will also check to see if 
            the block instance of this control has been configured for output caching, and if so, 
            the contents will also be rendered to a string variable that will gets cached in the 
            default MemoryCache for use next time by the Rock.Web.UI.RockPage.OnInit() method when rendering the 
            control content.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SaveAttributeValues(System.Nullable{System.Int32})">
            <summary>
            Saves the attribute values.
            </summary>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAttributeValue(System.String)">
            <summary>
            Returns the current block value for the selected attribute
            If the attribute doesn't exist a null value is returned  
            </summary>
            <param name="key">the block attribute key</param>
            <returns>the stored value as a string or null if none exists</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Web.UI.RockBlock.GetAttributeValues(System.String)" -->
        <member name="M:Rock.Web.UI.RockBlock.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.AddAttributeUpdateTrigger(System.Web.UI.UpdatePanel)">
            <summary>
            Adds an update trigger for when the block instance properties are updated.
            </summary>
            <param name="updatePanel">The update panel.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.IsUserAuthorized(System.String)">
            <summary>
            Evaluates if the CurrentPerson is authorized to perform the requested action 
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameter(System.String)">
            <summary>
            Checks the page's RouteData values and then the query string for a
            parameter matching the specified name, and if found returns the string
            value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameter(Rock.Web.PageReference,System.String)">
            <summary>
            Pages the parameter.
            </summary>
            <param name="pageReference">The page reference.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.PageParameters">
            <summary>
            Gets the page route and query string parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToLinkedPage(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates to a linked page attribute.
            </summary>
            <param name="attributeKey">The attribute key.</param>
            <param name="queryParams">The query params.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToParentPage(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates to parent page.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToDetailPage(System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Shows the detail page.
            </summary>
            <param name="itemKey">The item key.</param>
            <param name="itemKeyValue">The item key value.</param>
            <param name="itemParentKey">The item parent key.</param>
            <param name="itemParentValue">The item parent value.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.NavigateToPage(System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Navigates to page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="itemKey">The item key.</param>
            <param name="itemKeyValue">The item key value.</param>
            <param name="additionalParams">The additional params.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.DimOtherBlocks(System.Boolean)">
            <summary>
            Dims the other blocks.
            </summary>
            <param name="dimmed">if set to <c>true</c> [dimmed].</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetUserPreference(System.String)">
            <summary>
            Gets the user preference value for the current user for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetUserPreferences(System.String)">
            <summary>
            Gets the preferences for the current user that start with a given key.
            </summary>
            <param name="keyPrefix">The key prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.SetUserPreference(System.String,System.String)">
            <summary>
            Sets a preference for the current user for a given key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAdministrateControls(System.Boolean,System.Boolean)">
            <summary>
            Adds icons to the configuration area of a block instance.  Can be overridden to
            add additionsl icons
            </summary>
            <param name="canConfig"></param>
            <param name="canEdit"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetBreadCrumbs(Rock.Web.PageReference)">
            <summary>
            Returns breadcrumbs specific to the block that should be added to navigation
            based on the current page reference.  This function is called during the page's
            oninit to load any initial breadcrumbs
            </summary>
            <param name="pageReference">The page reference.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.ContentUpdated">
            <summary>
            Contents the updated.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.CreateAttributes">
            <summary>
            Creates and or updates any attributes defined for the block
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.GetAdditionalActions">
            <summary>
            Reads the additional actions.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.trigger_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the trigger control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockBlock.CmsBlock_BlockAttributesUpdated(System.Object,Rock.Web.UI.BlockAttributesUpdatedEventArgs)">
            <summary>
            Handles the BlockAttributesUpdated event of the CmsBlock control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.BlockAttributesUpdatedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPage">
            <summary>
            The current page.  This value is read and cached by the RockRouteHandler
            and set by the layout's base class (Rock.Web.UI.RockPage) when loading the block instance
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentBlock">
            <summary>
            The current block.  This value is read and cached by the layout's 
            base class (Rock.Web.UI.RockPage) when loading the block instance
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPageReference">
            <summary>
            Gets the current page reference.
            </summary>
            <value>
            The current page reference.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPersonId">
            <summary>
            The personID of the currently logged in user.  If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentUser">
            <summary>
            Returns the currently logged in user.  If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentPerson">
            <summary>
            Returns the currently logged in person. If user is not logged in, returns null
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.CurrentTheme">
            <summary>
            Relative path to the current theme and layout folder.  Useful for setting paths to
            theme resource files
            <example>
            Client Side: <c><![CDATA[<img src='<%= CurrentTheme %>/Images/avatar.gif' />]]> </c>
            Server Side: <c>myImg.ImageUrl = CurrentTheme + "/Images/avatar.gif";</c>
            </example>
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.BreadCrumbs">
            <summary>
            Gets the bread crumbs that were created during the page's oninit.  A block
            can add additional breadcrumbs to this list to be rendered.  Crumb's added 
            this way will not be saved to the current page reference's collection of 
            breadcrumbs, so wil not be available when user navigates to another child
            page.  Because of this only last-level crumbs should be added this way.  To
            persist breadcrumbs in the session state, override the GetBreadCrumbs 
            method instead.
            </summary>
            <value>
            The bread crumbs.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.AppPath">
            <summary>
            Gets the app path.
            </summary>
            <value>
            The app path.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.RootPath">
            <summary>
            Gets the root URL Path.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.ContextTypesRequired">
            <summary>
            Gets a list of any context entities that the block requires.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockBlock.ContextEntities">
            <summary>
            Gets a dictionary of the current context entities.  The key is the type of context, and the value is the entity object
            </summary>
            <value>
            The context entities.
            </value>
        </member>
        <member name="E:Rock.Web.UI.RockBlock.AttributesUpdated">
            <summary>
            Occurs when the block instance properties are updated.
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentGroupTypeIds">
            <summary>
            The current group type ids
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentCheckInState">
            <summary>
            The current check in state
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CurrentWorkflow">
            <summary>
            The current workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.ProcessActivity(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Activates and processes a workflow activity.  If the workflow has not yet been activated, it will
            also be activated
            </summary>
            <param name="activityName">Name of the activity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.SaveState">
            <summary>
            Saves the current state of the kiosk and workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.CancelCheckin">
            <summary>
            Cancels the checkin.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToHomePage">
            <summary>
            Navigates to the checkin home page.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToNextPage">
            <summary>
            Navigates to next page.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInBlock.NavigateToPreviousPage">
            <summary>
            Navigates to previous page.
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.CurrentKioskId">
            <summary>
            The current kiosk id
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.KioskCurrentlyActive">
            <summary>
            Gets a value indicating whether the kiosk has active group types and locations that 
            are open for check-in.
            </summary>
            <value>
            <c>true</c> if kiosk is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInBlock.UserBackedUp">
            <summary>
            Gets a value indicating whether page was navigated to by user selecting Back.
            </summary>
            <value>
              <c>true</c> if [backing up]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInBlock.CheckInCookie">
            <summary>
            Holds cookie names shared across certain checkin blocks.
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CheckInCookie.DEVICEID">
            <summary>
            The name of the cookie that holds the DeviceId. Setters of this cookie should
            be sure to set the expiration to a time when the device is no longer valid.
            </summary>
        </member>
        <member name="F:Rock.CheckIn.CheckInBlock.CheckInCookie.ISMOBILE">
            <summary>
            The name of the cookie that holds whether or not the device was a mobile device.
            </summary>
        </member>
        <member name="T:Rock.CheckIn.CheckInFamily">
            <summary>
            A family option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInFamily.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInFamily"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInFamily.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInFamily.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInFamily"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.People">
            <summary>
            Gets or sets the people that this family can check-in
            </summary>
            <value>
            The people.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.Caption">
            <summary>
            An optional value that can be set to display family name.  If not set, the Group name will be used
            </summary>
        </member>
        <member name="P:Rock.CheckIn.CheckInFamily.SubCaption">
            <summary>
            Gets or sets the sub caption.
            </summary>
            <value>
            The sub caption.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInGroup">
            <summary>
            A group option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInGroup"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroup.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInGroup"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into this group for any of the schedules
            </summary>
            <value>
            The last check in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroup.Schedules">
            <summary>
            Gets or sets the schedules that are available for the current group
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInGroupType">
            <summary>
            A group type option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInGroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInGroupType.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInGroupType"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.LastCheckIn">
            <summary>
            Gets or sets the last time person checked in to any of the Locations for this group type
            </summary>
            <value>
            The last check in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Locations">
            <summary>
            Gets or sets the locations that are available for the current group type
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInGroupType.Labels">
            <summary>
            Gets or sets the labels to be printed after succesful checkin
            </summary>
            <value>
            The labels.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInLocation">
            <summary>
            A location option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLocation"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInLocation.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInLocation"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into any of the groups for this location and group type
            </summary>
            <value>
            The last check in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLocation.Groups">
            <summary>
            Gets or sets the groups that are available for the current location
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInPerson">
            <summary>
            A person option for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInPerson"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInPerson.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.FamilyMember">
            <summary>
            Gets or sets a value indicating whether this person is a part of the family (vs. from a relationship).
            </summary>
            <value>
              <c>true</c> if family member; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInPerson"/> is selected for check-in.
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.LastCheckIn">
            <summary>
            Gets or sets the last time person checked in to any of the GroupTypes
            </summary>
            <value>
            The last check in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.SecurityCode">
            <summary>
            Gets or sets the the unique code for check-in labels
            </summary>
            <value>
            The security code.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInPerson.GroupTypes">
            <summary>
            Gets or sets the group types available for the current person.
            </summary>
            <value>
            The group types.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInSchedule">
            <summary>
            A shedule options for the current check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInSchedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInSchedule.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.LastCheckIn">
            <summary>
            Gets or sets the last time person checked into this schedule for the selected group type, location and group 
            </summary>
            <value>
            The last check in.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInSchedule.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.CheckIn.CheckInSchedule"/> is selected for check-in
            </summary>
            <value>
              <c>true</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInState">
            <summary>
            Object for maintaining the state of a check-in kiosk and workflow
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInState.#ctor(Rock.CheckIn.KioskStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInState"/> class.
            </summary>
            <param name="kioskStatus">The kiosk status.</param>
        </member>
        <member name="M:Rock.CheckIn.CheckInState.FromJson(System.String)">
            <summary>
            Creates a new CheckInState object Froms a json string.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.CheckInState.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.Kiosk">
            <summary>
            Gets or sets the kiosk status
            </summary>
            <value>
            The kiosk.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInState.CheckIn">
            <summary>
            Gets or sets the check in status
            </summary>
            <value>
            The check in.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInStatus">
            <summary>
            The status of the currently active check-in.  Contains all the available options
            and the values selected for check-in
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInStatus"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInStatus.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.UserEnteredSearch">
            <summary>
            Gets or sets a value indicating whether the search value was entered by a user (vs. scanned)
            </summary>
            <value>
              <c>true</c> if user entered search; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.ConfirmSingleFamily">
            <summary>
            Gets or sets a value indicating if a single family result should be confirmed 
            by user.  Usually the user entered values will need to be confirmed, while the 
            scanned values are more unique and will not need to be confirmed
            </summary>
            <value>
              <c>true</c> if confirm single family; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.SearchType">
            <summary>
            Gets or sets the type of value that was scanned or entered (i.e. "Barcode",  
            "Phone Number", etc)
            </summary>
            <value>
            The type of the search.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.SearchValue">
            <summary>
            Gets or sets the search value that was scanned or entered by user
            </summary>
            <value>
            The search value.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInStatus.Families">
            <summary>
            Gets or sets the families that match the search value
            </summary>
            <value>
            The families.
            </value>
        </member>
        <member name="T:Rock.CheckIn.CheckInLabel">
            <summary>
            The label details
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLabel"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.CheckInLabel.#ctor(Rock.CheckIn.LabelCache,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.CheckInLabel"/> class.
            </summary>
            <param name="labelCache">The label cache.</param>
        </member>
        <member name="M:Rock.CheckIn.CheckInLabel.ToLiquid">
            <summary>
            To the liquid.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrinterDeviceId">
            <summary>
            Gets or sets the printer device id.
            </summary>
            <value>
            The printer address.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrinterAddress">
            <summary>
            Gets or sets the printer address.
            </summary>
            <value>
            The printer address.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrintFrom">
            <summary>
            Gets or sets the print from.
            </summary>
            <value>
            The print from.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.PrintTo">
            <summary>
            Gets or sets the print to.
            </summary>
            <value>
            The print to.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.FileId">
            <summary>
            Gets or sets the file id.
            </summary>
            <value>
            The file id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.LabelFile">
            <summary>
            Gets or sets the label file.
            </summary>
            <value>
            The label file.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.LabelKey">
            <summary>
            Gets or sets the label key.
            </summary>
            <value>
            The label key.
            </value>
        </member>
        <member name="P:Rock.CheckIn.CheckInLabel.MergeFields">
            <summary>
            Gets or sets the merge fields.
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="T:Rock.CheckIn.LabelCache">
            <summary>
            Cached Check in Label
            </summary>
        </member>
        <member name="P:Rock.CheckIn.LabelCache.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.CheckIn.LabelCache.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.CheckIn.LabelCache.FileContent">
            <summary>
            Gets or sets the content of the file.
            </summary>
            <value>
            The content of the file.
            </value>
        </member>
        <member name="P:Rock.CheckIn.LabelCache.MergeFields">
            <summary>
            Gets or sets the merge fields.
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskLocationAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk location
            </summary>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.LocationId">
            <summary>
            Gets or sets the location id.
            </summary>
            <value>
            The location id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.LocationName">
            <summary>
            Gets or sets the name of the location.
            </summary>
            <value>
            The name of the location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocationAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroupAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk group
            </summary>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.Schedules">
            <summary>
            Gets or sets the schedules.
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskScheduleAttendance">
            <summary>
            Helper class for storing the current attendance for a given kiosk schedule
            </summary>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.ScheduleId">
            <summary>
            Gets or sets the schedule id.
            </summary>
            <value>
            The schedule id.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.ScheduleName">
            <summary>
            Gets or sets the name of the schedule.
            </summary>
            <value>
            The name of the schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.PersonIds">
            <summary>
            Gets or sets the person ids.
            </summary>
            <value>
            The person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.DistinctPersonIds">
            <summary>
            Gets the distinct person ids.
            </summary>
            <value>
            The distinct person ids.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskScheduleAttendance.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
            <value>
            The current count.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroup"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.#ctor(Rock.Model.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroup"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskGroup.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroup.KioskSchedules">
            <summary>
            The schedules that are currently active
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskGroupType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.#ctor(Rock.Model.GroupType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskGroupType"/> class.
            </summary>
            <param name="groupType">Type of the group.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskGroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.NextActiveTime">
            <summary>
            Next time that a location/group/schedule will be active for
            this group type.  If the group type has locations, this time
            will be in the past, if there are no locations, this time would
            be in the future
            </summary>
            <value>
            The next active time.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskGroupType.KioskLocations">
            <summary>
            All locations with active schedules.  Note: the location itself 
            may not be active (i.e. room is closed)
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskLocation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskLocation"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.#ctor(Rock.Model.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskLocation"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskLocation.KioskGroups">
            <summary>
            All groups with active schedules
            </summary>
            <value>
            The groups.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskSchedule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskSchedule"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.#ctor(Rock.Model.Schedule)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskSchedule"/> class.
            </summary>
            <param name="schedule">The schedule.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskSchedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.CheckIn.KioskSchedule.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskSchedule.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskStatus">
            <summary>
            The status of a check-in kiosk.  
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskStatus"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskStatus.#ctor(Rock.Model.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.CheckIn.KioskStatus"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Rock.CheckIn.KioskStatus.Device">
            <summary>
            Gets or sets the device.
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskStatus.KioskGroupTypes">
            <summary>
            The group types associated with this kiosk
            </summary>
            <value>
            The group types.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskStatus.HasLocations">
            <summary>
            Gets a value indicating whether this instance has active locations.
            </summary>
            <value>
            <c>true</c> if this instance has active locations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.CheckIn.KioskStatus.HasActiveLocations">
            <summary>
            Gets a value indicating whether this instance has active locations.
            </summary>
            <value>
            <c>true</c> if this instance has active locations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.CheckIn.KioskCache">
            <summary>
            Static object for caching kiosk configuration
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.CheckIn.KioskCache"/> class.
            </summary>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.GetKiosk(System.Int32)">
            <summary>
            Gets the kiosk status.
            </summary>
            <param name="kioskId">The kiosk id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.GetKiosk(System.Double,System.Double)">
            <summary>
            Finds a  matching device kiosk by it's latitude and longitude.
            </summary>
            <param name="latitude">the latitude of the device</param>
            <param name="longitude">the longitude of the device</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.GetKiosk(System.String,System.Boolean)">
            <summary>
            Gets the kiosk based on it's name (if the given IP can be reverse looked up into a fully qualified name)
            or by the given IP.
            </summary>
            <param name="ipAddress">The IP address (from Request server variable "REMOTE_ADDR")</param>
            <param name="skipReverseLookup">Flag to indicate whether or not the ipAddress should attempt to be looked up (converted to a FQHN).</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.GetLocationAttendance(System.Int32)">
            <summary>
            Gets the location attendance.
            </summary>
            <param name="locationId">The location id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.GetLabel(System.Int32)">
            <summary>
            Gets the label.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.AddAttendance(Rock.Model.Attendance)">
            <summary>
            Adds an attendance item to location attendance cache so that it is accurate between refreshes
            </summary>
            <param name="attendance">The attendance.</param>
        </member>
        <member name="M:Rock.CheckIn.KioskCache.RefreshCache">
            <summary>
            Refreshes the cache.
            </summary>
        </member>
        <member name="T:Rock.Communication.ChannelComponent">
            <summary>
            Base class for components communication channels (i.e. email, sms, twitter, etc) 
            </summary>
        </member>
        <member name="M:Rock.Communication.ChannelComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.ChannelComponent"/> class.
            </summary>
        </member>
        <member name="P:Rock.Communication.ChannelComponent.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="P:Rock.Communication.ChannelComponent.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Communication.ChannelComponent.Transport">
            <summary>
            Gets the transport.
            </summary>
            <value>
            The transport.
            </value>
        </member>
        <member name="T:Rock.Communication.Channel.Sms">
            <summary>
            An SMS communication
            </summary>
        </member>
        <member name="P:Rock.Communication.Channel.Sms.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="T:Rock.Communication.Channel.Email">
            <summary>
            An email communication
            </summary>
        </member>
        <member name="P:Rock.Communication.Channel.Email.Control">
            <summary>
            Gets the control path.
            </summary>
            <value>
            The control path.
            </value>
        </member>
        <member name="T:Rock.Communication.ChannelContainer">
            <summary>
            MEF Container class for Communication Channel Componenets
            </summary>
        </member>
        <member name="M:Rock.Communication.ChannelContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Communication.ChannelContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Communication.TransportComponent">
            <summary>
            Base class for components that perform actions for a workflow
            </summary>
        </member>
        <member name="M:Rock.Communication.TransportComponent.Send(Rock.Model.Communication,System.Nullable{System.Int32})">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
            <param name="CurrentPersonId">The current person id.</param>
        </member>
        <member name="M:Rock.Communication.TransportComponent.GetGlobalMergeFields">
            <summary>
            Gets the global config values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.TransportComponent.ResolveConfigValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Resolves the config value.
            </summary>
            <param name="value">The value.</param>
            <param name="globalAttributes">The global attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Communication.TransportComponent.MergeValues(System.Collections.Generic.Dictionary{System.String,System.Object},Rock.Model.CommunicationRecipient)">
            <summary>
            Merges the values.
            </summary>
            <param name="configValues">The config values.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Communication.TransportContainer">
            <summary>
            MEF Container class for Communication Transport Componenets
            </summary>
        </member>
        <member name="M:Rock.Communication.TransportContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Communication.TransportContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Communication.Transport.SMTP">
            <summary>
            Sends a communication through SMTP protocol
            </summary>
        </member>
        <member name="M:Rock.Communication.Transport.SMTP.Send(Rock.Model.Communication,System.Nullable{System.Int32})">
            <summary>
            Sends the specified communication.
            </summary>
            <param name="communication">The communication.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Field.Types.ComponentFieldType">
            <summary>
            Field Type used to display a dropdown list of MEF Components of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ComponentFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Migrations.AddNewFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddNewFields.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddNewFields.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AttendanceFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AttendanceFields.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AttendanceFields.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialPersonAccount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialPersonAccount.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialPersonAccount.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.TransactionRefund">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.TransactionRefund.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.TransactionRefund.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialBatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialBatch.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialBatch.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefund">
            <summary>
            Refund Transaction POCO class.
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonValueId">
            <summary>
            Gets or sets the refund reason value id.
            </summary>
            <value>
            The refund reason value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonSummary">
            <summary>
            Gets or sets the refund reason summary.
            </summary>
            <value>
            The refund reason summary.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionRefund.RefundReasonValue">
            <summary>
            Gets or sets the refund reason value.
            </summary>
            <value>
            The refund reason value.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionRefundConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionRefundConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionRefundConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccount">
            <summary>
            Person Saved Account POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.GatewayId">
            <summary>
            Gets or sets the gateway id.
            </summary>
            <value>
            The gateway id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.PaymentMethod">
            <summary>
            Gets or sets the payment method.
            </summary>
            <value>
            The payment method.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.MaskedAccountNumber">
            <summary>
            Gets or sets the masked account number.
            </summary>
            <value>
            The masked account number.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
            <value>
            The transaction code.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonSavedAccount.Gateway">
            <summary>
            Gets or sets the gateway.
            </summary>
            <value>
            The gateway.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPersonSavedAccountConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonSavedAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonSavedAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PaymentMethod">
            <summary>
            The type of payment (Credit card or ACH)
            </summary>
        </member>
        <member name="F:Rock.Model.PaymentMethod.CreditCard">
            <summary>
            Credit Card
            </summary>
        </member>
        <member name="F:Rock.Model.PaymentMethod.ACH">
            <summary>
            ACH
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccount">
            <summary>
            Person Bank Account POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.AccountNumberSecured">
            <summary>
            Gets or sets hash of the Checking Account AccountNumber.  Stored as a SHA1 hash (always 40 chars) so that it can be matched without being known
            Must be Unique (AlternateKey) so that a match of a Check Account to a Person can be made
            </summary>
            <value>
            AccountNumberSecured.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPersonBankAccount.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPersonBankAccountConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPersonBankAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPersonBankAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetail">
            <summary>
            Scheduled Transaction Detail POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.ScheduledTransactionId">
            <summary>
            Gets or sets the scheduled transaction id.
            </summary>
            <value>
            The scheduled transaction id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.AccountId">
            <summary>
            Gets or sets the account id.
            </summary>
            <value>
            The account id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityTypeId">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.ScheduledTransaction">
            <summary>
            Gets or sets the scheduled transaction.
            </summary>
            <value>
            The scheduled transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>
            The account.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransactionDetail.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailConfiguration">
            <summary>
            TransactionDetail Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionDetailConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataTransformComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransformComponent.GetExpression(System.Object,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="service">The service.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.Title">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.TransformedEntityTypeName">
            <summary>
            Gets the name of the transformed entity type.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransformComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataTransformContainer">
            <summary>
            MEF Container class for data filters
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetAvailableTransformedEntityTypeNames">
            <summary>
            Gets a list of entity type names that have Data Transform components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransformContainer.GetComponentsByTransformedEntityName(System.String)">
            <summary>
            Gets the components that are for transformed a given entity type name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransformContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataTransform.Person.ParentTransform">
            <summary>
            Person Parent Transformation
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.ParentTransform.GetExpression(System.Object,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.ParentTransform.Title">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.ParentTransform.TransformedEntityTypeName">
            <summary>
            Gets the name of the transformed entity type.
            </summary>
            <value>
            The name of the transformed entity type.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.PropertyFilter">
            <summary>
            Filter entities on any of it's property or attribute values
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilterComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.GetExpression(System.Type,System.Object,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.ComparisonExpression(Rock.Model.ComparisonType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Gets the comparison expression.
            </summary>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterComponent.ComparisonControl(Rock.Model.ComparisonType)">
            <summary>
            Gets a dropdownlist of the supported comparison types
            </summary>
            <param name="supportedComparisonTypes">The supported comparison types.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.  Filter should empty string
            if it applies to all entities
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.StringFilterComparisonTypes">
            <summary>
            Gets the comparison types typically used for string fields
            </summary>
        </member>
        <member name="P:Rock.Reporting.DataFilterComponent.NumericFilterComparisonTypes">
            <summary>
            Gets the comparison types typically used for numeric fields
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetExpression(System.Type,System.Object,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetEntityFields(System.Type)">
            <summary>
            Gets the properties and attributes for the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetPropertyExpression(System.Object,System.Linq.Expressions.Expression,Rock.Reporting.DataFilter.PropertyFilter.EntityField,System.Collections.Generic.List{System.String})">
            <summary>
            Builds an expression for a property field
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="entityField">The property.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GetAttributeExpression(System.Object,System.Linq.Expressions.Expression,Rock.Reporting.DataFilter.PropertyFilter.EntityField,System.Collections.Generic.List{System.String})">
            <summary>
            Builds an expression for an attribute field
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="property">The property.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.PropertyFilter.GroupControls(System.Type,System.Web.UI.Control[])">
            <summary>
            Groups all the controls for each field
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.PropertyFilter.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataFilter.PropertyFilter.EntityField">
            <summary>
            Helper class for saving information about each property and attribute of an entity
            Note: the type of a field or attribute does not neccesarily determine the ui rendered for filtering.   For example, a Single-Select attribute
            will use a multi-select ui so that user can filter on one or more values.  The FilterFieldType property determines the UI rendered for filtering
            and not the type of field.
            
            Entity Property Types and their renderd filter field type
                string              ->  TEXT
                bool or bool?       ->  SINGLE_SELECT
                date or date?       ->  DATE
                int or int?
                    Defined Values  ->  MULTI_SELECT
                    otherwise       ->  INTEGER
                enumeration         ->  MULTI_SELECT
            
            Attribute types and their rendered filter field type
                MULTI_SELECT        ->  MULTI_SELECT
                SINGLE_SELECT       ->  MULTI_SELECT
                BOOLEAN             ->  SINGLE_SELECT (True or False)
                DATE                ->  DATE
                INTEGER             ->  INTEGER
                TEXT                ->  TEXT
                
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataFilter.OtherDataViewFilter">
            <summary>
            Filter entities using another dataview
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.GetExpression(System.Type,System.Object,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilter.OtherDataViewFilter.IsViewInFilter(System.Int32,Rock.Model.DataViewFilter)">
            <summary>
            Determines whether [is view in filter] [the specified data view id].
            </summary>
            <param name="dataViewId">The data view id.</param>
            <param name="filter">The filter.</param>
            <returns>
              <c>true</c> if [is view in filter] [the specified data view id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataFilter.OtherDataViewFilter.Order">
            <summary>
            Gets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="T:Rock.Data.DefinedValueAttribute">
            <summary>
            Custom attribute used to decorate model properties that are defined values from a system defined type
            </summary>
        </member>
        <member name="M:Rock.Data.DefinedValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.DefinedValueAttribute"/> class.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
        </member>
        <member name="P:Rock.Data.DefinedValueAttribute.DefinedTypeGuid">
            <summary>
            Gets or sets the defined type GUID.
            </summary>
            <value>
            The defined type GUID.
            </value>
        </member>
        <member name="T:Rock.Data.PreviewableAttribute">
            <summary>
            Custom attribute used to decorate model properties that should be included when previewing a sample list of entities (ex DataView)
            </summary>
        </member>
        <member name="T:Rock.Data.ICategorized">
            <summary>
            Represents a model that is categorized (has a foreign key to the Category model)
            </summary>
        </member>
        <member name="P:Rock.Data.ICategorized.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Data.ICategorized.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Data.ICategorized.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="T:Rock.Data.NotExportable">
            <summary>
            Attribute to decorate class properties that should not be exported.
            </summary>
        </member>
        <member name="T:SafeDirectoryCatalog">
            <summary>
            MEF Directory Catalog that will handle outdated MEF Components
            </summary>
        </member>
        <member name="M:SafeDirectoryCatalog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SafeDirectoryCatalog"/> class.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="P:SafeDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
        </member>
        <member name="T:Rock.Field.Types.SelectFromListFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectFromListFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Field.Types.SelectFromListFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Field.Types.AccountsFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountsFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.BinaryFileFieldType">
            <summary>
            Field Type used to display a dropdown list of binary files of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.CampusesFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Field.Types.CampusesFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Field.Types.CampusFieldType">
            <summary>
            Field Type to select a single (or null) CampusFieldType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.CampusFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.BinaryFileTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of binary file types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BinaryFileTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.AccountFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.AccountFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.WorkflowTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of workflow types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.WorkflowTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupTypeFieldType">
            <summary>
            Field Type to select a single (or null) GroupType
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.FileFieldType">
            <summary>
            Field used to display or upload a new binary file of a specific type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.FileFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.KeyValueListFieldType">
            <summary>
            Field used to save and dispaly a text value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.KeyValueListFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.EmailTemplateFieldType">
            <summary>
            Field Type to select 0 or more GroupTypes 
            </summary>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EmailTemplateFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.EntityTypeFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.EntityTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupFieldType">
            <summary>
            Field Type to select a single (or null) Group
            </summary>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.GroupFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.GroupTypesFieldType">
            <summary>
            Field Type to select 0 or more GroupTypes 
            </summary>
        </member>
        <member name="P:Rock.Field.Types.GroupTypesFieldType.ListSource">
            <summary>
            Gets the list source.
            </summary>
            <value>
            The list source.
            </value>
        </member>
        <member name="T:Rock.Financial.BankAccount">
            <summary>
            Information about a bank account that is passed to financial gateway
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccount.AccountNumber">
            <summary>
            The account number
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccount.RoutingNumber">
            <summary>
            The routing number
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccount.AccountType">
            <summary>
            The account type
            </summary>
        </member>
        <member name="M:Rock.Financial.BankAccount.#ctor(System.String,System.String,Rock.Financial.BankAccountType)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.BankAccount"/> struct.
            </summary>
            <param name="accountNumber">The account number.</param>
            <param name="routingNumber">The routing number.</param>
            <param name="accountType">Type of the account.</param>
        </member>
        <member name="T:Rock.Financial.BankAccountType">
            <summary>
            Type of bank account
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccountType.Checking">
            <summary>
            Checking Account
            </summary>
        </member>
        <member name="F:Rock.Financial.BankAccountType.Savings">
            <summary>
            Savings Account
            </summary>
        </member>
        <member name="T:Rock.Financial.CreditCard">
            <summary>
            Information about a credit card that is passed to financial gateway
            </summary>
        </member>
        <member name="F:Rock.Financial.CreditCard.Number">
            <summary>
            The credit card number
            </summary>
        </member>
        <member name="F:Rock.Financial.CreditCard.Code">
            <summary>
            The card SVN number
            </summary>
        </member>
        <member name="F:Rock.Financial.CreditCard.ExpirationDate">
            <summary>
            The credit card expiration date
            </summary>
        </member>
        <member name="F:Rock.Financial.CreditCard.SwipeInfo">
            <summary>
            The information obtained from a card-present swipe
            </summary>
        </member>
        <member name="M:Rock.Financial.CreditCard.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.CreditCard"/> struct.
            </summary>
            <param name="number">The number.</param>
            <param name="code">The code.</param>
            <param name="expirationDate">The expiration date.</param>
        </member>
        <member name="M:Rock.Financial.CreditCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Financial.CreditCard"/> struct.
            </summary>
            <param name="swipeInfo">The swipe info.</param>
        </member>
        <member name="M:Rock.Financial.IGateway.Charge(Rock.Model.FinancialTransaction,Rock.Financial.CreditCard,System.Boolean)">
            <summary>
            Charges the specified transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="creditCard">The credit card.</param>
            <param name="testTransaction">if set to <c>true</c> [test transaction].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.Charge(Rock.Model.FinancialTransaction,Rock.Financial.BankAccount,System.Boolean)">
            <summary>
            Charges the specified transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="bankAccount">The bank account.</param>
            <param name="testTransaction">if set to <c>true</c> [test transaction].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.CreateScheduledTransaction(Rock.Model.FinancialScheduledTransaction,Rock.Financial.CreditCard)">
            <summary>
            Creates the scheduled transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="creditCard">The credit card.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.CreateScheduledTransaction(Rock.Model.FinancialScheduledTransaction,Rock.Financial.BankAccount)">
            <summary>
            Creates the scheduled transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="bankAccount">The bank account.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.UpdateScheduledTransaction(Rock.Model.FinancialScheduledTransaction)">
            <summary>
            Updates the scheduled transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.CancelScheduledTransaction(Rock.Model.FinancialScheduledTransaction)">
            <summary>
            Cancels the scheduled transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Financial.IGateway.ProcessPostBack(System.Web.HttpRequest)">
            <summary>
            Processes any post back from the financial gateway.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Rock.Financial.IGateway.DownloadNewTransactions">
            <summary>
            Downloads any new transactions from the financial gateway
            </summary>
        </member>
        <member name="T:Rock.Migrations.ToolsMenuAdCampaigns">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration_1">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_1.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.ToolsMenuAdCampaigns.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ToolsMenuAdCampaigns.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddMissingTagConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddMissingTagConfiguration.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddMissingTagConfiguration.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AuthConfigureAdministrate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AuthConfigureAdministrate.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AuthConfigureAdministrate.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ClassRename">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ClassRename.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ClassRename.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DefinedValueNaming">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DefinedValueNaming.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DefinedValueNaming.DropColumnMoveDataUp(System.String,System.String,System.String)">
            <summary>
            Drops the column move data up.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Rock.Migrations.DefinedValueNaming.DropColumnMoveDataDown(System.String,System.String,System.String)">
            <summary>
            Drops the column move data down.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Rock.Migrations.DefinedValueNaming.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ServiceJobColumnNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ServiceJobColumnNames.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ServiceJobColumnNames.DropColumnMoveDataUp(System.String,System.String,System.String)">
            <summary>
            Drops the column move data up.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Rock.Migrations.ServiceJobColumnNames.DropColumnMoveDataDown(System.String,System.String,System.String)">
            <summary>
            Drops the column move data down.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Rock.Migrations.ServiceJobColumnNames.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PageIconFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration_2">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlockType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlockType(Rock.Model.BlockType)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="blockType">Type of the block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteBlockType(System.String)">
            <summary>
            Deletes the type of the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DefaultSystemBlockType(System.String,System.String,System.Guid)">
            <summary>
            Defaults the type of the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddPage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="layout">The layout.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddPage(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddPage(System.String,Rock.Model.Page)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.MovePage(System.String,System.String)">
            <summary>
            Moves the page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeletePage(System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DefaultSystemPage(System.String,System.String,System.Guid)">
            <summary>
            Defaults the system page.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlock(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="zone">The zone.</param>
            <param name="guid">The GUID.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlock(System.String,System.String,Rock.Model.Block)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteBlock(System.String)">
            <summary>
            Deletes the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DefaultSystemBlock(System.String,System.Guid)">
            <summary>
            Defaults the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the block attribute.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the defined.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteDefinedType(System.String)">
            <summary>
            Deletes the type of the defined.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the defined value.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the defined value.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_2.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.PageIconFile.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PageIconFile.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupBlockAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupBlockAttributes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupBlockAttributes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupTypeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupTypeField.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupTypeField.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ListDetailSweep01">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.HomepageMenuOrder01">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.HomepageMenuOrder01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.HomepageMenuOrder01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CreateCheckInTables">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CreateCheckInTables.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CreateCheckInTables.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.Notes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.Notes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.Notes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PageIconCssClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.PageIconCssClass.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PageIconCssClass.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FixNotes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixNotes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixNotes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateNoteBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateNoteBlock.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateNoteBlock.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FinancialTxnEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTxnEntityType.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FinancialTxnEntityType.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddWorkflowTypeIcon">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddWorkflowTypeIcon.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddWorkflowTypeIcon.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddCategoryIcon">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddCategoryIcon.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddCategoryIcon.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ListDetailSweep02">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep02.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep02.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupViewer01">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration_3">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlockType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlockType(Rock.Model.BlockType)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="blockType">Type of the block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteBlockType(System.String)">
            <summary>
            Deletes the type of the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DefaultSystemBlockType(System.String,System.String,System.Guid)">
            <summary>
            Defaults the type of the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddPage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="layout">The layout.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddPage(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddPage(System.String,Rock.Model.Page)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.MovePage(System.String,System.String)">
            <summary>
            Moves the page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeletePage(System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddPageRoute(System.String,System.String)">
            <summary>
            Adds the page route.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DefaultSystemPage(System.String,System.String,System.Guid)">
            <summary>
            Defaults the system page.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlock(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
            <param name="zone">The zone.</param>
            <param name="order">The order.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlock(System.String,System.String,Rock.Model.Block)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteBlock(System.String)">
            <summary>
            Deletes the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DefaultSystemBlock(System.String,System.Guid)">
            <summary>
            Defaults the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the block attribute.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the defined.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteDefinedType(System.String)">
            <summary>
            Deletes the type of the defined.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the defined value.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the defined value.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_3.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.GroupViewer01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupViewer01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddDeceasedFlag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDeceasedFlag.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDeceasedFlag.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddPrayerRequest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPrayerRequest.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPrayerRequest.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddAttendanceCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddAttendanceCode.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddAttendanceCode.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DefinedTypesSweep01">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DefinedTypesSweep01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DefinedTypesSweep01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CheckInPages">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CheckInPages.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CheckInPages.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.NewBootstrapTheme">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.NewBootstrapTheme.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.NewBootstrapTheme.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.MarketingCampaignListDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignListDetail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignListDetail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RemoveEntityChange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveEntityChange.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveEntityChange.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ListDetailSweep03">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep03.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ListDetailSweep03.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.Report">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.Report.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.Report.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.WorkflowUI01">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowUI01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowUI01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.MarketingCampaignAdDisplay01">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignAdDisplay01.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignAdDisplay01.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FixBlockLayoutData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockMigration_4">
            <summary>
            Custom Migration methods
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.UpdateFieldType(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Updates the type of the field.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="assembly">The assembly.</param>
            <param name="className">Name of the class.</param>
            <param name="guid">The GUID.</param>
            <param name="IsSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddFieldType(Rock.Model.FieldType)">
            <summary>
            Adds the type of the field.
            </summary>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteFieldType(System.String)">
            <summary>
            Deletes the type of the field.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlockType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="path">The path.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlockType(Rock.Model.BlockType)">
            <summary>
            Adds the type of the block.
            </summary>
            <param name="blockType">Type of the block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteBlockType(System.String)">
            <summary>
            Deletes the type of the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DefaultSystemBlockType(System.String,System.String,System.Guid)">
            <summary>
            Defaults the type of the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddPage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="layout">The layout.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddPage(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddPage(System.String,Rock.Model.Page)">
            <summary>
            Adds the page.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.MovePage(System.String,System.String)">
            <summary>
            Moves the page.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="parentPageGuid">The parent page GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeletePage(System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddPageRoute(System.String,System.String)">
            <summary>
            Adds the page route.
            </summary>
            <param name="parentPageGuid">The parent page GUID.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DefaultSystemPage(System.String,System.String,System.Guid)">
            <summary>
            Defaults the system page.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlock(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="name">The name.</param>
            <param name="layout">The layout.</param>
            <param name="zone">The zone.</param>
            <param name="order">The order.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlock(System.String,System.String,Rock.Model.Block)">
            <summary>
            Adds the block.
            </summary>
            <param name="pageGuid">The page GUID.</param>
            <param name="blockTypeGuid">The block type GUID.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteBlock(System.String)">
            <summary>
            Deletes the block.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DefaultSystemBlock(System.String,System.Guid)">
            <summary>
            Defaults the system block.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlockTypeAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the block attribute.
            </summary>
            <param name="blockTypeGuid">The block GUID.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteBlockAttribute(System.String)">
            <summary>
            Deletes the block attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddEntityAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Adds the entity attribute.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="fieldTypeGuid">The field type GUID.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <param name="name">The name.</param>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="order">The order.</param>
            <param name="defaultValue">The default value.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.EnsureEntityTypeExists(System.String)">
            <summary>
            Ensures the entity type exists.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteAttribute(System.String)">
            <summary>
            Deletes the attribute.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddBlockAttributeValue(System.String,System.String,System.String)">
            <summary>
            Adds the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteBlockAttributeValue(System.String,System.String)">
            <summary>
            Deletes the block attribute value.
            </summary>
            <param name="blockGuid">The block GUID.</param>
            <param name="attributeGuid">The attribute GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddDefinedType(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the type of the defined.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteDefinedType(System.String)">
            <summary>
            Deletes the type of the defined.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddDefinedValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the defined value.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="isSystem">if set to <c>true</c> [is system].</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteDefinedValue(System.String)">
            <summary>
            Deletes the defined value.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddSecurityRoleGroup(System.String,System.String,System.String)">
            <summary>
            Adds the security role group.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteSecurityRoleGroup(System.String)">
            <summary>
            Deletes the security role group.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.AddSecurityAuth(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the security auth.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="action">The action.</param>
            <param name="groupGuid">The group GUID.</param>
            <param name="authGuid">The auth GUID.</param>
        </member>
        <member name="M:Rock.Migrations.RockMigration_4.DeleteSecurityAuth(System.String)">
            <summary>
            Deletes the security auth.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Migrations.FixBlockLayoutData.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixBlockLayoutData.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CategoryDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryDetail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryDetail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FixMissingLoginStatusTwoColumnLeft">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixMissingLoginStatusTwoColumnLeft.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixMissingLoginStatusTwoColumnLeft.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.WorkflowListUI">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowListUI.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowListUI.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.MarketingCampaignChildBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignChildBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignChildBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddDataView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDataView.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDataView.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.FixInactiveSecurityGroups">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixInactiveSecurityGroups.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.FixInactiveSecurityGroups.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GroupMemberListDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupMemberListDetail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GroupMemberListDetail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CategoryTreeView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryTreeView.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryTreeView.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.BlockTypeListDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.BlockTypeListDetail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.BlockTypeListDetail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RenameBlockProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RenameBlockProperties.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RenameBlockProperties.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.EntityTypeAttributeValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypeAttributeValue.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypeAttributeValue.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddPrayerRequestAdminPages">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPrayerRequestAdminPages.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPrayerRequestAdminPages.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PageProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.PageProperties.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PageProperties.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateReport">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateReport.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateReport.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ScheduleDescription">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleDescription.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduleDescription.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddBinaryFileType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddBinaryFileType.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddBinaryFileType.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.MenuToolsGroupViewer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.MenuToolsGroupViewer.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.MenuToolsGroupViewer.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.WorkflowTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowTrigger.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowTrigger.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.WorkflowNameNotRequired">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowNameNotRequired.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.WorkflowNameNotRequired.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CategoryDetailBlockEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryDetailBlockEntityType.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CategoryDetailBlockEntityType.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.StandardizeFieldTypeNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.StandardizeFieldTypeNames.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.StandardizeFieldTypeNames.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DataViewEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataViewEntityType.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataViewEntityType.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.EntityTypeAttributeValueByName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypeAttributeValueByName.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypeAttributeValueByName.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddDeviceBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDeviceBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddDeviceBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DataForLabels">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataForLabels.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataForLabels.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateSomeText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateSomeText.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateSomeText.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateLocation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateLocation.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateLocation.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.AddPageDisplayProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPageDisplayProperties.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.AddPageDisplayProperties.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.UpdateSecureRoute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateSecureRoute.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.UpdateSecureRoute.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.Communication">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.Communication.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.Communication.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.CommunicationEmail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CommunicationEmail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CommunicationEmail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RemoveCommEmail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveCommEmail.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RemoveCommEmail.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.PledgeBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.PledgeBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.PledgeBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DataViewTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataViewTransform.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DataViewTransform.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.zHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.zHeader.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.zHeader.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GivingBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.GivingBlocks.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GivingBlocks.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.GivingBlocksSeedData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.GivingBlocksSeedData.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.GivingBlocksSeedData.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DbCalculatedPersonNameFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DbCalculatedPersonNameFields.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DbCalculatedPersonNameFields.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.NewFinancialSchema">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.NewFinancialSchema.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.NewFinancialSchema.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.DateTimeNamingSweep">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.DateTimeNamingSweep.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.DateTimeNamingSweep.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.ScheduledTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduledTransaction.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.ScheduledTransaction.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Model.AuthService">
            <summary>
            Auth POCO Service class
            </summary>
            <summary>
            Auth Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AuthService.Get(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets Auths by Entity Type And Entity Id
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">Entity Id.</param>
            <returns>
            An enumerable list of Auth objects.
            </returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetByGroupId(System.Nullable{System.Int32})">
            <summary>
            Gets Auths by Group Id
            </summary>
            <param name="groupId">Group Id.</param>
            <returns>An enumerable list of Auth objects.</returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Auths by Person Id
            </summary>
            <param name="personId">Person Id.</param>
            <returns>An enumerable list of Auth objects.</returns>
        </member>
        <member name="M:Rock.Model.AuthService.GetAuths(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the authorizations for the entity and action.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AuthService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuthService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AuthService.#ctor(Rock.Data.IRepository{Rock.Model.Auth})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuthService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AuthService.CanDelete(Rock.Model.Auth,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BlockService">
            <summary>
            Block POCO Service class
            </summary>
            <summary>
            Block Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockService.GetByBlockTypeId(System.Int32)">
            <summary>
            Gets Blocks by Block Type Id
            </summary>
            <param name="blockTypeId">Block Type Id.</param>
            <returns>An enumerable list of Block objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByLayout(System.String)">
            <summary>
            Gets Block Instances by Layout
            </summary>
            <param name="layout">Layout.</param>
            <returns>An enumerable list of Block objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByLayoutAndPageIdAndZone(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets Block Instances by Layout And Page Id And Zone
            </summary>
            <param name="layout">Layout.</param>
            <param name="pageId">Page Id.</param>
            <param name="zone">Zone.</param>
            <returns>An enumerable list of Block objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.GetByPageId(System.Nullable{System.Int32})">
            <summary>
            Gets Block Instances by Page Id
            </summary>
            <param name="pageId">Page Id.</param>
            <returns>An enumerable list of Block objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockService.Move(Rock.Model.Block)">
            <summary>
            Moves the specified block to another zone.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.BlockService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockService.#ctor(Rock.Data.IRepository{Rock.Model.Block})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockService.CanDelete(Rock.Model.Block,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BlockTypeService">
            <summary>
            Block Type POCO Service class
            </summary>
            <summary>
            BlockType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByGuid(System.Guid)">
            <summary>
            Gets Block Type by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>Block Type object.</returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByName(System.String)">
            <summary>
            Gets Blocks by Name
            </summary>
            <param name="name">Name.</param>
            <returns>An enumerable list of Block Type objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.GetByPath(System.String)">
            <summary>
            Gets Blocks by Path
            </summary>
            <param name="path">Path.</param>
            <returns>An enumerable list of Block Type objects.</returns>
        </member>
        <member name="M:Rock.Model.BlockTypeService.RegisterBlockTypes(System.String,System.Web.UI.Page,System.Nullable{System.Int32})">
            <summary>
            Registers any block types that have not yet been registered in the service.
            </summary>
            <param name="physWebAppPath">the physical path of the web application</param>
            <param name="page">The page.</param>
            <param name="currentPersonId">The current person id.</param>
        </member>
        <member name="M:Rock.Model.BlockTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeService.#ctor(Rock.Data.IRepository{Rock.Model.BlockType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeService.CanDelete(Rock.Model.BlockType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AttendanceCode">
            <summary>
            CheckInAttendanceCodenEF Model.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttendanceCode.IssueDateTime">
            <summary>
            Gets or sets the issue date time.
            </summary>
            <value>
            The issue date time.
            </value>
        </member>
        <member name="P:Rock.Model.AttendanceCode.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>
            The security code.
            </value>
        </member>
        <member name="P:Rock.Model.AttendanceCode.Attendances">
            <summary>
            Gets or sets the attendances.
            </summary>
            <value>
            The attendances.
            </value>
        </member>
        <member name="T:Rock.Model.AttendanceCodeConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceCodeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CategoryService">
            <summary>
            Category POCO Service class
            </summary>
            <summary>
            Category Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryService.Get(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the specified parent id.
            </summary>
            <param name="ParentId">The parent id.</param>
            <param name="entityTypeId">The entity type id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CategoryService.Get(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets the category by name and entity type
            </summary>
            <param name="name">The name.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityTypeQualifierColumn">The entity type qualifier column.</param>
            <param name="entityTypeQualifierValue">The entity type qualifier value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CategoryService.GetByEntityTypeId(System.Nullable{System.Int32})">
            <summary>
            Gets Categories for the given Entity Type
            </summary>
            <param name="categoryId">The category id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.CategoryService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CategoryService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryService.#ctor(Rock.Data.IRepository{Rock.Model.Category})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CategoryService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryService.CanDelete(Rock.Model.Category,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AttendanceCodeService">
            <summary>
            AttendanceCode Service class
            </summary>
            <summary>
            Attendance Code POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceCodeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.#ctor(Rock.Data.IRepository{Rock.Model.AttendanceCode})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceCodeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.CanDelete(Rock.Model.AttendanceCode,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.Get(System.DateTime,System.String)">
            <summary>
            Gets the specified day.
            </summary>
            <param name="day">The day.</param>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttendanceCodeService.GetNew(System.Int32)">
            <summary>
            Gets the new.
            </summary>
            <param name="codeLength">Length of the code.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttendanceCodeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceCodeExtensionMethods.Clone(Rock.Model.AttendanceCode,System.Boolean)">
            <summary>
            Clones this AttendanceCode object to a new AttendanceCode object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttendanceService">
            <summary>
            Attendance Service class
            </summary>
            <summary>
            Attendance POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceService.#ctor(Rock.Data.IRepository{Rock.Model.Attendance})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceService.CanDelete(Rock.Model.Attendance,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttendanceService.Get(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the specified attendance record.
            </summary>
            <param name="date">The date.</param>
            <param name="locationId">The location id.</param>
            <param name="scheduleId">The schedule id.</param>
            <param name="groupId">The group id.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttendanceService.GetByDateAndLocation(System.DateTime,System.Int32)">
            <summary>
            Gets the by date and location.
            </summary>
            <param name="locationId">The location id.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttendanceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceExtensionMethods.Clone(Rock.Model.Attendance,System.Boolean)">
            <summary>
            Clones this Attendance object to a new Attendance object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AuthExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AuthExtensionMethods.Clone(Rock.Model.Auth,System.Boolean)">
            <summary>
            Clones this Auth object to a new Auth object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileService">
            <summary>
            BinaryFile Service class
            </summary>
            <summary>
            File POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileService.#ctor(Rock.Data.IRepository{Rock.Model.BinaryFile})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileService.CanDelete(Rock.Model.BinaryFile,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.BinaryFileService.Save(Rock.Model.BinaryFile,System.Nullable{System.Int32})">
            <summary>
            Saves the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileExtensionMethods.Clone(Rock.Model.BinaryFile,System.Boolean)">
            <summary>
            Clones this BinaryFile object to a new BinaryFile object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeService">
            <summary>
            BinaryFileType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeService.#ctor(Rock.Data.IRepository{Rock.Model.BinaryFileType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeService.CanDelete(Rock.Model.BinaryFileType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeExtensionMethods.Clone(Rock.Model.BinaryFileType,System.Boolean)">
            <summary>
            Clones this BinaryFileType object to a new BinaryFileType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BlockExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BlockExtensionMethods.Clone(Rock.Model.Block,System.Boolean)">
            <summary>
            Clones this Block object to a new Block object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BlockTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeExtensionMethods.Clone(Rock.Model.BlockType,System.Boolean)">
            <summary>
            Clones this BlockType object to a new BlockType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientExtensionMethods.Clone(Rock.Model.CommunicationRecipient,System.Boolean)">
            <summary>
            Clones this CommunicationRecipient object to a new CommunicationRecipient object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.CommunicationService">
            <summary>
            Communication Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationService.#ctor(Rock.Data.IRepository{Rock.Model.Communication})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationService.CanDelete(Rock.Model.Communication,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CommunicationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationExtensionMethods.Clone(Rock.Model.Communication,System.Boolean)">
            <summary>
            Clones this Communication object to a new Communication object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DataViewFilterService">
            <summary>
            DataViewFilter Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewFilterService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterService.#ctor(Rock.Data.IRepository{Rock.Model.DataViewFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewFilterService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterService.CanDelete(Rock.Model.DataViewFilter,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.DataViewFilterExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterExtensionMethods.Clone(Rock.Model.DataViewFilter,System.Boolean)">
            <summary>
            Clones this DataViewFilter object to a new DataViewFilter object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DataViewService">
            <summary>
            DataView Service class
            </summary>
            <summary>
            DataView POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewService.#ctor(Rock.Data.IRepository{Rock.Model.DataView})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewService.CanDelete(Rock.Model.DataView,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DataViewService.GetAvailableEntityTypes">
            <summary>
            Gets the entity types that have existing dataviews
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataViewService.GetByEntityTypeId(System.Int32)">
            <summary>
            Gets the by entity type id.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DataViewExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewExtensionMethods.Clone(Rock.Model.DataView,System.Boolean)">
            <summary>
            Clones this DataView object to a new DataView object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DeviceService">
            <summary>
            Device Service class
            </summary>
            <summary>
            Device POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DeviceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceService.#ctor(Rock.Data.IRepository{Rock.Model.Device})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DeviceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceService.CanDelete(Rock.Model.Device,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DeviceService.GetByDeviceTypeGuid(System.Guid)">
            <summary>
            Gets the by device type GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DeviceService.GetByGeocode(System.Double,System.Double,System.Int32)">
            <summary>
            Finds the matching device for the given lat/long coordinates. The given coordinates
            must intersect one of the stored GeoFence values to be a match.  Use the deviceTypeValueId
            to constrain matching to only certain device types.
            </summary>
            <param name="latitude">Latitude of the mobile phone/kiosk.</param>
            <param name="longitude">Longitude of the mobile phone/kiosk.</param>
            <param name="deviceTypeValueId">Longitude of the mobile phone/kiosk.</param>
            <returns>a single matching Device kiosk or null if nothing was matched</returns>
        </member>
        <member name="T:Rock.Model.DeviceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceExtensionMethods.Clone(Rock.Model.Device,System.Boolean)">
            <summary>
            Clones this Device object to a new Device object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialAccountService">
            <summary>
            FinancialAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialAccount})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountService.CanDelete(Rock.Model.FinancialAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountExtensionMethods.Clone(Rock.Model.FinancialAccount,System.Boolean)">
            <summary>
            Clones this FinancialAccount object to a new FinancialAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialBatchService">
            <summary>
            FinancialBatch Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialBatchService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialBatch})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialBatchService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchService.CanDelete(Rock.Model.FinancialBatch,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialBatchExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchExtensionMethods.Clone(Rock.Model.FinancialBatch,System.Boolean)">
            <summary>
            Clones this FinancialBatch object to a new FinancialBatch object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialGatewayService">
            <summary>
            FinancialGateway Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGatewayService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialGatewayService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGatewayService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialGateway})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialGatewayService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGatewayService.CanDelete(Rock.Model.FinancialGateway,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialGatewayExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGatewayExtensionMethods.Clone(Rock.Model.FinancialGateway,System.Boolean)">
            <summary>
            Clones this FinancialGateway object to a new FinancialGateway object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialPledgeService">
            <summary>
            FinancialPledge Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPledgeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialPledge})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPledgeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeService.CanDelete(Rock.Model.FinancialPledge,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialPledgeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeExtensionMethods.Clone(Rock.Model.FinancialPledge,System.Boolean)">
            <summary>
            Clones this FinancialPledge object to a new FinancialPledge object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailService">
            <summary>
            FinancialScheduledTransactionDetail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionDetailService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialScheduledTransactionDetail})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionDetailService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailService.CanDelete(Rock.Model.FinancialScheduledTransactionDetail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionDetailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionDetailExtensionMethods.Clone(Rock.Model.FinancialScheduledTransactionDetail,System.Boolean)">
            <summary>
            Clones this FinancialScheduledTransactionDetail object to a new FinancialScheduledTransactionDetail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionService">
            <summary>
            FinancialScheduledTransaction Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialScheduledTransaction})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionService.CanDelete(Rock.Model.FinancialScheduledTransaction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionExtensionMethods.Clone(Rock.Model.FinancialScheduledTransaction,System.Boolean)">
            <summary>
            Clones this FinancialScheduledTransaction object to a new FinancialScheduledTransaction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailService">
            <summary>
            FinancialTransactionDetail Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionDetailService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialTransactionDetail})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionDetailService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailService.CanDelete(Rock.Model.FinancialTransactionDetail,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailExtensionMethods.Clone(Rock.Model.FinancialTransactionDetail,System.Boolean)">
            <summary>
            Clones this FinancialTransactionDetail object to a new FinancialTransactionDetail object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageService">
            <summary>
            FinancialTransactionImage Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionImageService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialTransactionImage})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionImageService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageService.CanDelete(Rock.Model.FinancialTransactionImage,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageExtensionMethods.Clone(Rock.Model.FinancialTransactionImage,System.Boolean)">
            <summary>
            Clones this FinancialTransactionImage object to a new FinancialTransactionImage object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionService">
            <summary>
            FinancialTransaction Service class
            </summary>
            <summary>
            Service class for Transaction objects.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.#ctor(Rock.Data.IRepository{Rock.Model.FinancialTransaction})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.CanDelete(Rock.Model.FinancialTransaction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.FinancialTransactionService.Get(Rock.Model.TransactionSearchValue)">
            <summary>
            Gets the transaction by search.
            </summary>
            <param name="searchValue">The search value.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FinancialTransactionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionExtensionMethods.Clone(Rock.Model.FinancialTransaction,System.Boolean)">
            <summary>
            Clones this FinancialTransaction object to a new FinancialTransaction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupLocationService">
            <summary>
            GroupLocation Service class
            </summary>
            <summary>
            GroupLocation Service class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupLocationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationService.#ctor(Rock.Data.IRepository{Rock.Model.GroupLocation})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupLocationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationService.CanDelete(Rock.Model.GroupLocation,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupLocationService.GetByLocation(System.Int32)">
            <summary>
            Gets Grouplocations by location.
            </summary>
            <param name="locationId">The location id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupLocationService.GetActiveByLocation(System.Int32)">
            <summary>
            Gets Grouplocations by location.
            </summary>
            <param name="locationId">The location id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupLocationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationExtensionMethods.Clone(Rock.Model.GroupLocation,System.Boolean)">
            <summary>
            Clones this GroupLocation object to a new GroupLocation object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.HtmlContentService">
            <summary>
            HtmlContent Service class
            </summary>
            <summary>
            Html Content POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HtmlContentService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentService.#ctor(Rock.Data.IRepository{Rock.Model.HtmlContent})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HtmlContentService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentService.CanDelete(Rock.Model.HtmlContent,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByApprovedByPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Html Contents by Approved By Person Id
            </summary>
            <param name="approvedByPersonId">Approved By Person Id.</param>
            <returns>An enumerable list of HtmlContent objects.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByBlockId(System.Int32)">
            <summary>
            Gets Html Contents by Block Instance
            </summary>
            <param name="blockId">a block instance id</param>
            <returns>An enumerable list of HtmlContent objects.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetByBlockIdAndEntityValueAndVersion(System.Int32,System.String,System.Int32)">
            <summary>
            Gets Html Content by Block And Entity Value And Version
            </summary>
            <param name="blockId">a block id</param>
            <param name="entityValue">Entity Value.</param>
            <param name="version">Version.</param>
            <returns>HtmlContent object.</returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetActiveContent(System.Int32,System.String)">
            <summary>
            Gets the active content for a specific block-instance/context.
            </summary>
            <param name="blockId">a block instance id</param>
            <param name="entityValue">The entity value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.HtmlContentService.GetContent(System.Int32,System.String)">
            <summary>
            Gets all versions of content for a specific block-instance/context.
            </summary>
            <param name="blockId">a block instance id</param>
            <param name="entityValue">The entity value.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.HtmlContentExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentExtensionMethods.Clone(Rock.Model.HtmlContent,System.Boolean)">
            <summary>
            Clones this HtmlContent object to a new HtmlContent object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdService">
            <summary>
            MarketingCampaignAd Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdService.#ctor(Rock.Data.IRepository{Rock.Model.MarketingCampaignAd})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdService.CanDelete(Rock.Model.MarketingCampaignAd,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdExtensionMethods.Clone(Rock.Model.MarketingCampaignAd,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAd object to a new MarketingCampaignAd object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeService">
            <summary>
            MarketingCampaignAdType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.#ctor(Rock.Data.IRepository{Rock.Model.MarketingCampaignAdType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.CanDelete(Rock.Model.MarketingCampaignAdType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeService.Delete(Rock.Model.MarketingCampaignAdType,System.Nullable{System.Int32})">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeExtensionMethods.Clone(Rock.Model.MarketingCampaignAdType,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAdType object to a new MarketingCampaignAdType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceService">
            <summary>
            MarketingCampaignAudience Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAudienceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceService.#ctor(Rock.Data.IRepository{Rock.Model.MarketingCampaignAudience})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAudienceService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceService.CanDelete(Rock.Model.MarketingCampaignAudience,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceExtensionMethods.Clone(Rock.Model.MarketingCampaignAudience,System.Boolean)">
            <summary>
            Clones this MarketingCampaignAudience object to a new MarketingCampaignAudience object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusService">
            <summary>
            MarketingCampaignCampus Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignCampusService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusService.#ctor(Rock.Data.IRepository{Rock.Model.MarketingCampaignCampus})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignCampusService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusService.CanDelete(Rock.Model.MarketingCampaignCampus,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusExtensionMethods.Clone(Rock.Model.MarketingCampaignCampus,System.Boolean)">
            <summary>
            Clones this MarketingCampaignCampus object to a new MarketingCampaignCampus object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignService">
            <summary>
            MarketingCampaign Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignService.#ctor(Rock.Data.IRepository{Rock.Model.MarketingCampaign})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignService.CanDelete(Rock.Model.MarketingCampaign,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.MarketingCampaignExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignExtensionMethods.Clone(Rock.Model.MarketingCampaign,System.Boolean)">
            <summary>
            Clones this MarketingCampaign object to a new MarketingCampaign object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.NoteService">
            <summary>
            Note Service class
            </summary>
            <summary>
            Note POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteService.#ctor(Rock.Data.IRepository{Rock.Model.Note})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteService.CanDelete(Rock.Model.Note,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.NoteService.Get(System.Int32,System.Int32)">
            <summary>
            Gets the notes for the specified note type and entity.
            </summary>
            <param name="noteTypeId">The note type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.NoteService.GetByNoteTypeId(System.Int32)">
            <summary>
            Gets the all notes for the specified note type.
            </summary>
            <param name="noteTypeId">The note type id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.NoteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.NoteExtensionMethods.Clone(Rock.Model.Note,System.Boolean)">
            <summary>
            Clones this Note object to a new Note object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.NoteTypeService">
            <summary>
            NoteType Service class
            </summary>
            <summary>
            NoteType POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeService.#ctor(Rock.Data.IRepository{Rock.Model.NoteType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeService.CanDelete(Rock.Model.NoteType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.NoteTypeService.Get(System.Int32,System.String)">
            <summary>
            Gets the note type with the specified entity type id and name.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.NoteTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeExtensionMethods.Clone(Rock.Model.NoteType,System.Boolean)">
            <summary>
            Clones this NoteType object to a new NoteType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PageContextService">
            <summary>
            PageContext Service class
            </summary>
            <summary>
            Page Context POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageContextService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextService.#ctor(Rock.Data.IRepository{Rock.Model.PageContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageContextService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextService.CanDelete(Rock.Model.PageContext,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageContextService.GetByPageId(System.Int32)">
            <summary>
            Gets Page Contexts by Page Id
            </summary>
            <param name="pageId">Page Id.</param>
            <returns>An enumerable list of PageContext objects.</returns>
        </member>
        <member name="T:Rock.Model.PageContextExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextExtensionMethods.Clone(Rock.Model.PageContext,System.Boolean)">
            <summary>
            Clones this PageContext object to a new PageContext object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PageRouteService">
            <summary>
            PageRoute Service class
            </summary>
            <summary>
            Page Route POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageRouteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteService.#ctor(Rock.Data.IRepository{Rock.Model.PageRoute})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageRouteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteService.CanDelete(Rock.Model.PageRoute,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageRouteService.GetByPageId(System.Int32)">
            <summary>
            Gets Page Routes by Page Id
            </summary>
            <param name="pageId">Page Id.</param>
            <returns>An enumerable list of PageRoute objects.</returns>
        </member>
        <member name="T:Rock.Model.PageRouteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteExtensionMethods.Clone(Rock.Model.PageRoute,System.Boolean)">
            <summary>
            Clones this PageRoute object to a new PageRoute object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PageService">
            <summary>
            Page Service class
            </summary>
            <summary>
            Page POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageService.#ctor(Rock.Data.IRepository{Rock.Model.Page})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PageService.CanDelete(Rock.Model.Page,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PageService.GetByParentPageId(System.Nullable{System.Int32})">
            <summary>
            Gets Pages by Parent Page Id
            </summary>
            <param name="parentPageId">Parent Page Id.</param>
            <returns>An enumerable list of Page objects.</returns>
        </member>
        <member name="M:Rock.Model.PageService.GetBySiteId(System.Nullable{System.Int32})">
            <summary>
            Gets Pages by Site Id
            </summary>
            <param name="siteId">Site Id.</param>
            <returns>An enumerable list of Page objects.</returns>
        </member>
        <member name="T:Rock.Model.PageExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PageExtensionMethods.Clone(Rock.Model.Page,System.Boolean)">
            <summary>
            Clones this Page object to a new Page object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PrayerRequestService">
            <summary>
            PrayerRequest Service class
            </summary>
            <summary>
            PrayerRequest Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PrayerRequestService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.#ctor(Rock.Data.IRepository{Rock.Model.PrayerRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PrayerRequestService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.CanDelete(Rock.Model.PrayerRequest,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.GetByCategoryId(System.Int32)">
            <summary>
            Gets Prayer Requests which either have the given categoryId or are under (subcategory) that categoryId.
            </summary>
            <param name="categoryId">The category id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PrayerRequestService.GetByCategoryId(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Gets the PrayerRequests by category id (for the prayer request entity type id).
            </summary>
            <param name="prayerRequestEntityTypeId">The prayer request entity type id.</param>
            <param name="categoryId">The category id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PrayerRequestExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestExtensionMethods.Clone(Rock.Model.PrayerRequest,System.Boolean)">
            <summary>
            Clones this PrayerRequest object to a new PrayerRequest object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.ReportService">
            <summary>
            Report Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ReportService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ReportService.#ctor(Rock.Data.IRepository{Rock.Model.Report})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ReportService.CanDelete(Rock.Model.Report,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ReportExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ReportExtensionMethods.Clone(Rock.Model.Report,System.Boolean)">
            <summary>
            Clones this Report object to a new Report object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.ScheduleService">
            <summary>
            Schedule Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ScheduleService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleService.#ctor(Rock.Data.IRepository{Rock.Model.Schedule})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ScheduleService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleService.CanDelete(Rock.Model.Schedule,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ScheduleExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleExtensionMethods.Clone(Rock.Model.Schedule,System.Boolean)">
            <summary>
            Clones this Schedule object to a new Schedule object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.SiteDomainService">
            <summary>
            SiteDomain Service class
            </summary>
            <summary>
            Site Domain POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteDomainService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainService.#ctor(Rock.Data.IRepository{Rock.Model.SiteDomain})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteDomainService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainService.CanDelete(Rock.Model.SiteDomain,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetByDomain(System.String)">
            <summary>
            Gets Site Domain by Domain
            </summary>
            <param name="domain">Domain.</param>
            <returns>SiteDomain object.</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetBySiteId(System.Int32)">
            <summary>
            Gets Site Domains by Site Id
            </summary>
            <param name="siteId">Site Id.</param>
            <returns>An enumerable list of SiteDomain objects.</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetBySiteIdAndDomain(System.Int32,System.String)">
            <summary>
            Gets Site Domains by Site Id And Domain
            </summary>
            <param name="siteId">Site Id.</param>
            <param name="domain">Domain.</param>
            <returns>An enumerable list of SiteDomain objects.</returns>
        </member>
        <member name="M:Rock.Model.SiteDomainService.GetByDomainContained(System.String)">
            <summary>
            Gets the site domains that are contained by the specified domain
            </summary>
            <param name="domain">The full domain.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.SiteDomainExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainExtensionMethods.Clone(Rock.Model.SiteDomain,System.Boolean)">
            <summary>
            Clones this SiteDomain object to a new SiteDomain object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.SiteService">
            <summary>
            Site Service class
            </summary>
            <summary>
            Site POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteService.#ctor(Rock.Data.IRepository{Rock.Model.Site})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.SiteService.CanDelete(Rock.Model.Site,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.SiteService.GetByDefaultPageId(System.Nullable{System.Int32})">
            <summary>
            Gets Sites by Default Page Id
            </summary>
            <param name="defaultPageId">Default Page Id.</param>
            <returns>An enumerable list of Site objects.</returns>
        </member>
        <member name="T:Rock.Model.SiteExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.SiteExtensionMethods.Clone(Rock.Model.Site,System.Boolean)">
            <summary>
            Clones this Site object to a new Site object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.UserLoginService">
            <summary>
            UserLogin Service class
            </summary>
            <summary>
            User POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.UserLoginService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginService.#ctor(Rock.Data.IRepository{Rock.Model.UserLogin})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.UserLoginService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginService.CanDelete(Rock.Model.UserLogin,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByApiKey(System.String)">
            <summary>
            Gets Users by Api Key
            </summary>
            <param name="apiKey">Api Key.</param>
            <returns>An enumerable list of User objects.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Users by Person Id
            </summary>
            <param name="personId">Person Id.</param>
            <returns>An enumerable list of User objects.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByUserName(System.String)">
            <summary>
            Gets User by User Name
            </summary>
            <param name="userName">User Name.</param>
            <returns>User object.</returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.Create(Rock.Model.Person,Rock.Model.AuthenticationServiceType,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Creates a new user.
            </summary>
            <param name="person">The person.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="isConfirmed">if set to <c>true</c> [is confirmed].</param>
            <param name="currentPersonId">The current person id.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">username;Username already exists</exception>
            <exception cref="T:System.ArgumentException">serviceName</exception>
        </member>
        <member name="M:Rock.Model.UserLoginService.ChangePassword(Rock.Model.UserLogin,System.String,System.String)">
            <summary>
            Changes the password after first validating the existing password
            </summary>
            <param name="user">The user.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.ChangePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Rock.Model.UserLoginService.Unlock(Rock.Model.UserLogin)">
            <summary>
            Unlocks the user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetByConfirmationCode(System.String)">
            <summary>
            Gets the user by the encrypted confirmation code.
            </summary>
            <param name="code">The encrypted confirmation code.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetCurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.UserLoginService.GetCurrentUser(System.Boolean)">
            <summary>
            Gets the current user.
            </summary>
            <param name="userIsOnline">if set to <c>true</c> [user is online].</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.UserLoginExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginExtensionMethods.Clone(Rock.Model.UserLogin,System.Boolean)">
            <summary>
            Clones this UserLogin object to a new UserLogin object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionService">
            <summary>
            WorkflowAction Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowAction})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionService.CanDelete(Rock.Model.WorkflowAction,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionExtensionMethods.Clone(Rock.Model.WorkflowAction,System.Boolean)">
            <summary>
            Clones this WorkflowAction object to a new WorkflowAction object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeService">
            <summary>
            WorkflowActionType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowActionType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeService.CanDelete(Rock.Model.WorkflowActionType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeExtensionMethods.Clone(Rock.Model.WorkflowActionType,System.Boolean)">
            <summary>
            Clones this WorkflowActionType object to a new WorkflowActionType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityService">
            <summary>
            WorkflowActivity Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowActivity})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityService.CanDelete(Rock.Model.WorkflowActivity,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityExtensionMethods.Clone(Rock.Model.WorkflowActivity,System.Boolean)">
            <summary>
            Clones this WorkflowActivity object to a new WorkflowActivity object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeService">
            <summary>
            WorkflowActivityType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowActivityType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeService.CanDelete(Rock.Model.WorkflowActivityType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeExtensionMethods.Clone(Rock.Model.WorkflowActivityType,System.Boolean)">
            <summary>
            Clones this WorkflowActivityType object to a new WorkflowActivityType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.BinaryFileType">
            <summary>
            Binary File Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Given Name.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconSmallFileId">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconLargeFileId">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconSmallFile">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.IconLargeFile">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.FileCount">
            <summary>
            Gets the file count.
            </summary>
            <value>
            The file count.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFileType.FileQuery">
            <summary>
            Gets the file query.
            </summary>
            <value>
            The file query.
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileTypeConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Communication">
            <summary>
            Communication POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Communication.GetChannelDataValue(System.String)">
            <summary>
            Gets a channel data value.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Communication.SetChannelDataValue(System.String,System.String)">
            <summary>
            Sets a channel data value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Model.Communication.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Communication.SenderPersonId">
            <summary>
            Gets or sets the sender person id.
            </summary>
            <value>
            The sender person id.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.FutureSendDateTime">
            <summary>
            Gets or sets the future send date time.
            </summary>
            <value>
            The future send date time.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewerPersonId">
            <summary>
            Gets or sets the reviewer person id.
            </summary>
            <value>
            The reviewer person id.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewedDateTime">
            <summary>
            Gets or sets the reviewed date time.
            </summary>
            <value>
            The reviewed date time.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ReviewerNote">
            <summary>
            Gets or sets the reviewer note.
            </summary>
            <value>
            The reviewer note.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelEntityTypeId">
            <summary>
            Gets or sets the channel entity type id.
            </summary>
            <value>
            The channel entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelDataJson">
            <summary>
            Gets or sets the channel data json.
            </summary>
            <value>
            The channel data json.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.AdditionalMergeFieldsJson">
            <summary>
            Gets or sets any additional merge fields.  
            </summary>
            <value>
            The additional merge fields.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
            <value>
            The sender.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Reviewer">
            <summary>
            Gets or sets the reviewer.
            </summary>
            <value>
            The reviewer.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
            <value>
            The recipients.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelEntityType">
            <summary>
            Gets or sets the communication channel.
            </summary>
            <value>
            The communication channel.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.Channel">
            <summary>
            Gets the channel component.
            </summary>
            <value>
            The channel component.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.ChannelData">
            <summary>
            Gets or sets the data used by the selected communication channel.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Model.Communication.AdditionalMergeFields">
            <summary>
            Gets or sets the additional merge field list. When a communication is created
            from a grid, the grid may add additional merge fields that will be available
            for the communication.
            </summary>
            <value>
            The additional merge field list.
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationConfiguration">
            <summary>
            Communication Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationStatus">
            <summary>
            The status of a communication
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Transient">
            <summary>
            Communication was created, but not yet edited by a user. (i.e. from data grid or report)
            Transient communications more than a few hours old may be deleted by clean-up job.
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Draft">
            <summary>
            Communication is currently being drafted
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Submitted">
            <summary>
            Communication has been submitted but not yet approved or denied
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Approved">
            <summary>
            Communication has been approved for sending
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationStatus.Denied">
            <summary>
            Communication has been denied
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipient">
            <summary>
            Communication Recipient POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipient.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.CommunicationId">
            <summary>
            Gets or sets the communication id.
            </summary>
            <value>
            The communication id.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.AdditionalMergeValuesJson">
            <summary>
            Gets or sets the additional merge values json.
            </summary>
            <value>
            The additional merge values json.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.Communication">
            <summary>
            Gets or sets the communication.
            </summary>
            <value>
            The communication.
            </value>
        </member>
        <member name="P:Rock.Model.CommunicationRecipient.AdditionalMergeValues">
            <summary>
            Gets or sets the additional merge values.
            </summary>
            <value>
            The additional merge values.
            </value>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientConfiguration">
            <summary>
            Communication Recipient Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CommunicationRecipientConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CommunicationRecipientConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CommunicationRecipientStatus">
            <summary>
            The status of communication being sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Pending">
            <summary>
            Communication has not yet been sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Success">
            <summary>
            Communication was successfully sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Failed">
            <summary>
            Communication failed to be sent to recipient
            </summary>
        </member>
        <member name="F:Rock.Model.CommunicationRecipientStatus.Cancelled">
            <summary>
            Communication was cancelled prior to sending to the recipient
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransaction">
            <summary>
            Scheduled Transaction POCO class.
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.AuthorizedPersonId">
            <summary>
            Gets or sets the authorized person id.
            </summary>
            <value>
            The authorized person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionFrequencyValueId">
            <summary>
            Gets or sets the transaction frequency value id.
            </summary>
            <value>
            The transaction frequency value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.NumberOfPayments">
            <summary>
            Gets or sets the number of payments.
            </summary>
            <value>
            The number of payments.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.GatewayId">
            <summary>
            Gets or sets the gateway id.
            </summary>
            <value>
            The gateway id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
            <value>
            The transaction code.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.CardReminderDate">
            <summary>
            Gets or sets the date to remind user to update scheduled transaction.
            </summary>
            <value>
            The card reminder date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.LastRemindedDate">
            <summary>
            Gets or sets the date that user was last reminded to update scheduled transaction.
            </summary>
            <value>
            The last reminded date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.AuthorizedPerson">
            <summary>
            Gets or sets the authorized person.
            </summary>
            <value>
            The authorized person.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.Gateway">
            <summary>
            Gets or sets the gateway.
            </summary>
            <value>
            The gateway.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.TransactionFrequencyValue">
            <summary>
            Gets or sets the transaction frequency value.
            </summary>
            <value>
            The transaction frequency value.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialScheduledTransaction.ScheduledTransactionDetails">
            <summary>
            Gets or sets the scheduled transaction details.
            </summary>
            <value>
            The scheduled transaction details.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialScheduledTransactionConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialScheduledTransactionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialScheduledTransactionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImage">
            <summary>
            Transaction Image POCO class.
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionId">
            <summary>
            Gets or sets the transaction id.
            </summary>
            <value>
            The transaction id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.BinaryFileId">
            <summary>
            Gets or sets the binary file id.
            </summary>
            <value>
            The binary file id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionImageTypeValueId">
            <summary>
            Gets or sets the transaction image type value id.
            </summary>
            <value>
            The transaction image type value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>
            The transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.BinaryFile">
            <summary>
            Gets or sets the binary file.
            </summary>
            <value>
            The binary file.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionImage.TransactionImageTypeValue">
            <summary>
            Gets or sets the transaction image type value.
            </summary>
            <value>
            The transaction image type value.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionImageConfiguration">
            <summary>
            TransactionImage Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionImageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionImageConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DataView">
            <summary>
            DataView POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.DataView.BindGrid(Rock.Web.UI.Controls.Grid,System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            Binds the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="createColumns">if set to <c>true</c> [create columns].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataView.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.DataView.GetExpression(System.Object,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="paramExpression">The param expression.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataView.GetTransformExpression(System.Object,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the transform expression.
            </summary>
            <param name="service">The service.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.DataView.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System indicates whether or not the campus is part of the core framework/system.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Given Name.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.DataView.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.EntityTypeId">
            <summary>
            Gets or sets the entity type that this view applies to.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.DataViewFilterId">
            <summary>
            Gets or sets the root filter id.
            </summary>
            <value>
            The root filter id.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.TransformEntityTypeId">
            <summary>
            Gets or sets the entity type id that is used for an optional transformation
            </summary>
            <value>
            The transformation entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.DataViewFilter">
            <summary>
            Gets or sets the root Data View Filter.
            </summary>
            <value>
            The report filter.
            </value>
        </member>
        <member name="P:Rock.Model.DataView.TransformEntityType">
            <summary>
            Gets or sets the type of the entity used for an optional transformation
            </summary>
            <value>
            The transformation type of entity.
            </value>
        </member>
        <member name="T:Rock.Model.DataViewConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DataViewFilter">
            <summary>
            DataViewFilter POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilter.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is authorized.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DataViewFilter.GetExpression(System.Type,System.Object,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DataViewFilter.ToString(System.Type)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ExpressionType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>
            The type of the filter.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
            <value>
            The parent id.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Selection">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Model.DataViewFilter"/> 
            is currently expanded.  This property is only used by the DataView ui to 
            track which filters are currently expanded
            </summary>
            <value>
              <c>true</c> if expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.DataViewFilter.ChildFilters">
            <summary>
            Gets or sets the child filters.
            </summary>
            <value>
            The child filters.
            </value>
        </member>
        <member name="T:Rock.Model.DataViewFilterConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DataViewFilterConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DataViewFilterConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FilterExpressionType">
            <summary>
            Type of Filter entry
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.Filter">
            <summary>
            Expression filter
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.GroupAll">
            <summary>
            Collection of Expressions that should be and'd together
            </summary>
        </member>
        <member name="F:Rock.Model.FilterExpressionType.GroupAny">
            <summary>
            Collection of Expressions that should be or'd together
            </summary>
        </member>
        <member name="T:Rock.Model.ComparisonType">
            <summary>
            Reporting Field Comparison Types
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.EqualTo">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.NotEqualTo">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.DoesNotContain">
            <summary>
            Does not contain
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.IsBlank">
            <summary>
            Is blank
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.IsNotBlank">
            <summary>
            Is not blank
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.GreaterThanOrEqualTo">
            <summary>
            Greater than or equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.LessThanOrEqualTo">
            <summary>
            Less than or equal
            </summary>
        </member>
        <member name="F:Rock.Model.ComparisonType.EndsWith">
            <summary>
            Ends with
            </summary>
        </member>
        <member name="T:Rock.Model.Report">
            <summary>
            Campus POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Report.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Report.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System indicates whether or not the campus is part of the core framework/system.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Given Name.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.Report.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.Report.EntityTypeId">
            <summary>
            Gets or sets the entity type that this view applies to.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.Report.DataViewId">
            <summary>
            Gets or sets the root filter id.
            </summary>
            <value>
            The root filter id.
            </value>
        </member>
        <member name="P:Rock.Model.Report.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.Report.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Report.DataView">
            <summary>
            Gets or sets the data view for the report.
            </summary>
            <value>
            The report data view.
            </value>
        </member>
        <member name="T:Rock.Model.ReportConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ReportConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ReportConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaign">
            <summary>
            MarketingCampaign POCO Entity
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaign.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPersonId">
            <summary>
            Gets or sets the contact person id.
            </summary>
            <value>
            The contact person id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactEmail">
            <summary>
            Gets or sets the contact email.
            </summary>
            <value>
            The contact email.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPhoneNumber">
            <summary>
            Gets or sets the contact phone number.
            </summary>
            <value>
            The contact phone number.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactFullName">
            <summary>
            Gets or sets the full name of the contact.
            </summary>
            <value>
            The full name of the contact.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.EventGroupId">
            <summary>
            Gets or sets the event group id.
            </summary>
            <value>
            The event group id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.ContactPerson">
            <summary>
            Gets or sets the contact person.
            </summary>
            <value>
            The contact person.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.EventGroup">
            <summary>
            Gets or sets the event group.
            </summary>
            <value>
            The event group.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignAds">
            <summary>
            Gets or sets the marketing campaign ads.
            </summary>
            <value>
            The marketing campaign ads.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignAudiences">
            <summary>
            Gets or sets the marketing campaign audiences.
            </summary>
            <value>
            The marketing campaign audiences.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaign.MarketingCampaignCampuses">
            <summary>
            Gets or sets the marketing campaign campuses.
            </summary>
            <value>
            The marketing campaign campuses.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignId">
            <summary>
            Gets or sets the marketing campaign id.
            </summary>
            <value>
            The marketing campaign id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdTypeId">
            <summary>
            Gets or sets the marketing campaign ad type id.
            </summary>
            <value>
            The marketing campaign ad type id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdStatus">
            <summary>
            Gets or sets the marketing campaign ad status.
            </summary>
            <value>
            The marketing campaign ad status.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignStatusPersonId">
            <summary>
            Gets or sets the marketing campaign status person id.
            </summary>
            <value>
            The marketing campaign status person id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaign">
            <summary>
            Gets or sets the marketing campaign.
            </summary>
            <value>
            The marketing campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAd.MarketingCampaignAdType">
            <summary>
            Gets or sets the type of the marketing campaign ad.
            </summary>
            <value>
            The type of the marketing campaign ad.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.PendingApproval">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.Approved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.MarketingCampaignAdStatus.Denied">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAdType.DateRangeType">
            <summary>
            Gets or sets the type of the date range.
            </summary>
            <value>
            The type of the date range.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAdTypeConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAdTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAdTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DateRangeTypeEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DateRangeTypeEnum.SingleDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DateRangeTypeEnum.DateRange">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudience">
            <summary>
            MarketingCampaignAudience POCO Entity
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.MarketingCampaignId">
            <summary>
            Gets or sets the marketing campaign id.
            </summary>
            <value>
            The marketing campaign id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.AudienceTypeValueId">
            <summary>
            Gets or sets the audience type id.
            </summary>
            <value>
            The audience type id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary.
            </summary>
            <value>
            <c>true</c> if this instance is primary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.MarketingCampaign">
            <summary>
            Gets or sets the marketing campaign.
            </summary>
            <value>
            The marketing campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignAudience.AudienceTypeValue">
            <summary>
            Gets or sets the audience type value.
            </summary>
            <value>
            The audience type value.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignAudienceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignAudienceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignAudienceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.MarketingCampaignId">
            <summary>
            Gets or sets the marketing campaign id.
            </summary>
            <value>
            The marketing campaign id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.CampusId">
            <summary>
            Gets or sets the campus id.
            </summary>
            <value>
            The campus id.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.MarketingCampaign">
            <summary>
            Gets or sets the marketing campaign.
            </summary>
            <value>
            The marketing campaign.
            </value>
        </member>
        <member name="P:Rock.Model.MarketingCampaignCampus.Campus">
            <summary>
            Gets or sets the campus.
            </summary>
            <value>
            The campus.
            </value>
        </member>
        <member name="T:Rock.Model.MarketingCampaignCampusConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.MarketingCampaignCampusConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MarketingCampaignCampusConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Note">
            <summary>
            Note POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Note.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Note.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Note.NoteTypeId">
            <summary>
            Gets or sets the Note Type Id.
            </summary>
            <value>
            Note Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Note.EntityId">
            <summary>
            Gets or sets the Entity Id.
            </summary>
            <value>
            Entity Id.
            </value>
        </member>
        <member name="P:Rock.Model.Note.SourceTypeValueId">
            <summary>
            Gets or sets the source type value id.
            </summary>
            <value>
            The source type value id.
            </value>
        </member>
        <member name="P:Rock.Model.Note.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:Rock.Model.Note.CreationDateTime">
            <summary>
            Gets or sets the creation date time.
            </summary>
            <value>
            The creation date time.
            </value>
        </member>
        <member name="P:Rock.Model.Note.IsAlert">
            <summary>
            Gets or sets the alert.
            </summary>
            <value>
            The alert.
            </value>
        </member>
        <member name="P:Rock.Model.Note.Text">
            <summary>
            Gets or sets the Value.
            </summary>
            <value>
            Value.
            </value>
        </member>
        <member name="P:Rock.Model.Note.NoteType">
            <summary>
            Gets or sets the Note Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Note.NoteType"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Note.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>
            The type of the source.
            </value>
        </member>
        <member name="P:Rock.Model.Note.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.NoteConfiguration">
            <summary>
            Note Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.NoteType">
            <summary>
            Note Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.NoteType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.SourcesTypeId">
            <summary>
            Gets or sets the sources defined type id.
            </summary>
            <value>
            The sources defined type id.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the Entity Type Qualifier Column.
            </summary>
            <value>
            Entity Qualifier Column.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityTypeQualifierValue">
            <summary>
            Gets or sets the Entity Type Qualifier Value.
            </summary>
            <value>
            Entity Type Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.Sources">
            <summary>
            Gets or sets the sources that can be used for this note type.
            </summary>
            <value>
            The sources.
            </value>
        </member>
        <member name="P:Rock.Model.NoteType.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.NoteTypeConfiguration">
            <summary>
            Note Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.NoteTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.NoteTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PageContext">
            <summary>
            Page Route POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PageContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PageContext.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.Entity">
            <summary>
            Gets or sets the Entity.
            </summary>
            <value>
            Entity.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.IdParameter">
            <summary>
            Gets or sets the page parameter that contains the entity's id.
            </summary>
            <value>
            Id Parameter.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.CreatedDateTime">
            <summary>
            Gets or sets the Created Date Time.
            </summary>
            <value>
            Created Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.PageContext.Page">
            <summary>
            Gets or sets the Page.
            </summary>
            <value>
            A <see cref="P:Rock.Model.PageContext.Page"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.PageContextConfiguration">
            <summary>
            Page Route Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageContextConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageContextConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PrayerRequest">
            <summary>
            PrayerRequest POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>
            The first name.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>
            The last name.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Email">
            <summary>
            Gets or sets the email address of the person for who the prayer request is about.
            </summary>
            <value>
            The email address.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.RequestedByPersonId">
            <summary>
            Gets or sets the requester's person id.
            </summary>
            <value>
            The requester's person id.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Answer">
            <summary>
            Gets or sets the answer for the prayer request.
            </summary>
            <value>
            The prayer's answer.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.EnteredDate">
            <summary>
            Gets or sets the date this request was entered.
            </summary>
            <value>
            The date the request was entered.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ExpirationDate">
            <summary>
            Gets or sets the expiration date.
            </summary>
            <value>
            The expiration date.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.AllowComments">
            <summary>
            Gets or sets whether or not comments can be made against the request.
            </summary>
            <value>
            True if comments are allowed.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsUrgent">
            <summary>
            Gets or sets the urgent flag.
            </summary>
            <value>
            True if urgent.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsPublic">
            <summary>
            Gets or sets the flag indicating whether or not the request is public.
            </summary>
            <value>
            True if request is public.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsActive">
            <summary>
            Gets or sets the active flag.
            </summary>
            <value>
            True if active.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.IsApproved">
            <summary>
            Gets or sets the approved flag.
            </summary>
            <value>
            True if approved.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FlagCount">
            <summary>
            Gets or sets the number of times this request has been flagged.
            </summary>
            <value>
            Number of times this request has been flagged.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.PrayerCount">
            <summary>
            Gets or sets the prayer count.
            </summary>
            <value>
            The prayer count.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedByPersonId">
            <summary>
            Gets or sets the approver's person id.
            </summary>
            <value>
            The approver's person id.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedOnDate">
            <summary>
            Gets or sets the date this request was approved.
            </summary>
            <value>
            The date the request was approved.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.RequestedByPerson">
            <summary>
            Gets or sets the requested by person.
            </summary>
            <value>
            The requested by person.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The request's group.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.ApprovedByPerson">
            <summary>
            Gets or sets the person who approved the request.
            </summary>
            <value>
            The person who approved the request.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FullName">
            <summary>
            Gets or sets the full name of the person for who the prayer request is about.
            </summary>
            <value>
            The full name.
            </value>
        </member>
        <member name="P:Rock.Model.PrayerRequest.FullNameLastFirst">
            <summary>
            Gets the full name (Last, First)
            </summary>
        </member>
        <member name="P:Rock.Model.PrayerRequest.Name">
            <summary>
            Name of the prayer request (required for ICategorized)
            </summary>
        </member>
        <member name="T:Rock.Model.PrayerRequestConfiguration">
            <summary>
            PrayerRequest Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PrayerRequestConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PrayerRequestConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Communication.BouncedEmail">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Created">
            <summary>
            Gets or sets the created.
            </summary>
            <value>
            The created.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="P:Rock.Communication.BouncedEmail.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="M:Rock.Communication.IEmailProvider.BouncedEmails(System.Boolean)">
            <summary>
            Returns a list of bounced emails.  Paramenter tells whether soft bounces should also be returned.
            </summary>
        </member>
        <member name="M:Rock.Communication.IEmailProvider.DeleteBouncedEmail(System.String)">
            <summary>
            Deletes bounced email from the email system
            </summary>
        </member>
        <member name="T:Rock.Communication.SendGridEmailProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Communication.SendGridEmailProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.SendGridEmailProvider"/> class.
            </summary>
        </member>
        <member name="M:Rock.Communication.SendGridEmailProvider.BouncedEmails(System.Boolean)">
            <summary>
            Returns a list of bounced emails.  Paramenter tells whether soft bounces should also be returned.
            </summary>
        </member>
        <member name="M:Rock.Communication.SendGridEmailProvider.DeleteBouncedEmail(System.String)">
            <summary>
            Deletes bounced email from the email system
            </summary>
        </member>
        <member name="T:Rock.Constants.WarningMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.WarningMessage.NotAuthorizedToEdit(System.String)">
            <summary>
            Returns a message in the format: "You are not authorized to edit {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.DateTimeFormatInvalid(System.String)">
            <summary>
            Returns a message in the format: Invalid format for {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.DateRangeEndDateBeforeStartDate">
            <summary>
            Returns a message: "End Date cannot be earlier than Start Date"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.WarningMessage.CannotBeBlank(System.String)">
            <summary>
            Returns a message in the format: "Value required for {0}."
            </summary>
            <param name="itemFieldName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Constants.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Constants.None.Id">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Rock.Constants.None.IdValue">
            <summary>
            0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Rock.Constants.None.Text" -->
        <member name="F:Rock.Constants.None.TextHtml">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Constants.None.ListItem">
            <summary>
            Return a ListItem with Text: "None", Value: 0
            </summary>
            <value>
            The list item.
            </value>
        </member>
        <member name="T:Rock.Constants.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Constants.All.Id">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="F:Rock.Constants.All.IdValue">
            <summary>
            Returns "-1"
            </summary>
        </member>
        <member name="F:Rock.Constants.All.Text">
            <summary>
            returns "[All]"
            </summary>
        </member>
        <member name="P:Rock.Constants.All.ListItem">
            <summary>
            Gets the list item.
            </summary>
            <value>
            The list item.
            </value>
        </member>
        <member name="T:Rock.Constants.ActionTitle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.ActionTitle.Add(System.String)">
            <summary>
            Returns a message in the format: "Add {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.ActionTitle.Edit(System.String)">
            <summary>
            Returns a message in the format: "Edit {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.ActionTitle.View(System.String)">
            <summary>
            Returns a message in the format: "View {0}"
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Constants.EditModeMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Constants.EditModeMessage.ReadOnlySystem(System.String)">
            <summary>
            Returns a message in the format: "INFO: This is a read-only system {0}."
            </summary>
            <param name="itemFriendlyName">Name of the item friendly.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Constants.EditModeMessage.ReadOnlyEditActionNotAllowed(System.String)">
            <summary>
            Returns a message in the format: "INFO: You do not have access to edit this {0}."
            </summary>
            <param name="itemFriendlyName">Name of the item field.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeQualifierService">
            <summary>
            AttributeQualifier Service class
            </summary>
            <summary>
            Attribute Qualifier POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeQualifierService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.#ctor(Rock.Data.IRepository{Rock.Model.AttributeQualifier})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeQualifierService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.CanDelete(Rock.Model.AttributeQualifier,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeQualifierService.GetByAttributeId(System.Int32)">
            <summary>
            Gets Attribute Qualifiers by Attribute Id
            </summary>
            <param name="attributeId">Attribute Id.</param>
            <returns>An enumerable list of AttributeQualifier objects.</returns>
        </member>
        <member name="T:Rock.Model.AttributeQualifierExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierExtensionMethods.Clone(Rock.Model.AttributeQualifier,System.Boolean)">
            <summary>
            Clones this AttributeQualifier object to a new AttributeQualifier object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeService">
            <summary>
            Attribute Service class
            </summary>
            <summary>
            Attribute POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeService.#ctor(Rock.Data.IRepository{Rock.Model.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeService.CanDelete(Rock.Model.Attribute,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByEntityTypeId(System.Nullable{System.Int32})">
            <summary>
            Gets Attributes by Entity Type Id
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <returns>
            An enumerable list of Attribute objects.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByCategoryId(System.Int32)">
            <summary>
            Gets the by category id.
            </summary>
            <param name="categoryId">The category id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeService.Get(System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets Attributes by Entity Type Id, Entity Qualifier Column, Entity Qualifier Value
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeService.Get(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Gets Attribute by Entity Type Id, Entity Qualifier Column, Entity Qualifier Value, And Key
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">Entity Qualifier Column.</param>
            <param name="entityQualifierValue">Entity Qualifier Value.</param>
            <param name="key">Key.</param>
            <returns>
            Attribute object.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetByFieldTypeId(System.Int32)">
            <summary>
            Gets Attributes by Field Type Id
            </summary>
            <param name="fieldTypeId">Field Type Id.</param>
            <returns>An enumerable list of Attribute objects.</returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetGlobalAttributes">
            <summary>
            Gets the global attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeService.GetGlobalAttribute(System.String)">
            <summary>
            Gets a global attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeExtensionMethods.Clone(Rock.Model.Attribute,System.Boolean)">
            <summary>
            Clones this Attribute object to a new Attribute object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeValueService">
            <summary>
            AttributeValue Service class
            </summary>
            <summary>
            Attribute Value POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueService.#ctor(Rock.Data.IRepository{Rock.Model.AttributeValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueService.CanDelete(Rock.Model.AttributeValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByAttributeId(System.Int32)">
            <summary>
            Gets Attribute Values by Attribute Id
            </summary>
            <param name="attributeId">Attribute Id.</param>
            <returns>An enumerable list of AttributeValue objects.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByAttributeIdAndEntityId(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets Attribute Values by Attribute Id And Entity Id
            </summary>
            <param name="attributeId">Attribute Id.</param>
            <param name="entityId">Entity Id.</param>
            <returns>An enumerable list of AttributeValue objects.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByEntityId(System.Nullable{System.Int32})">
            <summary>
            Gets Attribute Values by Entity Id
            </summary>
            <param name="entityId">Entity Id.</param>
            <returns>An enumerable list of AttributeValue objects.</returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetByAttributeIdAndEntityId(System.Int32,System.Int32)">
            <summary>
            Gets the by attribute id and entity id.
            </summary>
            <param name="attributeId">The attribute id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.AttributeValueService.GetGlobalAttributeValue(System.String)">
            <summary>
            Gets the global attribute value.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.AttributeValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueExtensionMethods.Clone(Rock.Model.AttributeValue,System.Boolean)">
            <summary>
            Clones this AttributeValue object to a new AttributeValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.Audit">
            <summary>
            Entity Change POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Audit.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Audit.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.EntityId">
            <summary>
            Gets or sets the Entity Id.
            </summary>
            <value>
            Entity Id.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.Title">
            <summary>
            Gets or sets the Entity Name.
            </summary>
            <value>
            Entity Name.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.AuditType">
            <summary>
            Type of change: 0:Add, 1:Modify, 2:Delete
            </summary>
            <value>
            Original Value.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.Properties">
            <summary>
            Gets or sets the properties modified.
            </summary>
            <value>
            Properties.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.DateTime">
            <summary>
            Gets or sets the Date Time.
            </summary>
            <value>
            Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Audit.Person">
            <summary>
            Gets or sets the Person.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Audit.Person"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.AuditConfiguration">
            <summary>
            Entity Change Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AuditConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuditType">
            <summary>
            Type of audit done to an entity
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Modify">
            <summary>
            Modify
            </summary>
        </member>
        <member name="F:Rock.Model.AuditType.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:Rock.Model.AuditService">
            <summary>
            Audit Service class
            </summary>
        </member>
        <member name="M:Rock.Model.AuditService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuditService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AuditService.#ctor(Rock.Data.IRepository{Rock.Model.Audit})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuditService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.AuditService.CanDelete(Rock.Model.Audit,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.AuditExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.AuditExtensionMethods.Clone(Rock.Model.Audit,System.Boolean)">
            <summary>
            Clones this Audit object to a new Audit object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.CategoryExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryExtensionMethods.Clone(Rock.Model.Category,System.Boolean)">
            <summary>
            Clones this Category object to a new Category object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.EntityTypeService">
            <summary>
            EntityType Service class
            </summary>
            <summary>
            EntityType POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeService.#ctor(Rock.Data.IRepository{Rock.Model.EntityType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeService.CanDelete(Rock.Model.EntityType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.String)">
            <summary>
            Gets EntityTypes by EntityName
            </summary>
            <param name="entityName">Entity.</param>
            <returns>An enumerable list of EntityType objects.</returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.Type,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Gets the specified type, and optionally creates new type if not found.
            </summary>
            <param name="type">The type.</param>
            <param name="createIfNotFound">if set to <c>true</c> [create if not found].</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.Get(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="friendlyName">Name of the friendly.</param>
            <param name="createIfNotFound">if set to <c>true</c> [create if not found].</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.GetEntities">
            <summary>
            Gets the entities that have the IsEntity flag set to true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.EntityTypeService.RegisterEntityTypes(System.String)">
            <summary>
            Gets a list of ISecured entities (all models) that have not yet been registered and adds them
            as an entity type.
            </summary>
            <param name="physWebAppPath">the physical path of the web application</param>
        </member>
        <member name="T:Rock.Model.EntityTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeExtensionMethods.Clone(Rock.Model.EntityType,System.Boolean)">
            <summary>
            Clones this EntityType object to a new EntityType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.HtmlFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.HtmlFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Field.Types.MemoFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.MemoFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Model.PersonAccountService">
            <summary>
            PersonAccount Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccountService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccountService.#ctor(Rock.Data.IRepository{Rock.Model.PersonAccount})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonAccountService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccountService.CanDelete(Rock.Model.PersonAccount,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.PersonAccountExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccountExtensionMethods.Clone(Rock.Model.PersonAccount,System.Boolean)">
            <summary>
            Clones this PersonAccount object to a new PersonAccount object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Migrations.CreateDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.CreateDatabase.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.CreateDatabase.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.MarketingCampaignAdAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignAdAttributes.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.MarketingCampaignAdAttributes.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.EntityTypesAdmin">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypesAdmin.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.EntityTypesAdmin.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Migrations.RockModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockModel.Up">
            <summary>
            Operations to be performed during the upgrade process.
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockModel.Down">
            <summary>
            Operations to be performed during the downgrade process.
            </summary>
        </member>
        <member name="T:Rock.Model.Attendance">
            <summary>
            CheckInAttendance EF Model.
            </summary>
        </member>
        <member name="M:Rock.Model.Attendance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Attendance.LocationId">
            <summary>
            Gets or sets the location id.
            </summary>
            <value>
            The location id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.ScheduleId">
            <summary>
            Gets or sets the shedule id.
            </summary>
            <value>
            The shedule id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.DeviceId">
            <summary>
            Gets or sets the device id that was used. (i.e. where user "checked-in" from
            </summary>
            <value>
            The device id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.SearchTypeValueId">
            <summary>
            Gets or sets the search type value id.
            </summary>
            <value>
            The search type value id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.AttendanceCodeId">
            <summary>
            Gets or sets the attendance code id.
            </summary>
            <value>
            The attendance code id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.QualifierValueId">
            <summary>
            Gets or sets the qualifier value id.  Qualifier can be used to 
            "qualify" attendance records.  There are not any system values
            for this particular defined type
            </summary>
            <value>
            The qualifier value id.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.StartDateTime">
            <summary>
            Gets or sets the start date time.
            </summary>
            <value>
            The start date time.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.EndDateTime">
            <summary>
            Gets or sets the end date time.
            </summary>
            <value>
            The end date time.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.DidAttend">
            <summary>
            Gets or sets a value indicating whether [did attend].
            </summary>
            <value>
              <c>true</c> if [did attend]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Note">
            <summary>
            Gets or sets the note.
            </summary>
            <value>
            The note.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Schedule">
            <summary>
            Gets or sets the schedule.
            </summary>
            <value>
            The schedule.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Device">
            <summary>
            Gets or sets the device that was used. (i.e. where user "checked-in" from
            </summary>
            <value>
            The device.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.SearchTypeValue">
            <summary>
            Gets or sets the type of search used during checkin
            </summary>
            <value>
            The search type value.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.AttendanceCode">
            <summary>
            Gets or sets the attendance code.
            </summary>
            <value>
            The attendance code.
            </value>
        </member>
        <member name="P:Rock.Model.Attendance.Qualifier">
            <summary>
            Gets or sets the qualifier.
            </summary>
            <value>
            The qualifier.
            </value>
        </member>
        <member name="T:Rock.Model.AttendanceConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttendanceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttendanceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Schedule">
            <summary>
            CheckInSchedule EF Model.
            </summary>
        </member>
        <member name="M:Rock.Model.Schedule.GetCalenderEvent">
            <summary>
            Gets the iCalender Event.
            </summary>
            <value>
            The iCalender Event.
            </value>
        </member>
        <member name="M:Rock.Model.Schedule.GetNextCheckInStartTime(System.DateTimeOffset)">
            <summary>
            Gets the next check in start time.
            </summary>
            <param name="beginDateTime">The begin date time.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Schedule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Schedule.Name">
            <summary>
            Gets or sets the Schedule name.
            </summary>
            <value>
            File Name.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.iCalendarContent">
            <summary>
            Gets or sets the content lines of the iCalendar
            </summary>
            <value>
            The content of the iCalendar.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CheckInStartOffsetMinutes">
            <summary>
            Gets or sets the number of minutes prior to schedule start that check-in should be active
            </summary>
            <value>
            The check in start offset
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CheckInEndOffsetMinutes">
            <summary>
            Gets or sets the number of minutes following schedule start that check-in should be active
            </summary>
            <value>
            The check in end offset
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.EffectiveStartDate">
            <summary>
            Gets or sets the effective start date.
            </summary>
            <value>
            The effective start date.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.EffectiveEndDate">
            <summary>
            Gets or sets the effective end date.
            </summary>
            <value>
            The effective end date.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.IsCheckInEnabled">
            <summary>
            Gets a value indicating whether this instance is check in enabled.
            </summary>
            <value>
            <c>true</c> if this instance is check in enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.IsCheckInActive">
            <summary>
            Gets a value indicating whether check-in is currently active for this instance.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Schedule.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="T:Rock.Model.ScheduleConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ScheduleConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ScheduleConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Device">
            <summary>
            CheckInDevice EF Model.
            </summary>
        </member>
        <member name="M:Rock.Model.Device.GetLocationGroupTypes">
            <summary>
            Gets the group types that are configured for the locations that this device is
            configured for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Device.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Device.Name">
            <summary>
            Gets or sets the device name.
            </summary>
            <value>
            File Name.
            </value>
        </member>
        <member name="P:Rock.Model.Device.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Device.GeoPoint">
            <summary>
            Gets or sets the geographic point where the device is located.
            </summary>
            <value>
            The geo point.
            </value>
        </member>
        <member name="P:Rock.Model.Device.GeoFence">
            <summary>
            Gets or sets the geographic boundry for the device
            </summary>
            <value>
            The geo fence.
            </value>
        </member>
        <member name="P:Rock.Model.Device.DeviceTypeValueId">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>
            The type of the device.
            </value>
        </member>
        <member name="P:Rock.Model.Device.IPAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
            <value>
            The IP address.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrinterDeviceId">
            <summary>
            Gets or sets the printer id.
            </summary>
            <value>
            The printer id.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrintFrom">
            <summary>
            Gets or sets the print from.
            </summary>
            <value>
            The print from.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrintToOverride">
            <summary>
            Gets or sets the print to override.
            </summary>
            <value>
            The print to override.
            </value>
        </member>
        <member name="P:Rock.Model.Device.Locations">
            <summary>
            Gets or sets the locations.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Rock.Model.Device.PrinterDevice">
            <summary>
            Gets or sets the printer.
            </summary>
            <value>
            The printer.
            </value>
        </member>
        <member name="P:Rock.Model.Device.DeviceType">
            <summary>
            Gets or sets the type of the device.
            </summary>
            <value>
            The type of the device.
            </value>
        </member>
        <member name="T:Rock.Model.DeviceConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DeviceConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DeviceConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PrintTo">
            <summary>
            Where a label should be printed
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Default">
            <summary>
            Print to the default printer
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Kiosk">
            <summary>
            Print to the printer associated with the selected kiosk
            </summary>
        </member>
        <member name="F:Rock.Model.PrintTo.Location">
            <summary>
            Print to the printer associated with the selected location
            </summary>
        </member>
        <member name="T:Rock.Model.PrintFrom">
            <summary>
            The application responsible for printing a label
            </summary>
        </member>
        <member name="F:Rock.Model.PrintFrom.Client">
            <summary>
            The kiosk will print the label
            </summary>
        </member>
        <member name="F:Rock.Model.PrintFrom.Server">
            <summary>
            The server 
            </summary>
        </member>
        <member name="T:Rock.Model.DbGeographyConverter">
             The JSON serializer normally would create the following...
             
             {
              ...
              "GeoPoint": {
                "Geography": {
                  "CoordinateSystemId": 4326,
                  "WellKnownText": "POINT (-112.20884 33.7106)"
                }
              },
              "GeoFence": null,
              ...
            }
            
             Which almost works except for the null GeoFence output, however the 
             JsonConvert.DerserializeObject() fails with:
             
                Unable to find a constructor to use for type System.Data.Spatial.DbGeography. 
                A class should either have a default constructor, one constructor with arguments
                or a constructor marked with the JsonConstructor attribute. Path 'GeoPoint.Geography',
                line 5, position 17.
             
        </member>
        <member name="M:Rock.Model.DbGeographyConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
             <summary>
             This serializer produces the following (which is slightly different than the default one):
             
            {
             ...
              "GeoPoint": {
                "latitude": 33.7106,
                "longitude": -112.20884
              },
              "GeoFence": null,
              ...
            }
             
             </summary>
             <param name="writer"></param>
             <param name="value"></param>
             <param name="serializer"></param>
        </member>
        <member name="T:Rock.Model.ServiceJobService">
            <summary>
            ServiceJob Service class
            </summary>
            <summary>
            Job POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceJobService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobService.#ctor(Rock.Data.IRepository{Rock.Model.ServiceJob})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceJobService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobService.CanDelete(Rock.Model.ServiceJob,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.GetActiveJobs">
            <summary>
            Gets the active jobs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.BuildQuartzJob(Rock.Model.ServiceJob)">
            <summary>
            Builds the quartz job.
            </summary>
            <param name="job">The job.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.ServiceJobService.BuildQuartzTrigger(Rock.Model.ServiceJob)">
            <summary>
            Builds the quartz trigger.
            </summary>
            <param name="job">The job.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.ServiceJobExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobExtensionMethods.Clone(Rock.Model.ServiceJob,System.Boolean)">
            <summary>
            Clones this ServiceJob object to a new ServiceJob object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerService">
            <summary>
            WorkflowTrigger Service class
            </summary>
            <summary>
            EntityTypeWorkflowTrigger POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTriggerService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowTrigger})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTriggerService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.CanDelete(Rock.Model.WorkflowTrigger,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerService.Get(System.String,Rock.Model.WorkflowTriggerType)">
            <summary>
            Gets the workflow types.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="triggerType">Type of the trigger.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerExtensionMethods.Clone(Rock.Model.WorkflowTrigger,System.Boolean)">
            <summary>
            Clones this WorkflowTrigger object to a new WorkflowTrigger object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MetricService">
            <summary>
            Metric Service class
            </summary>
            <summary>
            Metric POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricService.#ctor(Rock.Data.IRepository{Rock.Model.Metric})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricService.CanDelete(Rock.Model.Metric,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricService.GetByType(System.Nullable{System.Boolean})">
            <summary>
            Gets Metrics by Type
            </summary>
            <param name="type">The type.</param>
            <returns>
            An enumerable list of Metric objects.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricService.GetById(System.Nullable{System.Int32})">
            <summary>
            Gets Metric by Id
            </summary>
            <param name="metricId">metricId.</param>
            <returns>Metric object.</returns>
        </member>
        <member name="M:Rock.Model.MetricService.GetByGuid(System.Guid)">
            <summary>
            Gets Metric by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>Metric object.</returns>
        </member>
        <member name="T:Rock.Model.MetricExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MetricExtensionMethods.Clone(Rock.Model.Metric,System.Boolean)">
            <summary>
            Clones this Metric object to a new Metric object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.Category">
            <summary>
            Category POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Category.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Category.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentCategoryId">
            <summary>
            Gets or sets the parent category id.
            </summary>
            <value>
            The parent category id.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the Entity Qualifier Column.
            </summary>
            <value>
            Entity Qualifier Column.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityTypeQualifierValue">
            <summary>
            Gets or sets the Entity Qualifier Value.
            </summary>
            <value>
            Entity Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.Category.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconSmallFileId">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconLargeFileId">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentCategory">
            <summary>
            Gets or sets the parent category.
            </summary>
            <value>
            The parent category
            </value>
        </member>
        <member name="P:Rock.Model.Category.ChildCategories">
            <summary>
            Gets or sets the child categories.
            </summary>
            <value>
            The child categories.
            </value>
        </member>
        <member name="P:Rock.Model.Category.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconSmallFile">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.Category.IconLargeFile">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.Category.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.CategoryConfiguration">
            <summary>
            Category Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CategoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CategoryConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.PackageService">
            <summary>
            Facade class to provide intaraction with NuGet internals
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.PackageService"/> class.
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ExportPage(Rock.Model.Page,System.Boolean)">
            <summary>
            Exports the page.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [should export children].</param>
            <returns>a <see cref="T:System.IO.MemoryStream"/> of the exported page package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ImportPage(System.Byte[],System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Imports the page.
            </summary>
            <param name="uploadedPackage">Byte array of the uploaded package</param>
            <param name="fileName">File name of uploaded package</param>
            <param name="personId">Id of the Person performing the import</param>
            <param name="pageId">The Id of the Page to save new data underneath</param>
            <param name="siteId">The Id of the Site tha the Page is being imported into</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.CreatePackageDirectory(System.String,System.String)">
            <summary>
            Creates a unique directory for temporarily holding the page export package.
            </summary>
            <param name="pageName">Name of the page.</param>
            <param name="packageId">The unique package id.</param>
            <returns>a <see cref="T:System.IO.DirectoryInfo"/> of the new directory.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.GetJson(Rock.Model.Page,System.Boolean)">
            <summary>
            Gets the json for this page.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [is recursive].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.FindUniqueBlockTypesAndDirectories(Rock.Model.Page,System.Boolean,System.Collections.Generic.Dictionary{System.Guid,Rock.Model.BlockType},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Finds the unique block types and directories for the given page and adds them to the <paramref name="blockTypes"/> and <paramref name="directories"/> dictionaries.
            </summary>
            <param name="page">The page.</param>
            <param name="isRecursive">if set to <c>true</c> [child pages are recursively searched too].</param>
            <param name="blockTypes">a Dictionary of BlockTypes.</param>
            <param name="directories">a Dictionary of directory names.</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.AddToManifest(NuGet.Manifest,System.String,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Add the given directories files (matching the given file filter and search options)
            to the manifest.
            </summary>
            <param name="manifest">A NuGet Manifest</param>
            <param name="directory">the directory containing the file(s)</param>
            <param name="webRootPath">the physical path to the app's webroot</param>
            <param name="filterPattern"> A file filter pattern such as *.* or *.cs</param>
            <param name="searchOption">A <see cref="T:System.IO.SearchOption"/> search option to define the scope of the search</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.FindNewBlockTypes(Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType})">
            <summary>
            Iterates recursively through all BlockTypes associated with a Page and its children and compares them with
            the list of BlockTypes that are currently installed.
            </summary>
            <param name="page">The page to interrogate</param>
            <param name="installedBlockTypes">The list of currently installed Blocks</param>
            <returns>A List&lt;BlockType&gt; of BlockTypes that are not currently installed.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ValidateImportData(Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType})">
            <summary>
            Validates the import data.
            </summary>
            <param name="page">The page.</param>
            <param name="newBlockTypes">Collection of newly created BlockTypes</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.SavePages(Rock.Model.Page,System.Collections.Generic.IEnumerable{Rock.Model.BlockType},System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Recursively saves Pages and associated Blocks, PageRoutes and PageContexts.
            </summary>
            <param name="page">The current Page to save</param>
            <param name="newBlockTypes">List of BlockTypes not currently installed</param>
            <param name="personId">Id of the Person performing the "Import" operation</param>
            <param name="parentPageId">Id of the the current Page's parent</param>
            <param name="siteId">Id of the site the current Page is being imported into</param>
        </member>
        <member name="M:Rock.Services.NuGet.PackageService.ExpandFiles(System.Collections.Generic.IEnumerable{NuGet.IPackageFile})">
            <summary>
            Expands the files.
            </summary>
            <param name="packageFiles">The package files.</param>
        </member>
        <member name="P:Rock.Services.NuGet.PackageService.ErrorMessages">
            <summary>
            Gets or sets the error messages.
            </summary>
            <value>
            The error messages.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.PackageService.WarningMessages">
            <summary>
            Gets or sets the warning messages.
            </summary>
            <value>
            The warning messages.
            </value>
        </member>
        <member name="T:Rock.Search.Person.PersonQueryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Search.Person.PersonQueryExtensions.QueryByName(System.Linq.IQueryable{Rock.Model.Person},System.String,System.Boolean@)">
            <summary>
            Queries the name of the by.
            </summary>
            <param name="qry">The qry.</param>
            <param name="searchTerm">The search term.</param>
            <param name="lastFirst">if set to <c>true</c> [last first].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Search.Person.PersonQueryExtensions.SelectFullNames(System.Linq.IQueryable{Rock.Model.Person},System.String,System.Boolean)">
            <summary>
            Selects the full names.
            </summary>
            <param name="qry">The qry.</param>
            <param name="searchTerm">The search term.</param>
            <param name="distinct">if set to <c>true</c> [distinct].</param>
            <returns></returns>
        </member>
        <member name="T:Rock.SystemGuid.BinaryFiletype">
            <summary>
            System file types.  
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.CHECKIN_LABEL">
            <summary>
            Gets the Checkin-Label File type guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BinaryFiletype.CONTRIBUTION_IMAGE">
            <summary>
            Gets the Contribution-Image (scanned check, scanned envelope, etc) file type guid
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Adapters.CheckBoxAdapter">
            <summary>
            Control adapter for checkbox
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Adapters.CheckBoxListAdapter">
            <summary>
            Control adapter for checkbox list
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.CheckBoxListAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Adapters.RadioButtonAdapter">
            <summary>
            Control adapter for radio button
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.Sms">
            <summary>
            SMS Communication Channel control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.Communication.Email"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Sms.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.Communication.Email">
            <summary>
            Email Communication Channel control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.Communication.Email"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.InitializeFromSender(Rock.Model.Person)">
            <summary>
            On new communicaiton, initializes controls from sender values
            </summary>
            <param name="sender">The sender.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.fuAttachments_FileUploaded(System.Object,System.EventArgs)">
            <summary>
            Handles the FileUploaded event of the fuAttachments control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.lbRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbRemove control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Communication.Email.GetAttachments">
            <summary>
            Creates the attachment list.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Email.ChannelData">
            <summary>
            Gets or sets the channel data.
            </summary>
            <value>
            The channel data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Communication.Email.Attachments">
            <summary>
            Gets or sets the attachments.
            </summary>
            <value>
            The attachments.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.Badge">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Badge.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Badge.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>
            The tool tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Badge.BadgeType">
            <summary>
            Gets or sets the type of the badge.
            </summary>
            <value>
            The type of the badge.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.BadgeType">
            <summary>
            The type of notification box to display
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.Important">
            <summary>
            Important
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.BadgeType.Inverse">
            <summary>
            Inverse
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledBulletedList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.BulletedList"/> control with an associated label.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ILabeledControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ILabeledControl.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledBulletedList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledBulletedList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledBulletedList.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledBulletedList.TextCssClass">
            <summary>
            Gets or sets the text CSS class.
            </summary>
            <value>
            The text CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledBulletedList.Items">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyAttributes">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyAttributes.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributes.AttributeList">
            <summary>
            Gets or sets the attribute ids.
            </summary>
            <value>
            The attribute ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyAttributesRow">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.NewFamilyAttributesRow.AttributeList">
            <summary>
            Gets or sets the attribute ids.
            </summary>
            <value>
            The attribute ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyMembers">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NewFamilyMembers.ClearRows">
            <summary>
            Clears the rows.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NewFamilyMembersRow">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.NewFamilyMembersRow.DeleteClick">
            <summary>
            Occurs when [delete click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonProfileBadge">
            <summary>
            abstract class for controls used to render a Person Profile Badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadge.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadge.BadgeEntityTypeName">
            <summary>
            Gets or sets the name of the badge entity type.
            </summary>
            <value>
            The name of the badge entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadge.ParentPersonBlock">
            <summary>
            Gets the parent person block.
            </summary>
            <value>
            The parent person block.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonLink">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with numerical validation 
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.HtmlEditor.label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.HtmlEditor.helpBlock">
            <summary>
            The help block
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.HtmlEditor.mergeFieldPicker">
            <summary>
            The merge fields picker
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.HtmlEditor.MergeFields">
            <summary>
            Gets or sets the merge fields to make available.  This should include either a list of
            entity type names (full name), or other non-object string values
            </summary>
            <value>
            The merge fields.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonProfileBadgeList">
            <summary>
            abstract class for controls used to render a Person Profile Badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonProfileBadgeList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonProfileBadgeList.ComponentGuids">
            <summary>
            Gets or sets the component guids.
            </summary>
            <value>
            The component guids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ComponentPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ComponentPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ComponentPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentPicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentPicker.ContainerType">
            <summary>
            Gets or sets the type of the container.
            </summary>
            <value>
            The type of the container.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ComponentsPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledCheckBoxList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledCheckBoxList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledCheckBoxList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBoxList.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBoxList.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBoxList.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBoxList.SelectedValues">
            <summary>
            Gets the selected values as int.
            </summary>
            <value>
            The selected values as int.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentsPicker.ContainerType">
            <summary>
            Gets or sets the binary file type id.
            </summary>
            <value>
            The binary file type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ComponentsPicker.SelectedComponents">
            <summary>
            Gets the selected component ids.
            </summary>
            <value>
            The selected component ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.MonthDayPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DataTextBox">
            <summary>
            A composite control that renders a label, textbox, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledTextBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledTextBox.label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledTextBox.helpBlock">
            <summary>
            The help block
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledTextBox.requiredValidator">
            <summary>
            The required field validator
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledTextBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledTextBox.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validator.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.LabeledTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.PrependText">
            <summary>
            Gets or sets the prepend text.
            </summary>
            <value>
            The prepend text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.AppendText">
            <summary>
            Gets or sets the append text.
            </summary>
            <value>
            The append text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledTextBox.Text">
            <summary>
            Gets or sets the text content of the <see cref="T:System.Web.UI.WebControls.TextBox" /> control.
            </summary>
            <returns>The text displayed in the <see cref="T:System.Web.UI.WebControls.TextBox" /> control. The default is an empty string ("").</returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataTextBox.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validators.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.SourceTypeName">
            <summary>
            Gets or sets the name of the assembly qualified name of the entity that is being validated
            </summary>
            <value>
            The name of the assembly qualified type name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.PropertyName">
            <summary>
            Gets or sets the name of the entity property.
            </summary>
            <value>
            The name of the entity property.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.LabelTextFromPropertyName">
            <summary>
            Gets or sets a value indicating whether [get label from property name].
            Default = True
            </summary>
            <value>
            <c>true</c> if [get label from property name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataTextBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthDayPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthDayPicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.MonthYearPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MonthYearPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.MonthYearPicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CampusPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledDropDownList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.DropDownList"/> control with an associated label.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RockDropDownList">
            <summary>
            Custom DropDownList control that retains options groups after post-back
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.SaveViewState">
            <summary>
            Saves the current view state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> -derived control and the items it contains.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> that contains the saved state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> control.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.RockDropDownList.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved view state of the <see cref="T:System.Web.UI.WebControls.DetailsView" /> control.
            </summary>
            <param name="savedState">An <see cref="T:System.Object" /> that represents the state of the <see cref="T:System.Web.UI.WebControls.ListControl" /> -derived control.</param>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledDropDownList.label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledDropDownList.helpBlock">
            <summary>
            The help block
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledDropDownList.requiredValidator">
            <summary>
            The validator
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledDropDownList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.LabeledDropDownList"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledDropDownList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledDropDownList.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validator.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledDropDownList.CreateControlCollection">
            <summary>
            Creates a collection to store child controls.
            </summary>
            <returns>
            Always returns an <see cref="T:System.Web.UI.EmptyControlCollection"/>.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledDropDownList.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.LabeledTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledDropDownList.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledDropDownList.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledDropDownList.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledDropDownList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.CampusPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.CampusPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusPicker.Campuses">
            <summary>
            Gets or sets the campuses.
            </summary>
            <value>
            The campuses.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusPicker.SelectedCampusId">
            <summary>
            Gets the selected campus ids.
            </summary>
            <value>
            The selected campus ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateTimePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DateTimePicker.SelectedDateTime">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TagList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.TagList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityQualifierColumn">
            <summary>
            Gets or sets the entity qualifier column.
            </summary>
            <value>
            The entity qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityQualifierValue">
            <summary>
            Gets or sets the entity qualifier value.
            </summary>
            <value>
            The entity qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TagList.EntityGuid">
            <summary>
            Gets or sets the entity GUID.
            </summary>
            <value>
            The entity GUID.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.DatePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DatePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DatePicker.SelectedDate">
            <summary>
            Gets the selected date.
            </summary>
            <value>
            The selected date.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TimePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.TimePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.TimePicker.SelectedTime">
            <summary>
            Gets or sets the selected time.
            </summary>
            <value>
            The selected time.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.MergeFieldPicker">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ItemPicker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ItemPicker.RequiredValidator">
            <summary>
            The required validator
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Gets the selected value as int.
            </summary>
            <param name="noneAsNull">if set to <c>true</c> [none as null].</param>
            <returns></returns>
            <value>
            The selected value as int.
              </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SelectedValuesAsInt">
            <summary>
            Selecteds the values as int.
            </summary>
            <param name="noneAsNull">if set to <c>true</c> [none as null].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValue(System.Nullable{System.Int32})">
            <summary>
            Sets the value.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValues(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the values.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ItemPicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.FieldName">
            <summary>
            Gets or sets the name of the field (for validation messages)
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemRestUrlExtraParams">
            <summary>
            Gets or sets the item rest URL extra params.
            </summary>
            <value>
            The item rest URL extra params.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemId">
            <summary>
            Gets or sets the item id.
            </summary>
            <value>
            The item id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemIds">
            <summary>
            Gets the item ids.
            </summary>
            <value>
            The item ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.InitialItemParentIds">
            <summary>
            Gets or sets the initial item parent ids.
            </summary>
            <value>
            The initial item parent ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>
            The selected value.  NOTE: If nothing was previously set, it will return <see cref="F:Rock.Constants.None.IdValue"/>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.SelectedValues">
            <summary>
            Gets or sets the selected values.
            </summary>
            <value>
            The selected values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>
            The name of the item.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.ItemNames">
            <summary>
            Gets or sets the item names.
            </summary>
            <value>
            The item names.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ItemPicker"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.AllowMultiSelect">
            <summary>
            Gets or sets a value indicating whether [allow multi select].
            </summary>
            <value>
              <c>true</c> if [allow multi select]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ItemPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ItemPicker.SelectItem">
            <summary>
            Occurs when [select item].
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValue(System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the values.
            </summary>
            <param name="nodePaths">The node paths.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.MergeFieldPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Controls.MergeFieldPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PersonPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.PersonPicker"/> class.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.PersonPicker.RequiredValidator">
            <summary>
            The required validator
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.SetValue(Rock.Model.Person)">
            <summary>
            Sets the value.
            </summary>
            <param name="person">The person.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.btnSelect_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.PersonPicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the <see cref="T:System.Web.UI.WebControls.TextBox" /> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.FieldName">
            <summary>
            Gets or sets the name of the field to display in validation messages
            when a LabelText is not entered
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>
            The selected value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.PersonName">
            <summary>
            Gets or sets the name of the person.
            </summary>
            <value>
            The name of the person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.PersonPicker"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.PersonPicker.SelectPerson">
            <summary>
            Gets or sets the select person.
            </summary>
            <value>
            The select person.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PersonPicker.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.TreeViewItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.HasChildren">
            <summary>
            Gets or sets a value indicating whether this instance has children.
            </summary>
            <value>
            <c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.TreeViewItem.IconSmallUrl">
            <summary>
            Gets or sets the group type icon small id.
            </summary>
            <value>
            The group type icon small id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NumberBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with numerical validation 
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NumberBox"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberBox.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumberBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.LabeledTextBox"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.FieldName">
            <summary>
            Gets or sets the name of the field (for validation messages)
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.ValidationDataType">
            <summary>
            Gets or sets the type of the validation data.
            </summary>
            <value>
            The type of the validation data.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumberBox.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageBreadCrumbs">
            <summary>
            Displays a bootstrap badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageBreadCrumbs.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageDescription">
            <summary>
            Renders the description of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageDescription.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageIcon">
            <summary>
            Renders the icon of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageIcon.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.CategoryPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.CategoryPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValue(Rock.Model.Category)">
            <summary>
            Sets the value.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Category})">
            <summary>
            Sets the values.
            </summary>
            <param name="categories">The categories.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.CategoryPicker.SetExtraRestParams">
            <summary>
            Sets the extra rest params.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeName">
            <summary>
            Sets the type of the category entity.
            </summary>
            <value>
            The type of the category entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CategoryPicker.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.BinaryFileTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BinaryFileTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BinaryFileTypePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BinaryFileTypePicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Selects the value as int.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.BinaryFilePicker">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.BinaryFilePicker.BinaryFileTypeId">
            <summary>
            Gets or sets the binary file type id.
            </summary>
            <value>
            The binary file type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.AccountPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.AccountPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValue(Rock.Model.FinancialAccount)">
            <summary>
            Sets the value.
            </summary>
            <param name="account">The account.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.FinancialAccount})">
            <summary>
            Sets the values.
            </summary>
            <param name="accounts">The accounts.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AccountPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.AccountPicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AccountPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowTypePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowTypePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.WorkflowTypePicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowTypePicker.SelectedValueAsInt(System.Boolean)">
            <summary>
            Selects the value as int.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.GroupPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.AccountPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValue(Rock.Model.Group)">
            <summary>
            Sets the value.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Group})">
            <summary>
            Sets the values.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValueOnSelect">
            <summary>
            Sets the value on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GroupPicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupPicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GroupPicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HiddenFieldValidator">
            <summary>
            from http://stackoverflow.com/questions/6607984/asprequiredfieldvalidator-does-not-validate-hidden-fields
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HiddenFieldValidator.ControlPropertiesValid">
            <summary>
            Determines whether the control specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a valid control.
            </summary>
            <returns>
            true if the control specified by <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> is a valid control; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.FileUploader">
            <summary>
            A control to select a file and set any attributes
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:LabeledFileUploader"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.FileUploader.RaisePostBackEvent(System.String)">
            <summary>
            When implemented by a class, enables a server control to process an event raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A <see cref="T:System.String" /> that represents an optional event argument to be passed to the event handler.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.BinaryFileId">
            <summary>
            Gets or sets the binary file id.
            </summary>
            <value>
            The binary file id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FileUploader.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.FileUploader.FileUploaded">
            <summary>
            Occurs when a file is uploaded.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.PagePicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.AccountPicker"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValue(Rock.Model.Page)">
            <summary>
            Sets the value.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValues(System.Collections.Generic.IEnumerable{Rock.Model.Page})">
            <summary>
            Sets the values.
            </summary>
            <param name="pages">The pages.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValueOnSelect">
            <summary>
            Handles the Click event of the btnSelect control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.SetValuesOnSelect">
            <summary>
            Sets the values on select.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagePicker.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.PagePicker.ItemRestUrl">
            <summary>
            Gets the item rest URL.
            </summary>
            <value>
            The item rest URL.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.KeyValueList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.KeyValueList.RegisterClientScript(System.Collections.Generic.List{Rock.Model.DefinedValue})">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.KeyValueList.DefinedTypeId">
            <summary>
            Gets or sets the defined type id.  If a defined type id is used, the value portion of this control
            will render as a DropDownList of values from that defined type.  If a DefinedTypeId is not specified
            the values will be rendered as free-form text fields.
            </summary>
            <value>
            The defined type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ToggleField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for toggling the bool/checkbox value of a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ToggleField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.toggleFieldTemplate_CheckedChanged(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the CheckedChanged event of the toggleFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.CssClass">
            <summary>
            Gets or sets the CssClass of the field.
            </summary>
            <value>
            The CssClass.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.DataField">
            <summary>
            Gets or sets the DataField of the BoundField.
            </summary>
            <value>
            The data field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ToggleField"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.OnText">
            <summary>
            Gets or sets the text that represents the "on" state.
            </summary>
            <value>
            The "on" text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.OffText">
            <summary>
            Gets or sets the text that represents the "off" state.
            </summary>
            <value>
            The "off" text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ToggleField.CheckedChanged">
            <summary>
            Occurs when [checked changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ToggleFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.ToggleField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/>
            object that child controls and templates belong to. These child controls are in
            turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRender event of the toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the Toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ToggleFieldTemplate.toggle_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the Toggle control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.DataField">
            <summary>
            Gets or sets the DataField to bind to.
            </summary>
            <value>
            The DataField to bind to.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ToggleFieldTemplate.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.ToggleFieldTemplate"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ToggleFieldTemplate.CheckedChanged">
            <summary>
            Occurs when checkbox [checked changed].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.NoteEditor">
            <summary>
            Displays a Rock Note
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.IdEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.IdEventArgs.Id">
            <summary>
            Gets the index of the row that fired the event
            </summary>
            <value>
            The index of the row.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ButtonDropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.OnInit(System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ButtonDropDownList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedItem">
            <summary>
            Gets the selected item with the lowest index in the list control.
            </summary>
            <returns>A <see cref="T:System.Web.UI.WebControls.ListItem" /> that represents the lowest indexed item selected from the list control. The default is null.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedValue">
            <summary>
            Gets the value of the selected item in the list control, or selects the item in the list control that contains the specified value.
            </summary>
            <returns>The value of the selected item in the list control. The default is an empty string ("").</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.ButtonDropDownList.SelectedIndex">
            <summary>
            Gets or sets the lowest ordinal index of the selected items in the list.
            </summary>
            <returns>The lowest ordinal index of the selected items in the list. The default is -1, which indicates that nothing is selected.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.ButtonDropDownList.SelectionChanged">
            <summary>
            Occurs when [selection changed].
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.AttributeEditor"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.SaveViewState">
            <summary>
            Saves any state that was modified after the <see cref="M:System.Web.UI.WebControls.Style.TrackViewState" /> method was invoked.
            </summary>
            <returns>
            An object that contains the current view state of the control; otherwise, if there is no view state associated with the control, null.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.SetAttributeProperties(Rock.Model.Attribute,System.Type)">
            <summary>
            Sets the controls properties from the attribute
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="objectType">Type of the object that attribute is being created for.  If specified, the UI 
            will prevent user from creating an attribute with the same key as an existing property name of the object.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.GetAttributeProperties(Rock.Model.Attribute)">
            <summary>
            Updates the attribute with the value of the control's properties NOTE: This call should be wrapped in a 
            Unit of Work.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.RegisterClientScript">
            <summary>
            Registers the client script.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.cvKey_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Handles the ServerValidate event of the cvKey control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSaveAttribute control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeEditor.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnCancelAttribute control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ActionTitle">
            <summary>
            Gets or sets the action title.
            </summary>
            <value>
            The action title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeGuid">
            <summary>
            Gets or sets the attribute GUID.
            </summary>
            <value>
            The attribute GUID.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.CategoryIds">
            <summary>
            Gets or sets the categories ids.
            </summary>
            <value>
            The categories ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Qualifiers">
            <summary>
            Gets or sets the qualifiers.
            </summary>
            <value>
            The qualifiers.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ReservedKeyNames">
            <summary>
            Gets or sets any key values that should not be allowed to be used
            </summary>
            <value>
            The reserved key names.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.AttributeEntityTypeId">
            <summary>
            Gets or sets the entity type that attribute is being used for.  If specified, the the list of available categories
            will only display categories for attribute belonging to this type of entity
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.MultiValue">
            <summary>
            Gets or sets a value indicating whether [multi value].
            </summary>
            <value>
              <c>true</c> if [multi value]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.AttributeEditor"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.AttributeEditor.ShowInGrid">
            <summary>
            Gets or sets a value indicating whether [show in grid].
            </summary>
            <value>
              <c>true</c> if [show in grid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.AttributeEditor.SaveClick">
            <summary>
            Occurs when [save click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.AttributeEditor.CancelClick">
            <summary>
            Occurs when [cancel click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ScheduleBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ScheduleBuilder"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.TextBoxToPositiveInteger(System.Web.UI.WebControls.TextBox,System.Int32)">
            <summary>
            Texts the box to positive integer.
            </summary>
            <param name="textBox">The text box.</param>
            <param name="minValue">The min value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.GetCalendarContentFromControls">
            <summary>
            Gets the calendar content from controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.RegisterJavaScript">
            <summary>
            Registers the java script.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Web.UI.Controls.ScheduleBuilder.CreateChildControls" -->
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.btnSaveSchedule_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnSaveSchedule control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.btnCancelSchedule_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the btnCancelSchedule control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ScheduleBuilder.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder._iCalendarContent">
            <summary>
            The _i calendar content
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ScheduleBuilder.iCalendarContent">
            <summary>
            Gets or sets the content of the i calendar.
            </summary>
            <value>
            The content of the i calendar. 
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.ScheduleBuilder.SaveSchedule">
            <summary>
            Occurs when [save schedule].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.ScheduleBuilder.CancelSchedule">
            <summary>
            Occurs when [cancel schedule].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityButton">
            <summary>
            A Button for setting security for a particular secured item
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityButton.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityButton.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityButton.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityButton.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.StateDropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.StateDropDownList.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowActionTypeEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionTypeEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionTypeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionTypeEditor.ddlEntityType_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the ddlEntityType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionTypeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActionTypeEditor.lbDeleteActionType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteActionType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionTypeEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActionTypeEditor.WorkflowActionType">
            <summary>
            Gets or sets the type of the workflow activity.
            </summary>
            <value>
            The type of the workflow activity.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActionTypeEditor.DeleteActionTypeClick">
            <summary>
            Occurs when [delete action type click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.WorkflowActivityTypeEditor">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.GetWorkflowActivityType">
            <summary>
            Gets or sets the type of the workflow activity.
            </summary>
            <value>
            The type of the workflow activity.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.SetWorkflowActivityType(Rock.Model.WorkflowActivityType)">
            <summary>
            Sets the type of the workflow activity.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.lbDeleteActivityType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDeleteActivityType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.lbAddActionType_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAddActionType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.DeleteActivityTypeClick">
            <summary>
            Occurs when [delete activity type click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.WorkflowActivityTypeEditor.AddActionTypeClick">
            <summary>
            Occurs when [add action type click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BadgeField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for displaying a badge
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BadgeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BadgeField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BadgeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.ImportantMin">
            <summary>
            Gets or sets the important minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Important.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.ImportantMax">
            <summary>
            Gets or sets the important max.
            </summary>
            <value>
            The maximum value to be considered Important.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.WarningMin">
            <summary>
            Gets or sets the Warning minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Warning.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.WarningMax">
            <summary>
            Gets or sets the Warning maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Warning.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.SuccessMin">
            <summary>
            Gets or sets the Success minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Success.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.SuccessMax">
            <summary>
            Gets or sets the Success maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Success.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.InfoMin">
            <summary>
            Gets or sets the Info minimum value rule.
            </summary>
            <value>
            The minimum value to be considered Info.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeField.InfoMax">
            <summary>
            Gets or sets the Info maximum value rule.
            </summary>
            <value>
            The maximum value to be considered Info.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.BadgeField.SetBadgeType">
            <summary>
            Occurs when badge field is being formatted.  Use to set the badge type
            based on the current row's field value.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BadgeRowEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeRowEventArgs.FieldValue">
            <summary>
            Gets the field value.
            </summary>
            <value>
            The field value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.BadgeRowEventArgs.BadgeType">
            <summary>
            Gets or sets the type of the badge.
            </summary>
            <value>
            The type of the badge.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.INotRowSelectedField">
            <summary>
            By default any BoundField will participate in the RowSelected event of the grid.  A custom BoundField can implement
            this interface to prevent the RowSelected event from being fired when this field (column) is clicked on
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.Toggle">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.Toggle.label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.Toggle.helpBlock">
            <summary>
            The help block
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.Toggle"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Toggle.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Toggle.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.HelpBlock">
            <summary>
            Displays a help icon that will display the Text property when clicked
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HelpBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.HelpBlock.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Reporting.DataFilterContainer">
            <summary>
            MEF Container class for data filters
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetAvailableFilteredEntityTypeNames">
            <summary>
            Gets a list of entity type names that have Data Filter components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataFilterContainer.GetComponentsByFilteredEntityName(System.String)">
            <summary>
            Gets the components that are for filtering a given entity type name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataFilterContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
              </value>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.GetExpression(System.Type,System.Object,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.GroupTypeAttendanceFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Reporting.DataTransform.Person.HasPictureFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.GetTitle(System.Type)">
            <summary>
            Gets the title.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <value>
            The title.
              </value>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.GetClientFormatSelection(System.Type)">
            <summary>
            Formats the selection on the client-side.  When the filter is collapsed by the user, the Filterfield control
            will set the description of the filter to whatever is returned by this property.  If including script, the
            controls parent container can be referenced through a '$content' variable that is set by the control before 
            referencing this property.
            </summary>
            <value>
            The client format script.
            </value>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.FormatSelection(System.Type,System.String)">
            <summary>
            Formats the selection.
            </summary>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.CreateChildControls(System.Type,Rock.Web.UI.Controls.FilterField)">
            <summary>
            Creates the child controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.RenderControls(System.Type,Rock.Web.UI.Controls.FilterField,System.Web.UI.HtmlTextWriter,System.Web.UI.Control[])">
            <summary>
            Renders the controls.
            </summary>
            <param name="writer">The writer.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.GetSelection(System.Type,System.Web.UI.Control[])">
            <summary>
            Gets the selection.
            </summary>
            <param name="controls"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.SetSelection(System.Type,System.Web.UI.Control[],System.String)">
            <summary>
            Sets the selection.
            </summary>
            <param name="controls">The controls.</param>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:Rock.Reporting.DataTransform.Person.HasPictureFilter.GetExpression(System.Type,System.Object,System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the expression.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="parameterExpression">The parameter expression.</param>
            <param name="selection">The selection.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.HasPictureFilter.AppliesToEntityType">
            <summary>
            Gets the entity type that filter applies to.
            </summary>
            <value>
            The entity that filter applies to.
            </value>
        </member>
        <member name="P:Rock.Reporting.DataTransform.Person.HasPictureFilter.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Adapters.RadioButtonListAdapter">
            <summary>
            Control adapter for radio button list
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the beginning tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates the ending tag for the Web control in the markup that is transmitted to the target browser.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="M:Rock.Web.UI.Adapters.RadioButtonListAdapter.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the target-specific inner markup for the Web control to which the control adapter is attached.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> containing methods to render the target-specific output.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.FilterGroup">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterGroup.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterGroup.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.FilteredEntityTypeName">
            <summary>
            Gets or sets the name of entity type that is being filtered.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>
            The type of the filter.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterGroup.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is delete enabled.
            </summary>
            <value>
            <c>true</c> if this instance is delete enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.AddFilterClick">
            <summary>
            Occurs when [add filter click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.AddGroupClick">
            <summary>
            Occurs when [add group click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterGroup.DeleteGroupClick">
            <summary>
            Occurs when [delete group click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.FilterField">
            <summary>
            Report Filter control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterField.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.FilterField.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl" /> content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, for display on the client.
            </summary>
            <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilteredEntityTypeName">
            <summary>
            Gets or sets the name of entity type that is being filtered.
            </summary>
            <value>
            The name of the filtered entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilteredEntityType">
            <summary>
            Gets the type of the filtered entity.
            </summary>
            <value>
            The type of the filtered entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.FilterEntityTypeName">
            <summary>
            Gets or sets the name of the filter entity type.  This is a DataFilter type
            that applies to the FilteredEntityType
            </summary>
            <value>
            The name of the entity type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.Controls.FilterField"/> is expanded.
            </summary>
            <value>
              <c>true</c> if expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.FilterField.Selection">
            <summary>
            Gets or sets the selection.
            </summary>
            <value>
            The selection.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.FilterField.DeleteClick">
            <summary>
            Occurs when [delete click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.AttributeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeField.GetValue(System.Web.UI.Control)">
            <summary>
            Retrieves the value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="controlContainer">The container for the field value.</param>
            <returns>
            The value of the field bound to the <see cref="T:System.Web.UI.WebControls.BoundField" />.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.AttributeField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.BreadCrumb">
            <summary>
            Helper class to work with page navigation
            </summary>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Rock.Web.UI.BreadCrumb.#ctor(System.String,Rock.Web.PageReference,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.BreadCrumb"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pageReference">The page reference.</param>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Rock.Web.UI.BreadCrumb.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Web.UI.BreadCrumb"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.IDetailBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.IDetailBlock.ShowDetail(System.String,System.Int32)">
            <summary>
            Shows the detail.
            </summary>
            <param name="itemKey">The item key.</param>
            <param name="itemKeyValue">The item key value.</param>
        </member>
        <member name="T:Rock.Web.UI.IDimmableBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.IDimmableBlock.SetDimmed(System.Boolean)">
            <summary>
            Sets the dimmed.
            </summary>
            <param name="dimmed">if set to <c>true</c> [dimmed].</param>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CheckInActionComponent">
            <summary>
            An action component specifically for a check-in workflow
            </summary>
        </member>
        <member name="T:Rock.Workflow.ActionComponent">
            <summary>
            Base class for components that perform actions for a workflow
            </summary>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Workflow.ActionComponent"/> class.
            </summary>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Workflow.ActionComponent.GetAttributeValue(Rock.Model.WorkflowAction,System.String)">
            <summary>
            Gets the attribute value for the action
            </summary>
            <param name="action">The action.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Workflow.ActionComponent.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="P:Rock.Workflow.ActionComponent.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CheckInActionComponent.GetCheckInState(Rock.Model.WorkflowAction,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the state of the check in.
            </summary>
            <param name="action">The action.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CheckInActionComponent.SetCheckInState(Rock.Model.WorkflowAction,Rock.CheckIn.CheckInState)">
            <summary>
            Sets the state of the check in.
            </summary>
            <param name="action">The action.</param>
            <param name="checkInState">State of the check in.</param>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CalculateLastAttended">
            <summary>
            Calculates and updates the LastCheckIn property on checkin objects
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CalculateLastAttended.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterLocationGroupsByAbilityLevel">
            <summary>
            Removes location's groups for each selected family member
            if the person's ability level does not match the groups.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterLocationGroupsByAbilityLevel.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterLocationGroupsBySpecialNeeds">
            <summary>
            Removes the location's "special needs" groups for each selected family member
            if the person is not "special needs".  The filter can ALSO be configured to 
            remove normal (non-special needs) groups when the person is "special needs".
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterLocationGroupsBySpecialNeeds.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterLocationGroupsByLastName">
            <summary>
            Removes the location's groups for each selected family member that
            are not specific to their last name.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterLocationGroupsByLastName.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.CreateLabels">
            <summary>
            Saves the selected check-in data as attendance
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.CreateLabels.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterByGrade">
            <summary>
            Removes the grouptypes from each family member that are not specific to their grade
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterByGrade.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyPeople">
            <summary>
            Removes any person that does not have any group types
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyPeople.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyGroupTypes">
            <summary>
            Removes any group type that does not have any locations
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyGroupTypes.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyLocations">
            <summary>
            Removes any location that does not have any groups
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyLocations.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.SaveAttendance">
            <summary>
            Saves the selected check-in data as attendance
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.SaveAttendance.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.RemoveEmptyGroups">
            <summary>
            Removes any group that does not have any schedules
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.RemoveEmptyGroups.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadSchedules">
            <summary>
            Loads the schedules available for each group
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadSchedules.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadGroups">
            <summary>
            Loads the groups available for each location.
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadGroups.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterActiveLocations">
            <summary>
            Removes any locations that are not active
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterActiveLocations.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadLocations">
            <summary>
            Adds the locations for each members group types
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadLocations.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FilterByAge">
            <summary>
            Removes the grouptypes from each family member that are not specific to their age
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FilterByAge.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.LoadGroupTypes">
            <summary>
            Loads the group types allowed for each person in a family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.LoadGroupTypes.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindRelationships">
            <summary>
            Finds people with a relationship to members of family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindRelationships.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindFamilyMembers">
            <summary>
            Finds family members in a given family
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindFamilyMembers.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Workflow.Action.CheckIn.FindFamilies">
            <summary>
            Finds families based on a given search critieria (i.e. phone, barcode, etc)
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CheckIn.FindFamilies.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The workflow action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Web.UI.ViewStateList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rock.Web.UI.ViewStateList`1.internalListJson">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ViewStateList`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.RemoveEntity(System.Int32)">
            <summary>
            Removes the entity.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.RemoveEntity(System.Guid)">
            <summary>
            Removes the entity.
            </summary>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.Add(Rock.Data.Model{`0})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rock.Web.UI.ViewStateList`1.AddAll(System.Collections.Generic.List{`0})">
            <summary>
            Adds all.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Rock.Workflow.Action.ParseZebraLabel">
            <summary>
            Parse Zebra Label
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.ParseZebraLabel.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.TriggerCache">
            <summary>
            MEF Container class for WorkflowAction Componenets
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Workflow.TriggerCache"/> class.
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Rock.Workflow.TriggerCache.Triggers(System.String,Rock.Model.WorkflowTriggerType)">
            <summary>
            Triggerses the specified entity type name.
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <param name="triggerType">Type of the trigger.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the Entity Qualifier Column.
            </summary>
            <value>
            Entity Qualifier Column.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityTypeQualifierValue">
            <summary>
            Gets or sets the Entity Qualifier Value.
            </summary>
            <value>
            Entity Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowTypeId">
            <summary>
            Gets or sets the workflow type id.
            </summary>
            <value>
            The workflow type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowTriggerType">
            <summary>
            Gets or sets the type of the entity change.
            </summary>
            <value>
            The type of the entity change.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowName">
            <summary>
            Gets or sets the name of the workflow.
            </summary>
            <value>
            The name of the workflow.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowTrigger.WorkflowType">
            <summary>
            Gets or sets the type of the workflow.
            </summary>
            <value>
            The type of the workflow.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerConfiguration">
            <summary>
            EntityTypeWorkflowTrigger Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTriggerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTriggerConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowTriggerType">
            <summary>
            Type of workflow trigger
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PreSave">
            <summary>
            Pre Save
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PostSave">
            <summary>
            Post Save
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PreDelete">
            <summary>
            Pre Delete
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowTriggerType.PostDelete">
            <summary>
            Post Delete
            </summary>
        </member>
        <member name="T:Rock.Model.EntityType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.EntityType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.EntityType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.AssemblyName">
            <summary>
            Gets or sets the assembly name.
            </summary>
            <value>
            The assembly name.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.FriendlyName">
            <summary>
            Gets or sets the name of the friendly.
            </summary>
            <value>
            The name of the friendly.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsEntity">
            <summary>
            Gets or sets a value indicating whether this entity type implements the
            IEntity interface.
            </summary>
            <value>
              <c>true</c> if this instance is an entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsSecured">
            <summary>
            Gets or sets a value indicating whether this entity type implements the
            ISecured interface.
            </summary>
            <value>
            <c>true</c> if this instance is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.EntityType.IsSystem">
            <summary>
            Gets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Model.EntityTypeConfiguration">
            <summary>
            Entity Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.EntityTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EntityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.TaggedItemService">
            <summary>
            MetricValue POCO Service class
            </summary>
            <summary>
            TaggedItem Service class
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Guid)">
            <summary>
            Gets the tag by entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="ownerId">The owner id.</param>
            <param name="entityGuid">The entity GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TaggedItemService.Get(System.Int32,System.Guid)">
            <summary>
            Gets tag by tagId and entityId.
            </summary>
            <param name="tagId">The tag id.</param>
            <param name="entityGuid">The entity GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TaggedItemService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TaggedItemService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemService.#ctor(Rock.Data.IRepository{Rock.Model.TaggedItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TaggedItemService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemService.CanDelete(Rock.Model.TaggedItem,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.TagService">
            <summary>
            MetricValue POCO Service class
            </summary>
            <summary>
            Tag Service class
            </summary>
        </member>
        <member name="M:Rock.Model.TagService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the by entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="ownerId">The owner id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TagService.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the name of the by entity and.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="ownerId">The owner id.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.TagService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TagService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.TagService.#ctor(Rock.Data.IRepository{Rock.Model.Tag})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TagService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.TagService.CanDelete(Rock.Model.Tag,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.Tag">
            <summary>
            Tag POCO Entity.
            </summary>
        </member>
        <member name="T:Rock.Data.IOrdered">
            <summary>
            Represents a model that supports specific ordering
            </summary>
        </member>
        <member name="P:Rock.Data.IOrdered.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="M:Rock.Model.Tag.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Tag.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the Entity Qualifier Column.
            </summary>
            <value>
            Entity Qualifier Column.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityTypeQualifierValue">
            <summary>
            Gets or sets the Entity Qualifier Value.
            </summary>
            <value>
            Entity Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.OwnerId">
            <summary>
            Gets or sets the Owner Person Id.
            </summary>
            <value>
            Owner Id.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Tag.TaggedItems">
            <summary>
            Gets or sets the tagged items.
            </summary>
            <value>
            The tagged items.
            </value>
        </member>
        <member name="T:Rock.Model.TagConfiguration">
            <summary>
            Tag Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.TagConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.TagConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.TaggedItem">
            <summary>
            Tagged Ited POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.TaggedItem.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.TagId">
            <summary>
            Gets or sets the Attribute Id.
            </summary>
            <value>
            Attribute Id.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.EntityGuid">
            <summary>
            Gets or sets the Entity Guid.
            </summary>
            <value>
            Entity guid.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.Tag">
            <summary>
            Gets or sets the Tag
            </summary>
            <value>
            A <see cref="P:Rock.Model.TaggedItem.Tag"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.TaggedItem.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
        </member>
        <member name="T:Rock.Model.TaggedItemConfiguration">
            <summary>
            Attribute Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedTypeService">
            <summary>
            DefinedType Service class
            </summary>
            <summary>
            Defined Type POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.#ctor(Rock.Data.IRepository{Rock.Model.DefinedType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.CanDelete(Rock.Model.DefinedType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.GetByFieldTypeId(System.Nullable{System.Int32})">
            <summary>
            Gets Defined Types by Field Type Id
            </summary>
            <param name="fieldTypeId">Field Type Id.</param>
            <returns>An enumerable list of DefinedType objects.</returns>
        </member>
        <member name="M:Rock.Model.DefinedTypeService.GetByGuid(System.Guid)">
            <summary>
            Gets Defined Type by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>DefinedType object.</returns>
        </member>
        <member name="T:Rock.Model.DefinedTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeExtensionMethods.Clone(Rock.Model.DefinedType,System.Boolean)">
            <summary>
            Clones this DefinedType object to a new DefinedType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DefinedValueService">
            <summary>
            DefinedValue Service class
            </summary>
            <summary>
            Defined Value POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueService.#ctor(Rock.Data.IRepository{Rock.Model.DefinedValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueService.CanDelete(Rock.Model.DefinedValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByDefinedTypeId(System.Int32)">
            <summary>
            Gets Defined Values by Defined Type Id
            </summary>
            <param name="definedTypeId">Defined Type Id.</param>
            <returns>An enumerable list of DefinedValue objects.</returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByDefinedTypeGuid(System.Guid)">
            <summary>
            Gets the by defined type GUID.
            </summary>
            <param name="definedTypeGuid">The defined type GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetByGuid(System.Guid)">
            <summary>
            Gets Defined Value by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>DefinedValue object.</returns>
        </member>
        <member name="M:Rock.Model.DefinedValueService.GetIdByGuid(System.Guid)">
            <summary>
            Gets a Defined Value Id by GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DefinedValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueExtensionMethods.Clone(Rock.Model.DefinedValue,System.Boolean)">
            <summary>
            Clones this DefinedValue object to a new DefinedValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.ExceptionLogService">
            <summary>
            ExceptionLog Service class
            </summary>
            <summary>
            Exception Log POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ExceptionLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.#ctor(Rock.Data.IRepository{Rock.Model.ExceptionLog})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ExceptionLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.CanDelete(Rock.Model.ExceptionLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.GetByParentId(System.Nullable{System.Int32})">
            <summary>
            Gets Exception Logs by Parent Id
            </summary>
            <param name="parentId">Parent Id.</param>
            <returns>An enumerable list of ExceptionLog objects.</returns>
        </member>
        <member name="M:Rock.Model.ExceptionLogService.GetBySiteId(System.Nullable{System.Int32})">
            <summary>
            Gets Exception Logs by Site Id
            </summary>
            <param name="siteId">Site Id.</param>
            <returns>An enumerable list of ExceptionLog objects.</returns>
        </member>
        <member name="T:Rock.Model.ExceptionLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogExtensionMethods.Clone(Rock.Model.ExceptionLog,System.Boolean)">
            <summary>
            Clones this ExceptionLog object to a new ExceptionLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.FieldTypeService">
            <summary>
            FieldType Service class
            </summary>
            <summary>
            Field Type POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FieldTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeService.#ctor(Rock.Data.IRepository{Rock.Model.FieldType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FieldTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeService.CanDelete(Rock.Model.FieldType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.GetByName(System.String)">
            <summary>
            Gets Field Types by Name
            </summary>
            <param name="name">Name.</param>
            <returns>An enumerable list of FieldType objects.</returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.GetByGuid(System.Guid)">
            <summary>
            Gets Field Types by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>FieldType object.</returns>
        </member>
        <member name="M:Rock.Model.FieldTypeService.RegisterFieldTypes(System.String)">
            <summary>
            Gets a list of ISecured entities (all models) that have not yet been registered and adds them
            as an entity type.
            </summary>
            <param name="physWebAppPath">the physical path of the web application</param>
        </member>
        <member name="T:Rock.Model.FieldTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeExtensionMethods.Clone(Rock.Model.FieldType,System.Boolean)">
            <summary>
            Clones this FieldType object to a new FieldType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.MetricValue">
            <summary>
            MetricValue POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValue"/> class.
            </summary>
        </member>
        <member name="P:Rock.Model.MetricValue.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.MetricId">
            <summary>
            Gets or sets the MetricId.
            </summary>
            <value>
            MetricId.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Value">
            <summary>
            Gets or sets the Value.
            </summary>
            <value>
            Value.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.xValue">
            <summary>
            Gets or sets the xValue.
            </summary>
            <value>
            xValue.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.isDateBased">
            <summary>
            Gets or sets the isDateBased flag.
            </summary>
            <value>
            isDateBased.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Label">
            <summary>
            Gets or sets the Label.
            </summary>
            <value>
            Label.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.Metric">
            <summary>
            Gets or sets the metric.
            </summary>
            <value>
            The metric.
            </value>
        </member>
        <member name="P:Rock.Model.MetricValue.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricValueConfiguration">
            <summary>
            MetricValue Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.MetricValueService">
            <summary>
            MetricValue Service class
            </summary>
            <summary>
            MetricValue POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueService.#ctor(Rock.Data.IRepository{Rock.Model.MetricValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricValueService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueService.CanDelete(Rock.Model.MetricValue,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.MetricValueService.GetByMetricId(System.Nullable{System.Int32})">
            <summary>
            Gets MetricValues by MetricId
            </summary>
            <param name="metricId">metricId.</param>
            <returns>An enumerable list of MetricValue objects.</returns>
        </member>
        <member name="M:Rock.Model.MetricValueService.GetByGuid(System.Guid)">
            <summary>
            Gets MetricValue by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>MetricValue object.</returns>
        </member>
        <member name="T:Rock.Model.MetricValueExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.MetricValueExtensionMethods.Clone(Rock.Model.MetricValue,System.Boolean)">
            <summary>
            Clones this MetricValue object to a new MetricValue object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.Metric">
            <summary>
            Metric POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Metric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Metric.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Type">
            <summary>
            Gets or sets the Type.
            </summary>
            <value>
            Type.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Category">
            <summary>
            Gets or sets the Category.
            </summary>
            <value>
            Category.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Title">
            <summary>
            Gets or sets the Title.
            </summary>
            <value>
            Title.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Subtitle">
            <summary>
            Gets or sets the Subtitle.
            </summary>
            <value>
            Subtitle.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MinValue">
            <summary>
            Gets or sets the MinValue.
            </summary>
            <value>
            MinValue.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MaxValue">
            <summary>
            Gets or sets the MaxValue.
            </summary>
            <value>
            MaxValue.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.CollectionFrequencyValueId">
            <summary>
            Gets or sets the CollectionFrequency.
            </summary>
            <value>
            CollectionFrequency.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.LastCollectedDateTime">
            <summary>
            Gets or sets the LastCollected Date Time.
            </summary>
            <value>
            LastCollected Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>
            Source.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.SourceSQL">
            <summary>
            Gets or sets the SourceSQL.
            </summary>
            <value>
            SourceSQL.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.MetricValues">
            <summary>
            Gets or sets the Metric Values.
            </summary>
            <value>
            Collection of Metric Values.
            </value>
        </member>
        <member name="P:Rock.Model.Metric.CollectionFrequencyValue">
            <summary>
            Gets or sets the CollectionFrequency.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.MetricConfiguration">
            <summary>
            Metric Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.MetricConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.MetricConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.ExceptionLog">
            <summary>
            Exception Log POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ParentId">
            <summary>
            Gets or sets the Parent Id.
            </summary>
            <value>
            Parent Id of the exeption, used for linking inner exceptions..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.SiteId">
            <summary>
            Gets or sets the Site Id.
            </summary>
            <value>
            Site Id that the exception occurred on..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Site">
            <summary>
            Gets or sets the site.
            </summary>
            <value>
            Site that the exception occurred.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id that the exception occurred on..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            The Page that the exception occurred on.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ExceptionDateTime">
            <summary>
            Gets or sets the exception date time.
            </summary>
            <value>
            The exception date time.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.CreatedByPersonId">
            <summary>
            Gets or sets the Created By Person Id.
            </summary>
            <value>
            Created By Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.CreatedByPerson">
            <summary>
            Gets or sets the created by person.
            </summary>
            <value>
            The created by person.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.HasInnerException">
            <summary>
            Gets or sets the Has Inner Exception.
            </summary>
            <value>
            Whether the exception has an inner exception..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.StatusCode">
            <summary>
            Gets or sets the Status Code.
            </summary>
            <value>
            Status code that would have been thrown (404, 500, etc).
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ExceptionType">
            <summary>
            Gets or sets the Exception Type.
            </summary>
            <value>
            Name of the exception.
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            The exception message..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>
            What assembly the exception occurred in..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.StackTrace">
            <summary>
            Gets or sets the Stack Trace.
            </summary>
            <value>
            The stack trace that was produced..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.PageUrl">
            <summary>
            Gets or sets the Page Url.
            </summary>
            <value>
            The URL of the page that generated the exception..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.ServerVariables">
            <summary>
            Gets or sets the Server Variables.
            </summary>
            <value>
            Server variables at the time of the exception..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.QueryString">
            <summary>
            Gets or sets the Query String.
            </summary>
            <value>
            Full query string..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Form">
            <summary>
            Gets or sets the Form.
            </summary>
            <value>
            Form items at the time of the exception..
            </value>
        </member>
        <member name="P:Rock.Model.ExceptionLog.Cookies">
            <summary>
            Gets or sets the Cookies.
            </summary>
            <value>
            Cookies at the time of the exception..
            </value>
        </member>
        <member name="T:Rock.Model.ExceptionLogConfiguration">
            <summary>
            Exception Log Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ExceptionLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ExceptionLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.RangeValue`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Model.RangeValue`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.RangeValue`1"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="P:Rock.Model.RangeValue`1.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Rock.Model.RangeValue`1.To">
            <summary>
            Gets or sets to.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="T:Rock.Model.ServiceLogService">
            <summary>
            ServiceLog Service class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogService.#ctor(Rock.Data.IRepository{Rock.Model.ServiceLog})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogService.CanDelete(Rock.Model.ServiceLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.ServiceLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogExtensionMethods.Clone(Rock.Model.ServiceLog,System.Boolean)">
            <summary>
            Clones this ServiceLog object to a new ServiceLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.TaggedItemExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.TaggedItemExtensionMethods.Clone(Rock.Model.TaggedItem,System.Boolean)">
            <summary>
            Clones this TaggedItem object to a new TaggedItem object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.TagExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.TagExtensionMethods.Clone(Rock.Model.Tag,System.Boolean)">
            <summary>
            Clones this Tag object to a new Tag object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.LocationService">
            <summary>
            Location Service class
            </summary>
            <summary>
            Location POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.LocationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LocationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.LocationService.#ctor(Rock.Data.IRepository{Rock.Model.Location})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LocationService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.LocationService.CanDelete(Rock.Model.Location,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.LocationService.GetByFullAddress(System.String)">
            <summary>
            Gets Location by Full Address
            </summary>
            <param name="fullAddress">Full Address.</param>
            <returns>
            Location object.
            </returns>
        </member>
        <member name="M:Rock.Model.LocationService.GetByStreet1AndStreet2AndCityAndStateAndZip(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets Location by Street 1 And Street 2 And City And State And Zip
            </summary>
            <param name="street1">Street 1.</param>
            <param name="street2">Street 2.</param>
            <param name="city">City.</param>
            <param name="state">State.</param>
            <param name="zip">Zip.</param>
            <returns>Location object.</returns>
        </member>
        <member name="M:Rock.Model.LocationService.Standardize(Rock.Model.Location,System.Nullable{System.Int32})">
            <summary>
            Standardizes the specified <see cref="T:Rock.Model.Location"/>
            </summary>
            <param name="location">The location.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Model.LocationService.Geocode(Rock.Model.Location,System.Nullable{System.Int32})">
            <summary>
            Geocodes the specified <see cref="T:Rock.Model.Location"/>
            </summary>
            <param name="location">The location.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Model.LocationService.GetByLocation(Rock.Model.Location,System.Nullable{System.Int32})">
            <summary>
            Looks for an existing location model first by searching for a raw value, and then by the street, 
            city, state, and zip of the specified location stub.  If a match is not found, then a new location
            block is returned.
            </summary>
            <param name="location">The location.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.LocationExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.LocationExtensionMethods.Clone(Rock.Model.Location,System.Boolean)">
            <summary>
            Clones this Location object to a new Location object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupTypeLocationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.GroupTypeId">
            <summary>
            Gets or sets the group type id.
            </summary>
            <value>
            The group type id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.LocationTypeValueId">
            <summary>
            Gets or sets the location type id.
            </summary>
            <value>
            The location type id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.GroupType">
            <summary>
            Gets or sets the type of the group.
            </summary>
            <value>
            The type of the group.
            </value>
        </member>
        <member name="P:Rock.Model.GroupTypeLocationType.LocationTypeValue">
            <summary>
            Gets or sets the type of the location.
            </summary>
            <value>
            The type of the location.
            </value>
        </member>
        <member name="T:Rock.Model.GroupTypeLocationTypeConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeLocationTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeLocationTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Campus">
            <summary>
            Campus POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Campus.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Campus.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System indicates whether or not the campus is part of the core framework/system.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Given Name.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.LocationId">
            <summary>
            Gets or sets the location id.
            </summary>
            <value>
            The location id.
            </value>
        </member>
        <member name="P:Rock.Model.Campus.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="T:Rock.Model.CampusConfiguration">
            <summary>
            Campus Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.CampusConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CampusConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.CampusService">
            <summary>
            Campus Service class
            </summary>
        </member>
        <member name="M:Rock.Model.CampusService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CampusService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CampusService.#ctor(Rock.Data.IRepository{Rock.Model.Campus})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.CampusService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.CampusService.CanDelete(Rock.Model.Campus,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.CampusExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.CampusExtensionMethods.Clone(Rock.Model.Campus,System.Boolean)">
            <summary>
            Clones this Campus object to a new Campus object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.EmailTemplateService">
            <summary>
            EmailTemplate Service class
            </summary>
            <summary>
            Email Template POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplateService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EmailTemplateService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplateService.#ctor(Rock.Data.IRepository{Rock.Model.EmailTemplate})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EmailTemplateService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplateService.CanDelete(Rock.Model.EmailTemplate,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.EmailTemplateService.GetByGuid(System.Guid)">
            <summary>
            Gets Email Template by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>EmailTemplate object.</returns>
        </member>
        <member name="M:Rock.Model.EmailTemplateService.GetByPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Email Templates by Person Id
            </summary>
            <param name="personId">Person Id.</param>
            <returns>An enumerable list of EmailTemplate objects.</returns>
        </member>
        <member name="T:Rock.Model.EmailTemplateExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplateExtensionMethods.Clone(Rock.Model.EmailTemplate,System.Boolean)">
            <summary>
            Clones this EmailTemplate object to a new EmailTemplate object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonMergedService">
            <summary>
            PersonMerged Service class
            </summary>
            <summary>
            Person Trail POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMergedService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonMergedService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMergedService.#ctor(Rock.Data.IRepository{Rock.Model.PersonMerged})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonMergedService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMergedService.CanDelete(Rock.Model.PersonMerged,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonMergedService.GetByCurrentId(System.Int32)">
            <summary>
            Gets Person Trails by Current Id
            </summary>
            <param name="currentId">Current Id.</param>
            <returns>An enumerable list of PersonMerged objects.</returns>
        </member>
        <member name="M:Rock.Model.PersonMergedService.Current(System.String)">
            <summary>
            Get's the current person Guid
            </summary>
            <param name="publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonMergedService.Current(System.Int32)">
            <summary>
            Get's the current person id
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonMergedExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMergedExtensionMethods.Clone(Rock.Model.PersonMerged,System.Boolean)">
            <summary>
            Clones this PersonMerged object to a new PersonMerged object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonService">
            <summary>
            Person Service class
            </summary>
            <summary>
            Person POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonService.#ctor(Rock.Data.IRepository{Rock.Model.Person})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonService.CanDelete(Rock.Model.Person,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable">
            <summary>
            Gets a queryable list of people
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.Boolean)">
            <summary>
            Gets a queryable list of people
            </summary>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.String)">
            <summary>
            Gets a list of all people with eager loading of properties specfied in includes
            </summary>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Queryable(System.String,System.Boolean)">
            <summary>
            Gets a list of all people with eager loading of properties specfied in includes
            </summary>
            <param name="includes">The includes.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEmail(System.String,System.Boolean)">
            <summary>
            Gets People by Email
            </summary>
            <param name="email">Email.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByMaritalStatusId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Marital Status Id
            </summary>
            <param name="maritalStatusId">Marital Status Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByPersonStatusId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Person Status Id
            </summary>
            <param name="personStatusId">Person Status Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordStatusId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Record Status Id
            </summary>
            <param name="recordStatusId">Record Status Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordStatusReasonId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Record Status Reason Id
            </summary>
            <param name="recordStatusReasonId">Record Status Reason Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByRecordTypeId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Record Type Id
            </summary>
            <param name="recordTypeId">Record Type Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetBySuffixId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Suffix Id
            </summary>
            <param name="suffixId">Suffix Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByTitleId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets People by Title Id
            </summary>
            <param name="titleId">Title Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Person objects.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByFullName(System.String,System.Boolean)">
            <summary>
            Gets a list of people with a matching full name
            </summary>
            <param name="fullName">The full name.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByPhonePartial(System.String,System.Boolean)">
            <summary>
            Gets a list of people with a phone number that contains the specified partial number.
            </summary>
            <param name="partialPhoneNumber">The partial phone number.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetFamilyMembers(Rock.Model.Person,System.Boolean)">
            <summary>
            Gets the family members.
            </summary>
            <param name="person">The person.</param>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEncryptedID(System.String)">
            <summary>
            Gets the by encrypted ID.
            </summary>
            <param name="encryptedID">The encrypted ID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.Get(System.Int32,System.Boolean)">
            <summary>
            Gets Person by Id
            </summary>
            <param name="id">The id.</param>
            <param name="followTrail">if set to <c>true</c> follow the merge trail.</param>
            <returns>
            Person object.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetByEncryptedKey(System.String,System.Boolean)">
            <summary>
            Gets Person by Guid
            </summary>
            <param name="encryptedKey">The encrypted key.</param>
            <param name="followTrail">if set to <c>true</c> follow the merge trail</param>
            <returns>
            Person object.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetSpouse(Rock.Model.Person)">
            <summary>
            Gets the spouse.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.SaveUserPreference(Rock.Model.Person,System.String,System.Collections.Generic.List{System.String},System.Nullable{System.Int32})">
            <summary>
            Saves preference for a given person, and key
            </summary>
            <param name="person"></param>
            <param name="key"></param>
            <param name="values"></param>
            <param name="personId"></param>
        </member>
        <member name="M:Rock.Model.PersonService.GetUserPreference(Rock.Model.Person,System.String)">
            <summary>
            Gets preference for a given person, and key
            </summary>
            <param name="person"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonService.GetUserPreferences(Rock.Model.Person)">
            <summary>
            Gets all preferences for a given person
            </summary>
            <param name="person"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.Clone(Rock.Model.Person,System.Boolean)">
            <summary>
            Clones this Person object to a new Person object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.GetFamilyMembers(Rock.Model.Person,System.Boolean)">
            <summary>
            Gets the Family Members.
            </summary>
            <param name="person">The person.</param>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PersonExtensionMethods.GetSpouse(Rock.Model.Person)">
            <summary>
            Gets the Spouse.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PersonMerged">
            <summary>
            Person Trail POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMerged.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonMerged.CurrentId">
            <summary>
            Gets or sets the Current Id.
            </summary>
            <value>
            Current Id.
            </value>
        </member>
        <member name="P:Rock.Model.PersonMerged.CurrentGuid">
            <summary>
            Gets or sets the Current Guid.
            </summary>
            <value>
            Current Guid.
            </value>
        </member>
        <member name="P:Rock.Model.PersonMerged.CurrentPublicKey">
            <summary>
            Gets a publicly viewable unique key for the model.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonMergedConfiguration">
            <summary>
            Person Trail Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonMergedConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonMergedConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonViewed">
            <summary>
            Person Viewed POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewed.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewerPersonId">
            <summary>
            Gets or sets the Viewer Person Id.
            </summary>
            <value>
            Viewer Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.TargetPersonId">
            <summary>
            Gets or sets the Target Person Id.
            </summary>
            <value>
            Target Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewDateTime">
            <summary>
            Gets or sets the View Date Time.
            </summary>
            <value>
            View Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.IpAddress">
            <summary>
            Gets or sets the Ip Address.
            </summary>
            <value>
            Ip Address.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>
            Source.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.ViewerPerson">
            <summary>
            Gets or sets the Viewer Person.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.PersonViewed.TargetPerson">
            <summary>
            Gets or sets the Target Person.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.PersonViewedConfiguration">
            <summary>
            Person Viewed Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonViewedConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonViewedService">
            <summary>
            PersonViewed Service class
            </summary>
            <summary>
            Person Viewed POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonViewedService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedService.#ctor(Rock.Data.IRepository{Rock.Model.PersonViewed})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonViewedService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedService.CanDelete(Rock.Model.PersonViewed,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PersonViewedService.GetByTargetPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Person Vieweds by Target Person Id
            </summary>
            <param name="targetPersonId">Target Person Id.</param>
            <returns>An enumerable list of PersonViewed objects.</returns>
        </member>
        <member name="M:Rock.Model.PersonViewedService.GetByViewerPersonId(System.Nullable{System.Int32})">
            <summary>
            Gets Person Vieweds by Viewer Person Id
            </summary>
            <param name="viewerPersonId">Viewer Person Id.</param>
            <returns>An enumerable list of PersonViewed objects.</returns>
        </member>
        <member name="T:Rock.Model.PersonViewedExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PersonViewedExtensionMethods.Clone(Rock.Model.PersonViewed,System.Boolean)">
            <summary>
            Clones this PersonViewed object to a new PersonViewed object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.PhoneNumberService">
            <summary>
            PhoneNumber Service class
            </summary>
            <summary>
            Phone Number POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PhoneNumberService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.#ctor(Rock.Data.IRepository{Rock.Model.PhoneNumber})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PhoneNumberService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.CanDelete(Rock.Model.PhoneNumber,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.PhoneNumberService.GetByPersonId(System.Int32)">
            <summary>
            Gets Phone Numbers by Person Id
            </summary>
            <param name="personId">Person Id.</param>
            <returns>An enumerable list of PhoneNumber objects.</returns>
        </member>
        <member name="T:Rock.Model.PhoneNumberExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberExtensionMethods.Clone(Rock.Model.PhoneNumber,System.Boolean)">
            <summary>
            Clones this PhoneNumber object to a new PhoneNumber object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.DiscService">
            <summary>
            DISC Class for administering and scoring a DISC Assessment
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.questionData">
            <summary>
            Raw question data. This data format comes from source disc.js file from Greg Wiens.
            </summary>
        </member>
        <member name="M:Rock.Model.DiscService.GetResponses">
            <summary>
            Fetch a List of <see cref="T:Rock.Model.DiscService.ResponseItem"/> for display/processing.
            </summary>
            <returns>a List of <see cref="T:Rock.Model.DiscService.ResponseItem"/>.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.Score(System.Collections.Generic.List{System.String})">
            <summary>
            Scores the test.
            </summary>
            <param name="selectedResponseIDs">a List of ResponseIDs to be scored.</param>
            <returns>a struct TestResults object with final scores.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.AttributeValueLookup(Rock.Model.Person,System.String)">
            <summary>
            Fetches DISC scores.
            </summary>
            <param name="person"></param>
            <param name="attrib"></param>
            <returns>The DISC score, if one is saved. Otherwise, returns 0.</returns>
        </member>
        <member name="M:Rock.Model.DiscService.LoadSavedAssessmentResults(Rock.Model.Person)">
            <summary>
            Loads and returns saved Assessment scores for the Person.
            </summary>
            <param name="person">The Person to get the scores for.</param>
            <returns>AssessmentResults</returns>
        </member>
        <member name="M:Rock.Model.DiscService.SaveAssessmentResults(Rock.Model.Person,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Saves Assessment results to a Person's PersonProperties
            </summary>
            <param name="person"></param>
            <param name="ABd">Adaptive Behavior D</param>
            <param name="ABi">Adaptive Behavior I</param>
            <param name="ABs">Adaptive Behavior S</param>
            <param name="ABc">Adaptive Behavior C</param>
            <param name="NBd">Natural Behavior D</param>
            <param name="NBi">Natural Behavior I</param>
            <param name="NBs">Natural Behavior S</param>
            <param name="NBc">Natural Behavior C</param>
        </member>
        <member name="T:Rock.Model.DiscService.AssessmentResults">
            <summary>
            The AssessmentResults struct used to return the final assessment scores
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.AdaptiveBehaviorD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.NaturalBehaviorD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.AssessmentResults.LastSaveDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Model.DiscService.ResponseItem">
            <summary>
            An individual response to a question. 
            <para>Properties: QuestionNumber, ResponseNumber, ResponseID (QuestionNumber + ResponseNumber), ResponseText, MostScore, and LeastScore.</para>
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.QuestionNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.ResponseText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.MostScore">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Model.DiscService.ResponseItem.LeastScore">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Data.AlternateKeyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.AlternateKeyAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Data.FriendlyTypeNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.FriendlyTypeNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.FriendlyTypeNameAttribute"/> class.
            </summary>
            <param name="friendlyTypeName">Name of the friendly type.</param>
        </member>
        <member name="F:Rock.Data.FriendlyTypeNameAttribute.FriendlyTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Data.NotAuditedAttribute">
            <summary>
            Custom attribute used to decorate model classes or specific model properties that should 
            not be audited.  If attributed to class, no class changes will be audited, if attributed
            to properties, changes will be audited only if properties withouth attribute have changed.
            This would typically include logging tables (i.e. Audit, Exception, UserLogin-LastActivityDate, etc)
            Specific properties can also 
            </summary>
        </member>
        <member name="T:Rock.Data.IRepository`1">
            <summary>
            Repository interface for POCO models
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Data.IRepository`1.AsQueryable">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.AsQueryable(System.String)">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable`1"/> list of all models, 
            with optional eager loading of properties specified in includes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.GetAll">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of all models.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of models matching the where expression
            </summary>
            <param name="where">where expression</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the only model matching the where expression.  Throws an exception if more than one
            model match.
            </summary>
            <param name="where">where expression</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the first model matching the where expression.  Throws an exception if no models 
            match.
            </summary>
            <param name="where">where expression</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the first model matching the where expression.  Returns null if no models 
            match.
            </summary>
            <param name="where">where expression</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.DateCreated(`0)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.DateCreated(System.Int32,System.Int32)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.DateLastModified(`0)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.DateLastModified(System.Int32,System.Int32)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.CreatedByPersonId(`0)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.CreatedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.LastModifiedByPersonId(`0)">
            <summary>
            The person id who last modified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.LastModifiedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who last modified the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.Audits(`0)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.Audits(System.Int32,System.Int32)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.IRepository`1.Attach(`0)">
            <summary>
            Attaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.IRepository`1.SetValues(`0,`0)">
            <summary>
            Sets the values.
            </summary>
            <param name="sourceItem">The source item.</param>
            <param name="targetItem">The target item.</param>
        </member>
        <member name="M:Rock.Data.IRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.IRepository`1.Save(System.Nullable{System.Int32},System.Collections.Generic.List{Rock.Model.Audit}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Saves any changes made in the current context
            </summary>
            <param name="PersonId">The person id.</param>
            <param name="audits">The audits.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.ExecuteQuery(System.String,System.Object[])">
            <summary>
            Creates a raw query that will return entities
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository`1.SetConfigurationValue(System.String,System.String)">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Data.IRepository">
            <summary>
            Repository interface for non entity specific methods
            </summary>
        </member>
        <member name="M:Rock.Data.IRepository.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            Creates a raw query that will return elements of the given type.  The
            type can be any type that has properties that match the names of the columns
            returned from the query, or can be a simple primitive type. The type does
            not have to be an entity type. 
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository.GetDataSet(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data set.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data table.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.IRepository.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Executes a command.
            </summary>
            <param name="command">The command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Data.RepositoryFactory`1">
            <summary>
            Static class to support factory method implementation.
            </summary>
        </member>
        <member name="M:Rock.Data.RepositoryFactory`1.FindRepository">
            <summary>
            Finds a repository object based on app settings in web/app.config file.
            </summary>
            <returns>
            IRepository of type T
            </returns>
        </member>
        <member name="T:Rock.Data.RepositoryFactory">
            <summary>
            Static class to support factory method implementation of repository for non entity specific methods
            </summary>
        </member>
        <member name="M:Rock.Data.RepositoryFactory.FindRepository">
            <summary>
            Finds the repository.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Data.RockPluginDBInitializer`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Data.RockPluginDBInitializer`1.InitializeDatabase(`0)">
            <summary>
            Initializes the database.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Data.RockTransactionScope">
            <summary>
            Use to wrap a block in a StartTransaction/Commit/Rollback
            </summary>
        </member>
        <member name="M:Rock.Data.RockTransactionScope.WrapTransaction(System.Action)">
            <summary>
            Executes a block of code within a Start/Commit/Rollback
            </summary>
            <example>  
            <code> 
             RockTransactionScope.WrapTransaction( () =>
             {
                 marketingCampaignAdTypeService.Save( marketingCampaignAdType, CurrentPersonId );
                 foreach (var attribute in attributes)
                 {
                   attributeService.Save( attribute, CurrentPersonId );
                 };  
             });    
            </code> 
            </example>
            <param name="action">A.</param>
        </member>
        <member name="T:Rock.Data.RouteAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.RouteAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:Rock.Data.Service">
            <summary>
            Service class for non entity specific methods
            </summary>
        </member>
        <member name="M:Rock.Data.Service.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.Service`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.Service.#ctor(Rock.Data.IRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.Service`1"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="M:Rock.Data.Service.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return elements of the given type.  The
            type can be any type that has properties that match the names of the columns
            returned from the query, or can be a simple primitive type. The type does
            not have to be an entity type. The results of this query are never tracked
            by the context even if the type of object returned is an entity type. Use
            the SqlQuery(System.String,System.Object[]) method
            to return entities that are tracked by the context.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service.GetDataSet(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data set.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data table.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data reader.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.Service.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Executes the SQL command.
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Rock.Data.Service.Repository">
            <summary>
            Gets the Repository.
            </summary>
        </member>
        <member name="T:Rock.Extension.IComponentData">
            <summary>
            Component Metadata
            </summary>
        </member>
        <member name="P:Rock.Extension.IComponentData.ComponentName">
            <summary>
            Gets the name of the component.
            </summary>
            <value>
            The name of the component.
            </value>
        </member>
        <member name="T:Rock.Address.Geocode.TelaAtlas">
            <summary>
            The EZ-Locate geocoding service from <a href="http://www.geocode.com/">Tele Atlas</a>
            </summary>
        </member>
        <member name="T:Rock.Address.GeocodeComponent">
            <summary>
            The base class for all address geocoding components
            </summary>
        </member>
        <member name="M:Rock.Address.GeocodeComponent.Geocode(Rock.Model.Location,System.String@)">
            <summary>
            Abstract method for geocoding the specified address.  Derived classes should implement
            this method to geocode the address.
            </summary>
            <param name="location">The location.</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the address was standardized succesfully
            </returns>
        </member>
        <member name="M:Rock.Address.Geocode.TelaAtlas.Geocode(Rock.Model.Location,System.String@)">
            <summary>
            Geocodes the specified address.
            </summary>
            <param name="location">The location.</param>
            <param name="result">The result.</param>
            <returns>
            True/False value of whether the address was standardized was succesfully
            </returns>
        </member>
        <member name="T:Rock.Extension.ComponentDescription">
            <summary>
            Helper class for wrapping the properties of a MEF class to use in databinding
            </summary>
        </member>
        <member name="M:Rock.Extension.ComponentDescription.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{System.String,Rock.Extension.Component})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Extension.ComponentDescription"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="service">The service.</param>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Extension.ComponentDescription.IsActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Extension.ComponentDescription"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Address.Standardize.MelissaData">
            <summary>
            The AddressCheck service from <a href="http://www.melissadata.com/">Melissa Data</a>
            </summary>
        </member>
        <member name="T:Rock.Address.StandardizeComponent">
            <summary>
            The base class for all address standardization components
            </summary>
        </member>
        <member name="M:Rock.Address.StandardizeComponent.Standardize(Rock.Model.Location,System.String@)">
            <summary>
            Abstract method for standardizing the specified address.  Derived classes should implement
            this method to standardize the address.
            </summary>
            <param name="location">The location.</param>
            <param name="result">The result code unique to the service.</param>
            <returns>
            True/False value of whether the address was standardized succesfully
            </returns>
        </member>
        <member name="M:Rock.Address.Standardize.MelissaData.Standardize(Rock.Model.Location,System.String@)">
            <summary>
            Standardizes the address
            </summary>
            <param name="location">The location.</param>
            <param name="result">The AddressCheck result code</param>
            <returns>
            True/False value of whether the address was standardized succesfully
            </returns>
        </member>
        <member name="T:Rock.Address.Standardize.StrikeIron">
            <summary>
            The USAddressVerification service from <a href="http://www.strikeiron.com/Home.aspx">StrikeIron</a>
            </summary>
        </member>
        <member name="M:Rock.Address.Standardize.StrikeIron.Standardize(Rock.Model.Location,System.String@)">
            <summary>
            Standardizes the specified address.
            </summary>
            <remarks>
            The StrikeIron address verification will also attempt to geocode the address.  If this 
            geocode is succesful, the Geocode information of the address will be updated also.
            </remarks>
            <param name="location">The location.</param>
            <param name="result">The result.</param>
            <returns>
            True/False value of whether the address was standardized was succesfully
            </returns>
        </member>
        <member name="T:Rock.Address.StandardizeContainer">
            <summary>
            Singleton class that uses MEF to load and cache all of the StandardizeComponent classes
            </summary>
        </member>
        <member name="P:Rock.Address.StandardizeContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Address.Geocode.StrikeIron">
            <summary>
            The USAddressVerification service from <a href="http://www.strikeiron.com/Home.aspx">StrikeIron</a>
            </summary>
        </member>
        <member name="M:Rock.Address.Geocode.StrikeIron.Geocode(Rock.Model.Location,System.String@)">
            <summary>
            Geocodes the specified address.
            </summary>
            <param name="location">The location.</param>
            <param name="result">The result.</param>
            <returns>
            True/False value of whether the address was standardized was succesfully
            </returns>
        </member>
        <member name="T:Rock.Address.Geocode.ServiceObjects">
            <summary>
            Geocoder service from <a href="http://www.serviceobjects.com">ServiceObjects</a>
            </summary>
        </member>
        <member name="M:Rock.Address.Geocode.ServiceObjects.Geocode(Rock.Model.Location,System.String@)">
            <summary>
            Geocodes the specified address.
            </summary>
            <param name="location">The location.</param>
            <param name="result">The ServiceObjects result.</param>
            <returns>
            True/False value of whether the address was standardized succesfully
            </returns>
        </member>
        <member name="T:Rock.Model.Auth">
            <summary>
            Auth POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Auth.IsAllowedByDefault(System.String)">
            <summary>
            The default authorization for a specific action.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Auth.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Auth.EntityTypeId">
            <summary>
            Gets or sets the Entity Type Id.
            </summary>
            <value>
            Entity Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.EntityId">
            <summary>
            Gets or sets the Entity Id.
            </summary>
            <value>
            Entity Id.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Action">
            <summary>
            Gets or sets the Action.
            </summary>
            <value>
            Action.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.AllowOrDeny">
            <summary>
            Gets or sets the Allow Or Deny.
            </summary>
            <value>
            A = Allow, D = Deny.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.SpecialRole">
            <summary>
            Gets or sets the Special Role.
            </summary>
            <value>
            Enum[SpecialRole].
            </value>
        </member>
        <member name="P:Rock.Model.Auth.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.GroupId">
            <summary>
            Gets or sets the Group Id.
            </summary>
            <value>
            Group Id.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Group">
            <summary>
            Gets or sets the Group.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Group"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.Person">
            <summary>
            Gets or sets the Person.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Auth.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.AuthConfiguration">
            <summary>
            Auth Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AuthConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AuthConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.SpecialRole">
            <summary>
            Authorization for a special group of users not defined by a specific role or person
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.None">
            <summary>
            No special role
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllUsers">
            <summary>
            Authorize all users
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllAuthenticatedUsers">
            <summary>
            Authorize all authenticated users
            </summary>
        </member>
        <member name="F:Rock.Model.SpecialRole.AllUnAuthenticatedUsers">
            <summary>
            Authorize all un-authenticated users
            </summary>
        </member>
        <member name="T:Rock.Model.BlockType">
            <summary>
            Block Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.BlockType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.BlockType.Path">
            <summary>
            Gets or sets the Path.
            </summary>
            <value>
            Path.
            </value>
        </member>
        <member name="P:Rock.Model.BlockType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.BlockType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.BlockType.Blocks">
            <summary>
            Gets or sets the Blocks.
            </summary>
            <value>
            Collection of Blocks.
            </value>
        </member>
        <member name="T:Rock.Model.BlockTypeConfiguration">
            <summary>
            Block Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Block">
            <summary>
            Block POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Block.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Block.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Block.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Layout">
            <summary>
            Gets or sets the Layout.
            </summary>
            <value>
            Layout.
            </value>
        </member>
        <member name="P:Rock.Model.Block.BlockTypeId">
            <summary>
            Gets or sets the Block Type Id.
            </summary>
            <value>
            Block Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Zone">
            <summary>
            Gets or sets the Zone.
            </summary>
            <value>
            Zone.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Block.OutputCacheDuration">
            <summary>
            Gets or sets the Output Cache Duration.
            </summary>
            <value>
            Output Cache Duration.
            </value>
        </member>
        <member name="P:Rock.Model.Block.BlockType">
            <summary>
            Gets or sets the Block Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Block.BlockType"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Block.Page">
            <summary>
            Gets or sets the Page.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Block.Page"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Block.SiteCache">
            <summary>
            Gets or sets the site cache.  This is only used by security to determine the parent authority
            when the block is associated with a layout instead of a particular page.  The UI will set 
            this property before calling the security dialog
            </summary>
            <value>
            The site cache.
            </value>
        </member>
        <member name="P:Rock.Model.Block.BlockLocation">
            <summary>
            Gets the block location.
            </summary>
            <value>
            The block location.
            </value>
        </member>
        <member name="P:Rock.Model.Block.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.BlockConfiguration">
            <summary>
            Block Instance Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BlockConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BlockConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.BlockLocation">
            <summary>
            The location of the block 
            </summary>
        </member>
        <member name="F:Rock.Model.BlockLocation.Layout">
            <summary>
            Block is located in the layout (will be rendered for every page using the layout)
            </summary>
        </member>
        <member name="F:Rock.Model.BlockLocation.Page">
            <summary>
            Block is located on the page
            </summary>
        </member>
        <member name="T:Rock.Model.BinaryFile">
            <summary>
            File POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.BinaryFile.MakePermanent(System.String)">
            <summary>
            Makes a comma delimited list of the permanent.
            </summary>
            <param name="commaDelimitedIds">The comma delimited ids.</param>
        </member>
        <member name="P:Rock.Model.BinaryFile.IsTemporary">
            <summary>
            Gets or sets the Temporary.
            </summary>
            <value>
            Temporary.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.BinaryFileTypeId">
            <summary>
            Gets or sets the binary file type id.
            </summary>
            <value>
            The binary file type id.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Url">
            <summary>
            Gets or sets the Url.
            </summary>
            <value>
            Url.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.FileName">
            <summary>
            Gets or sets the File Name.
            </summary>
            <value>
            File Name.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.MimeType">
            <summary>
            Gets or sets the Mime Type.
            </summary>
            <value>
            Mime Type.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.LastModifiedDateTime">
            <summary>
            Gets or sets the last modified date time.
            </summary>
            <value>
            The last modified date time.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.BinaryFileType">
            <summary>
            Gets or sets the binary file type.
            </summary>
            <value>
            The binary file type.
            </value>
        </member>
        <member name="P:Rock.Model.BinaryFile.Data">
            <summary>
            Gets or sets the binary file data.
            </summary>
            <value>
            The binary file data.
            </value>
        </member>
        <member name="T:Rock.Model.BinaryFileConfiguration">
            <summary>
            File Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.BinaryFileConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.BinaryFileConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.HtmlContent">
            <summary>
            Html Content POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.HtmlContent.BlockId">
            <summary>
            Gets or sets the Block Id.
            </summary>
            <value>
            Block Id.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.EntityValue">
            <summary>
            Gets or sets the Entity Value.
            </summary>
            <value>
            Entity Value.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Version">
            <summary>
            Gets or sets the Version.
            </summary>
            <value>
            Version.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Content">
            <summary>
            Gets or sets the Content.
            </summary>
            <value>
            Content.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.IsApproved">
            <summary>
            Gets or sets the Approved.
            </summary>
            <value>
            Approved.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedByPersonId">
            <summary>
            Gets or sets the Approved By Person Id.
            </summary>
            <value>
            Approved By Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedDateTime">
            <summary>
            Gets or sets the Approved Date Time.
            </summary>
            <value>
            Approved Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.StartDateTime">
            <summary>
            Gets or sets the Start Date Time.
            </summary>
            <value>
            Start Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ExpireDateTime">
            <summary>
            Gets or sets the Expire Date Time.
            </summary>
            <value>
            Expire Date Time.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.Block">
            <summary>
            Gets or sets the Block.
            </summary>
            <value>
            A <see cref="P:Rock.Model.HtmlContent.Block"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.HtmlContent.ApprovedByPerson">
            <summary>
            Gets or sets the Approved By Person.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.HtmlContentConfiguration">
            <summary>
            Html Content Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.HtmlContentConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.HtmlContentConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Page">
            <summary>
            Page POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Page.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Page.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentPageId">
            <summary>
            Gets or sets the Parent Page Id.
            </summary>
            <value>
            Parent Page Id.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Title">
            <summary>
            Gets or sets the Title.
            </summary>
            <value>
            Title.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IsSystem">
            <summary>
            Gets or sets the IsSystem.
            </summary>
            <value>
            IsSystem.
            </value>
        </member>
        <member name="P:Rock.Model.Page.SiteId">
            <summary>
            Gets or sets the Site Id.
            </summary>
            <value>
            Site Id.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Layout">
            <summary>
            Gets or sets the Layout.
            </summary>
            <value>
            Layout.
            </value>
        </member>
        <member name="P:Rock.Model.Page.RequiresEncryption">
            <summary>
            Gets or sets the Requires Encryption.
            </summary>
            <value>
            Requires Encryption.
            </value>
        </member>
        <member name="P:Rock.Model.Page.EnableViewState">
            <summary>
            Gets or sets the Enable View State.
            </summary>
            <value>
            Enable View State.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayTitle">
            <summary>
            Gets or sets a value indicating whether title is displayed on page
            </summary>
            <value>
              <c>true</c> if [page display title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayBreadCrumb">
            <summary>
            Gets or sets a value indicating whether breadcrumbs are displayed on page
            </summary>
            <value>
            <c>true</c> if [page display breadcrumb]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayIcon">
            <summary>
            Gets or sets a value indicating whether icon is displayed on page
            </summary>
            <value>
              <c>true</c> if [page display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageDisplayDescription">
            <summary>
            Gets or sets a value indicating whether description is displayed on page
            </summary>
            <value>
            <c>true</c> if [page display description]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.DisplayInNavWhen">
            <summary>
            Gets or sets the Display In Nav When.
            </summary>
            <value>
            Determines when to display in a navigation 
            0 = When Security Allows
            1 = Always
            3 = Never   
            
            Enum[DisplayInNavWhen].
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayDescription">
            <summary>
            Gets or sets the Menu Display Description.
            </summary>
            <value>
            Menu Display Description.
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayIcon">
            <summary>
            Gets or sets the Menu Display Icon.
            </summary>
            <value>
            Menu Display Icon.
            </value>
        </member>
        <member name="P:Rock.Model.Page.MenuDisplayChildPages">
            <summary>
            Gets or sets the Menu Display Child Pages.
            </summary>
            <value>
            Menu Display Child Pages.
            </value>
        </member>
        <member name="P:Rock.Model.Page.BreadCrumbDisplayName">
            <summary>
            Gets or sets a value indicating whether name is displayed in breadcrumb.
            </summary>
            <value>
            <c>true</c> if [breadcrumb display name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.BreadCrumbDisplayIcon">
            <summary>
            Gets or sets a value indicating whether icon is displayed in breadcrumb.
            </summary>
            <value>
            <c>true</c> if [breadcrumb display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Page.OutputCacheDuration">
            <summary>
            Gets or sets the Output Cache Duration.
            </summary>
            <value>
            Output Cache Duration.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IconFileId">
            <summary>
            Gets or sets the Icon File ID.
            </summary>
            <value>
            Icon Url.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IncludeAdminFooter">
            <summary>
            Gets or sets the Include Admin Footer.
            </summary>
            <value>
            Include Admin Footer.
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentPage">
            <summary>
            Gets or sets the Parent Page.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Page"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Site">
            <summary>
            Gets or sets the Site.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Page.Site"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Page.IconFile">
            <summary>
            Gets or sets the icon file.
            </summary>
            <value>
            The icon file.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Blocks">
            <summary>
            Gets or sets the Blocks.
            </summary>
            <value>
            Collection of Blocks.
            </value>
        </member>
        <member name="P:Rock.Model.Page.Pages">
            <summary>
            Gets or sets the Pages.
            </summary>
            <value>
            Collection of Pages.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageRoutes">
            <summary>
            Gets or sets the Page Routes.
            </summary>
            <value>
            Collection of Page Routes.
            </value>
        </member>
        <member name="P:Rock.Model.Page.PageContexts">
            <summary>
            Gets or sets the Page Contexts.
            </summary>
            <value>
            Collection of Page Contexts.
            </value>
        </member>
        <member name="P:Rock.Model.Page.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.PageConfiguration">
            <summary>
            Page Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DisplayInNavWhen">
            <summary>
            How should page be displayed in a page navigation block
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.WhenAllowed">
            <summary>
            Display this page in navigation controls when allowed by security
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.Always">
            <summary>
            Always display this page in navigation controls, regardless of security
            </summary>
        </member>
        <member name="F:Rock.Model.DisplayInNavWhen.Never">
            <summary>
            Never display this page in navigation controls
            </summary>
        </member>
        <member name="T:Rock.Model.PageRoute">
            <summary>
            Page Route POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PageRoute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PageRoute.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.Route">
            <summary>
            Gets or sets the Route.
            </summary>
            <value>
            Route.
            </value>
        </member>
        <member name="P:Rock.Model.PageRoute.Page">
            <summary>
            Gets or sets the Page.
            </summary>
            <value>
            A <see cref="P:Rock.Model.PageRoute.Page"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.PageRouteConfiguration">
            <summary>
            Page Route Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PageRouteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PageRouteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Site">
            <summary>
            Site POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Site.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Site.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Site.Theme">
            <summary>
            Gets or sets the Theme.
            </summary>
            <value>
            Theme.
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPageId">
            <summary>
            Gets or sets the Default Page Id.
            </summary>
            <value>
            Default Page Id.
            </value>
        </member>
        <member name="P:Rock.Model.Site.FaviconUrl">
            <summary>
            Gets or sets the Favicon Url.
            </summary>
            <value>
            Favicon Url.
            </value>
        </member>
        <member name="P:Rock.Model.Site.AppleTouchIconUrl">
            <summary>
            Gets or sets the Apple Touch Icon Url.
            </summary>
            <value>
            Apple Touch Icon Url.
            </value>
        </member>
        <member name="P:Rock.Model.Site.FacebookAppId">
            <summary>
            Gets or sets the Facebook App Id.
            </summary>
            <value>
            Facebook App Id.
            </value>
        </member>
        <member name="P:Rock.Model.Site.FacebookAppSecret">
            <summary>
            Gets or sets the Facebook App Secret.
            </summary>
            <value>
            Facebook App Secret.
            </value>
        </member>
        <member name="P:Rock.Model.Site.LoginPageReference">
            <summary>
            Gets or sets the Login Page Reference.
            </summary>
            <value>
            Login Page Reference.
            </value>
        </member>
        <member name="P:Rock.Model.Site.RegistrationPageReference">
            <summary>
            Gets or sets the Registration Page Reference.
            </summary>
            <value>
            Registration Page Reference.
            </value>
        </member>
        <member name="P:Rock.Model.Site.ErrorPage">
            <summary>
            Gets or sets the Error Page.
            </summary>
            <value>
            Path to the error page for this site..
            </value>
        </member>
        <member name="P:Rock.Model.Site.Pages">
            <summary>
            Gets or sets the Pages.
            </summary>
            <value>
            Collection of Pages.
            </value>
        </member>
        <member name="P:Rock.Model.Site.SiteDomains">
            <summary>
            Gets or sets the Site Domains.
            </summary>
            <value>
            Collection of Site Domains.
            </value>
        </member>
        <member name="P:Rock.Model.Site.DefaultPage">
            <summary>
            Gets or sets the Default Page.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Page"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.SiteConfiguration">
            <summary>
            Site Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.SiteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.SiteDomain">
            <summary>
            Site Domain POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomain.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.SiteDomain.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.SiteId">
            <summary>
            Gets or sets the Site Id.
            </summary>
            <value>
            Site Id.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.Domain">
            <summary>
            Gets or sets the Domain.
            </summary>
            <value>
            Domain.
            </value>
        </member>
        <member name="P:Rock.Model.SiteDomain.Site">
            <summary>
            Gets or sets the Site.
            </summary>
            <value>
            A <see cref="P:Rock.Model.SiteDomain.Site"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.SiteDomainConfiguration">
            <summary>
            Site Domain Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.SiteDomainConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.SiteDomainConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.UserLogin">
            <summary>
            User POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.UserLogin.IsAllowedByDefault(System.String)">
            <summary>
            The default authorization for the selected action.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.UserLogin.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.UserLogin.GetCurrentUserName">
            <summary>
            Gets the name of the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.UserLogin.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.UserName">
            <summary>
            Gets or sets the User Name.
            </summary>
            <value>
            User Name.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.Password">
            <summary>
            Gets or sets the Password.  Stored as a SHA1 hash for Rock Database Auth, but possibly a different hashtype for other ServiceTypes
            </summary>
            <value>
            Password.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsConfirmed">
            <summary>
            Gets or sets the is confirmed.
            </summary>
            <value>
            Is confirmed.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastActivityDateTime">
            <summary>
            Gets or sets the last activity date time.
            </summary>
            <value>
            The last activity date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastLoginDateTime">
            <summary>
            Gets or sets the last login date time.
            </summary>
            <value>
            The last login date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastPasswordChangedDateTime">
            <summary>
            Gets or sets the last password changed date time.
            </summary>
            <value>
            The last password changed date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.CreationDateTime">
            <summary>
            Gets or sets the creation date time.
            </summary>
            <value>
            The creation date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsOnLine">
            <summary>
            Gets or sets the Is On Line.
            </summary>
            <value>
            Is On Line.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsLockedOut">
            <summary>
            Gets or sets the Is Locked Out.
            </summary>
            <value>
            Is Locked Out.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.LastLockedOutDateTime">
            <summary>
            Gets or sets the last locked out date time.
            </summary>
            <value>
            The last locked out date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.FailedPasswordAttemptCount">
            <summary>
            Gets or sets the Failed Password Attempt Count.
            </summary>
            <value>
            Failed Password Attempt Count.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.FailedPasswordAttemptWindowStartDateTime">
            <summary>
            Gets or sets the failed password attempt window start date time.
            </summary>
            <value>
            The failed password attempt window start date time.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ApiKey">
            <summary>
            Gets or sets the Api Key.
            </summary>
            <value>
            Api Key.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user has authenticated (vs. used an inpersonation link)
            </summary>
        </member>
        <member name="P:Rock.Model.UserLogin.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.UserLogin.ConfirmationCode">
            <summary>
            Gets the encrypted confirmation code.
            </summary>
        </member>
        <member name="P:Rock.Model.UserLogin.ConfirmationCodeEncoded">
            <summary>
            Gets a urlencoded and encrypted confirmation code.
            </summary>
        </member>
        <member name="T:Rock.Model.UserLoginConfiguration">
            <summary>
            User Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.UserLoginConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.UserLoginConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AuthenticationServiceType">
            <summary>
            Type of authentication service used to authenticate user
            </summary>
        </member>
        <member name="F:Rock.Model.AuthenticationServiceType.Internal">
            <summary>
            An internal authentication service (i.e. Database, Active Directory)
            </summary>
        </member>
        <member name="F:Rock.Model.AuthenticationServiceType.External">
            <summary>
            An external authentication service (i.e. Facebook, Twitter, Google, etc.)
            </summary>
        </member>
        <member name="T:Rock.Communication.Email">
            <summary>
            Email class
            </summary>
        </member>
        <member name="M:Rock.Communication.Email.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.Email"/> class.
            </summary>
            <param name="templateGuid">The template GUID.</param>
        </member>
        <member name="M:Rock.Communication.Email.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.Email"/> class.
            </summary>
            <param name="templateGuid">The template GUID.</param>
        </member>
        <member name="M:Rock.Communication.Email.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Communication.Email"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="cc">The cc.</param>
            <param name="bcc">The BCC.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Rock.Communication.Email.Send">
            <summary>
            Sends this instance.
            </summary>
        </member>
        <member name="M:Rock.Communication.Email.Send(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Sends the specified recipient merge values.
            </summary>
            <param name="recipients">The recipients.</param>
        </member>
        <member name="M:Rock.Communication.Email.Send(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Sends the email.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="cc">The cc.</param>
            <param name="bcc">The BCC.</param>
            <param name="subject">The subject.</param>
            <param name="body">The body.</param>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
            <param name="useSSL">if set to <c>true</c> [use SSL].</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Rock.Communication.Email.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.To">
            <summary>
            Gets or sets to.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Cc">
            <summary>
            Gets or sets the cc.
            </summary>
            <value>
            The cc.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Bcc">
            <summary>
            Gets or sets the BCC.
            </summary>
            <value>
            The BCC.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Server">
            <summary>
            Gets or sets the SMTP server.
            </summary>
            <value>
            The SMTP server.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Port">
            <summary>
            Gets or sets the SMTP port.
            </summary>
            <value>
            The SMTP port.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.UseSSL">
            <summary>
            Gets or sets a value indicating whether to use SSL.
            </summary>
            <value>
              <c>true</c> if [use SSL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.UserName">
            <summary>
            Gets or sets the name of the SMTP user.
            </summary>
            <value>
            The name of the SMTP user.
            </value>
        </member>
        <member name="P:Rock.Communication.Email.Password">
            <summary>
            Gets or sets the SMTP password.
            </summary>
            <value>
            The SMTP password.
            </value>
        </member>
        <member name="T:Rock.Model.Attribute">
            <summary>
            Attribute POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Attribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Attribute.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.FieldTypeId">
            <summary>
            Gets or sets the Field Type Id.
            </summary>
            <value>
            Field Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the Entity Qualifier Column.
            </summary>
            <value>
            Entity Qualifier Column.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.EntityTypeQualifierValue">
            <summary>
            Gets or sets the Entity Qualifier Value.
            </summary>
            <value>
            Entity Qualifier Value.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Key">
            <summary>
            Gets or sets the Key.
            </summary>
            <value>
            Key.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsGridColumn">
            <summary>
            Gets or sets the Grid Column.
            </summary>
            <value>
            Grid Column.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.DefaultValue">
            <summary>
            Gets or sets the Default Value.
            </summary>
            <value>
            Default Value.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsMultiValue">
            <summary>
            Gets or sets the Multi Value.
            </summary>
            <value>
            Multi Value.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.IsRequired">
            <summary>
            Gets or sets the Required.
            </summary>
            <value>
            Required.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.AttributeQualifiers">
            <summary>
            Gets or sets the Attribute Qualifiers.
            </summary>
            <value>
            Collection of Attribute Qualifiers.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.FieldType">
            <summary>
            Gets or sets the Field Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Attribute.FieldType"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Attribute.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeConfiguration">
            <summary>
            Attribute Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttributeQualifier">
            <summary>
            Attribute Qualifier POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.AttributeId">
            <summary>
            Gets or sets the Attribute Id.
            </summary>
            <value>
            Attribute Id.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Key">
            <summary>
            Gets or sets the Key.
            </summary>
            <value>
            Key.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Value">
            <summary>
            Gets or sets the Value.
            </summary>
            <value>
            Value.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeQualifier.Attribute">
            <summary>
            Gets or sets the Attribute.
            </summary>
            <value>
            A <see cref="P:Rock.Model.AttributeQualifier.Attribute"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeQualifierConfiguration">
            <summary>
            Attribute Qualifier Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeQualifierConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeQualifierConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttributeValue">
            <summary>
            Attribute Value POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.AttributeValue.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.AttributeId">
            <summary>
            Gets or sets the Attribute Id.
            </summary>
            <value>
            Attribute Id.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.EntityId">
            <summary>
            Gets or sets the Entity Id.
            </summary>
            <value>
            Entity Id.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Value">
            <summary>
            Gets or sets the Value.
            </summary>
            <value>
            Value.
            </value>
        </member>
        <member name="P:Rock.Model.AttributeValue.Attribute">
            <summary>
            Gets or sets the Attribute.
            </summary>
            <value>
            A <see cref="P:Rock.Model.AttributeValue.Attribute"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.AttributeValueConfiguration">
            <summary>
            Attribute Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.AttributeValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.AttributeValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedType">
            <summary>
            Defined Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.DefinedType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.FieldTypeId">
            <summary>
            Gets or sets the Field Type Id.
            </summary>
            <value>
            Field Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Category">
            <summary>
            Gets or sets the Category.
            </summary>
            <value>
            Category.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.DefinedValues">
            <summary>
            Gets or sets the Defined Values.
            </summary>
            <value>
            Collection of Defined Values.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedType.FieldType">
            <summary>
            Gets or sets the Field Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.DefinedType.FieldType"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.DefinedTypeConfiguration">
            <summary>
            Defined Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.DefinedValue">
            <summary>
            Defined Value POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.DefinedValue.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.DefinedTypeId">
            <summary>
            Gets or sets the Defined Type Id.
            </summary>
            <value>
            Defined Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.DefinedType">
            <summary>
            Gets or sets the Defined Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.DefinedValue.DefinedType"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.DefinedValue.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.DefinedValueConfiguration">
            <summary>
            Defined Value Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.DefinedValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.DefinedValueConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FieldType">
            <summary>
            Field Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.FieldType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FieldType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Assembly">
            <summary>
            Gets or sets the Assembly.
            </summary>
            <value>
            Assembly.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.Class">
            <summary>
            Gets or sets the Class.
            </summary>
            <value>
            Class.
            </value>
        </member>
        <member name="P:Rock.Model.FieldType.DefinedTypes">
            <summary>
            Gets or sets the Defined Types.
            </summary>
            <value>
            Collection of Defined Types.
            </value>
        </member>
        <member name="T:Rock.Model.FieldTypeConfiguration">
            <summary>
            Field Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FieldTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FieldTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.ServiceLog">
            <summary>
            Service Log POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.ServiceLog.LogDateTime">
            <summary>
            Gets or sets the Time.
            </summary>
            <value>
            Time.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Input">
            <summary>
            Gets or sets the Input.
            </summary>
            <value>
            Input.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Type">
            <summary>
            Gets or sets the Type.
            </summary>
            <value>
            Type.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Result">
            <summary>
            Gets or sets the Result.
            </summary>
            <value>
            Result.
            </value>
        </member>
        <member name="P:Rock.Model.ServiceLog.Success">
            <summary>
            Gets or sets the Success.
            </summary>
            <value>
            Success.
            </value>
        </member>
        <member name="T:Rock.Model.ServiceLogConfiguration">
            <summary>
            Service Log Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Location">
            <summary>
            Location POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Location.SetLocationPointFromLatLong(System.Double,System.Double)">
            <summary>
            Sets the location point from a latitude and longitude.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Rock.Model.Location.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Location.ParentLocationId">
            <summary>
            Gets or sets the parent location id.
            </summary>
            <value>
            The parent location id.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.Location.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Location.LocationPoint">
            <summary>
            Gets or sets the location point.
            </summary>
            <value>
            The location point.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Perimeter">
            <summary>
            Gets or sets the perimeter.
            </summary>
            <value>
            The perimeter.
            </value>
        </member>
        <member name="P:Rock.Model.Location.LocationTypeValueId">
            <summary>
            Gets or sets the location type value id. (i.e. Campus, Building, Room, Neighborhood, Region, etc)
            </summary>
            <value>
            The location type value id.
            </value>
        </member>
        <member name="P:Rock.Model.Location.IsLocation">
            <summary>
            Gets or sets a value indicating whether this instance is a named location.
            </summary>
            <value>
              <c>true</c> if this instance is a named location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Street1">
            <summary>
            Gets or sets the Street 1.
            </summary>
            <value>
            Street 1.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Street2">
            <summary>
            Gets or sets the Street 2.
            </summary>
            <value>
            Street 2.
            </value>
        </member>
        <member name="P:Rock.Model.Location.City">
            <summary>
            Gets or sets the City.
            </summary>
            <value>
            City.
            </value>
        </member>
        <member name="P:Rock.Model.Location.State">
            <summary>
            Gets or sets the State.
            </summary>
            <value>
            State.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Country">
            <summary>
            Gets or sets the Country.
            </summary>
            <value>
            Country.
            </value>
        </member>
        <member name="P:Rock.Model.Location.Zip">
            <summary>
            Gets or sets the Zip.
            </summary>
            <value>
            Zip.
            </value>
        </member>
        <member name="P:Rock.Model.Location.FullAddress">
            <summary>
            Gets or sets the Raw.
            </summary>
            <value>
            Raw.
            </value>
        </member>
        <member name="P:Rock.Model.Location.AssessorParcelId">
            <summary>
            Gets or sets the Parcel Id.
            </summary>
            <value>
            Parcel Id.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedDateTime">
            <summary>
            Gets or sets the Standardize Attempt.
            </summary>
            <value>
            Standardize Attempt.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedServiceType">
            <summary>
            Gets or sets the Standardize Service.
            </summary>
            <value>
            Standardize Service.
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizeAttemptedResult">
            <summary>
            Gets or sets the Standardize Result.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Location.StandardizedDateTime">
            <summary>
            Gets or sets the Standardize Date.
            </summary>
            <value>
            Standardize Date.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedDateTime">
            <summary>
            Gets or sets the Geocode Attempt.
            </summary>
            <value>
            Geocode Attempt.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedServiceType">
            <summary>
            Gets or sets the Geocode Service.
            </summary>
            <value>
            Geocode Service.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodeAttemptedResult">
            <summary>
            Gets or sets the Geocode Result.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Location.GeocodedDateTime">
            <summary>
            Gets or sets the Geocode Date.
            </summary>
            <value>
            Geocode Date.
            </value>
        </member>
        <member name="P:Rock.Model.Location.PrinterDeviceId">
            <summary>
            Gets or sets the attendance printer id.
            </summary>
            <value>
            The attendance printer id.
            </value>
        </member>
        <member name="P:Rock.Model.Location.ParentLocation">
            <summary>
            Gets or sets the parent location.
            </summary>
            <value>
            The parent location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.ChildLocations">
            <summary>
            Gets or sets the child locations.
            </summary>
            <value>
            The child locations.
            </value>
        </member>
        <member name="P:Rock.Model.Location.GroupLocations">
            <summary>
            Gets or sets the group locations.
            </summary>
            <value>
            The group locations.
            </value>
        </member>
        <member name="P:Rock.Model.Location.LocationType">
            <summary>
            Gets or sets the type of the location
            </summary>
            <value>
            The type of the location.
            </value>
        </member>
        <member name="P:Rock.Model.Location.PrinterDevice">
            <summary>
            Gets or sets the attendance printer.
            </summary>
            <value>
            The attendance printer.
            </value>
        </member>
        <member name="T:Rock.Model.LocationConfiguration">
            <summary>
            Location Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.LocationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.LocationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.EmailTemplate">
            <summary>
            Email Template POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.EmailTemplate.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Category">
            <summary>
            Gets or sets the Category.
            </summary>
            <value>
            Category.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Title">
            <summary>
            Gets or sets the Title.
            </summary>
            <value>
            Title.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.From">
            <summary>
            Gets or sets the From.
            </summary>
            <value>
            From.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.To">
            <summary>
            Gets or sets the To.
            </summary>
            <value>
            To.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Cc">
            <summary>
            Gets or sets the Cc.
            </summary>
            <value>
            Cc.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Bcc">
            <summary>
            Gets or sets the Bcc.
            </summary>
            <value>
            Bcc.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Subject">
            <summary>
            Gets or sets the Subject.
            </summary>
            <value>
            Subject.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Body">
            <summary>
            Gets or sets the Body.
            </summary>
            <value>
            Body.
            </value>
        </member>
        <member name="P:Rock.Model.EmailTemplate.Person">
            <summary>
            Gets or sets the Person.
            </summary>
            <value>
            A <see cref="P:Rock.Model.EmailTemplate.Person"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.EmailTemplateConfiguration">
            <summary>
            Email Template Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.EmailTemplateConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.EmailTemplateConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Person">
            <summary>
            Person POCO Entity.
            </summary>
        </member>
        <member name="F:Rock.Model.Person.USER_VALUE_ENTITY">
            <summary>
            The Entity Type used for saving user values
            </summary>
        </member>
        <member name="M:Rock.Model.Person.ToDictionary">
            <summary>
            To the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Person.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Person.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordTypeValueId">
            <summary>
            Gets or sets the Record Type Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusValueId">
            <summary>
            Gets or sets the Record Status Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusReasonValueId">
            <summary>
            Gets or sets the Record Status Reason Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.PersonStatusValueId">
            <summary>
            Gets or sets the Person Status Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.IsDeceased">
            <summary>
            Gets or sets whether the person is deceased.
            </summary>
            <value>
            deceased.
            </value>
        </member>
        <member name="P:Rock.Model.Person.TitleValueId">
            <summary>
            Gets or sets the Title Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.GivenName">
            <summary>
            Gets or sets the Given Name.
            </summary>
            <value>
            Given Name.
            </value>
        </member>
        <member name="P:Rock.Model.Person.NickName">
            <summary>
            Gets or sets the Nick Name.
            </summary>
            <value>
            Nick Name.
            </value>
        </member>
        <member name="P:Rock.Model.Person.MiddleName">
            <summary>
            Gets or sets the Middle Name.
            </summary>
            <value>
            Middle Name.
            </value>
        </member>
        <member name="P:Rock.Model.Person.LastName">
            <summary>
            Gets or sets the Last Name.
            </summary>
            <value>
            Last Name.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>
            The full name.
            </value>
        </member>
        <member name="P:Rock.Model.Person.FirstName">
            <summary>
            Gets NickName if not null, otherwise gets GivenName.
            </summary>
        </member>
        <member name="P:Rock.Model.Person.FullNameLastFirst">
            <summary>
            Gets the full name (Last, First)
            </summary>
        </member>
        <member name="P:Rock.Model.Person.SuffixValueId">
            <summary>
            Gets or sets the Suffix Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.PhotoId">
            <summary>
            Gets or sets the Photo Id.
            </summary>
            <value>
            Photo Id.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthDay">
            <summary>
            Gets or sets the Birth Day.
            </summary>
            <value>
            Birth Day.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthMonth">
            <summary>
            Gets or sets the Birth Month.
            </summary>
            <value>
            Birth Month.
            </value>
        </member>
        <member name="P:Rock.Model.Person.BirthYear">
            <summary>
            Gets or sets the Birth Year.
            </summary>
            <value>
            Birth Year.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Gender">
            <summary>
            Gets or sets the Gender.
            </summary>
            <value>
            Enum[Gender].
            </value>
        </member>
        <member name="P:Rock.Model.Person.MaritalStatusValueId">
            <summary>
            Gets or sets the Marital Status Id.
            </summary>
            <value>
            .
            </value>
        </member>
        <member name="P:Rock.Model.Person.AnniversaryDate">
            <summary>
            Gets or sets the Anniversary Date.
            </summary>
            <value>
            Anniversary Date.
            </value>
        </member>
        <member name="P:Rock.Model.Person.GraduationDate">
            <summary>
            Gets or sets the Graduation Date.
            </summary>
            <value>
            Graduation Date.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Email">
            <summary>
            Gets or sets the Email.
            </summary>
            <value>
            Email.
            </value>
        </member>
        <member name="P:Rock.Model.Person.IsEmailActive">
            <summary>
            Gets or sets the Email Is Active.
            </summary>
            <value>
            Email Is Active.
            </value>
        </member>
        <member name="P:Rock.Model.Person.EmailNote">
            <summary>
            Gets or sets the Email Note.
            </summary>
            <value>
            Email Note.
            </value>
        </member>
        <member name="P:Rock.Model.Person.DoNotEmail">
            <summary>
            Gets or sets the Do Not Email.
            </summary>
            <value>
            Do Not Email.
            </value>
        </member>
        <member name="P:Rock.Model.Person.SystemNote">
            <summary>
            Gets or sets the System Note.
            </summary>
            <value>
            System Note.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ViewedCount">
            <summary>
            Gets or sets the Viewed Count.
            </summary>
            <value>
            Viewed Count.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Users">
            <summary>
            Gets or sets the Users.
            </summary>
            <value>
            Collection of Users.
            </value>
        </member>
        <member name="P:Rock.Model.Person.EmailTemplates">
            <summary>
            Gets or sets the Email Templates.
            </summary>
            <value>
            Collection of Email Templates.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PhoneNumbers">
            <summary>
            Gets or sets the Phone Numbers.
            </summary>
            <value>
            Collection of Phone Numbers.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Members">
            <summary>
            Gets or sets the Members.
            </summary>
            <value>
            Collection of Members.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Attendances">
            <summary>
            Gets or sets the attendances.
            </summary>
            <value>
            The attendances.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PersonAccountLookups">
            <summary>
            Gets or sets the PersonAccountLookups.
            </summary>
            <value>
            Collection of PersonAccountLookups.
            </value>
        </member>
        <member name="P:Rock.Model.Person.MaritalStatusValue">
            <summary>
            Gets or sets the Marital Status.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.PersonStatusValue">
            <summary>
            Gets or sets the Person Status.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusValue">
            <summary>
            Gets or sets the Record Status.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordStatusReasonValue">
            <summary>
            Gets or sets the Record Status Reason.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.RecordTypeValue">
            <summary>
            Gets or sets the Record Type.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.SuffixValue">
            <summary>
            Gets or sets the Suffix.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.TitleValue">
            <summary>
            Gets or sets the Title.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Photo">
            <summary>
            Gets or sets the Photo
            </summary>
        </member>
        <member name="P:Rock.Model.Person.BirthDate">
            <summary>
            Gets or sets the birth date.
            </summary>
            <value>
            The birth date.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Age">
            <summary>
            Gets the age.
            </summary>
            <value>
            The age.
            </value>
        </member>
        <member name="P:Rock.Model.Person.AgePrecise">
            <summary>
            Gets the fractional age
            </summary>
            <value>
            The age as double.
            </value>
        </member>
        <member name="P:Rock.Model.Person.Grade">
            <summary>
            Gets the grade level of the person based on their high school graduation date.  Grade levels are -1 for prekindergarten, 0 for kindergarten, 1 for first grade, etc. or null if they have no graduation date or if no 'GradeTransitionDate' is configured.
            </summary>
            <value>
            The grade level or null if no graduation date.
            </value>
        </member>
        <member name="P:Rock.Model.Person.ImpersonationParameter">
            <summary>
            Gets the impersonation parameter.
            </summary>
        </member>
        <member name="P:Rock.Model.Person.ImpersonatedUser">
            <summary>
            Gets the impersonated user.
            </summary>
            <value>
            The impersonated user.
            </value>
        </member>
        <member name="T:Rock.Model.PersonConfiguration">
            <summary>
            Person Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Gender">
            <summary>
            The gender of a person
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Rock.Model.Gender.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Rock.Model.PhoneNumber">
            <summary>
            Phone Number POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumber.FormattedNumber(System.String)">
            <summary>
            Formats a phone number
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PhoneNumber.CleanNumber(System.String)">
            <summary>
            Removes non-numeric characters from number
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.PhoneNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Number">
            <summary>
            Gets or sets the Number.
            </summary>
            <value>
            Number.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Extension">
            <summary>
            Gets or sets the extension
            </summary>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberTypeValueId">
            <summary>
            Type of phone number
            </summary>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsMessagingEnabled">
            <summary>
            Gets or sets whether the number has been opted in for SMS
            </summary>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberTypeValue">
            <summary>
            The phone number type
            </summary>
        </member>
        <member name="P:Rock.Model.PhoneNumber.IsUnlisted">
            <summary>
            Gets or sets the whether the number is unlisted or not.
            </summary>
            <value>
            IsUnlisted.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.Person">
            <summary>
            Gets or sets the Person.
            </summary>
            <value>
            A <see cref="P:Rock.Model.PhoneNumber.Person"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.PhoneNumber.NumberFormatted">
            <summary>
            Gets the formatted number.
            </summary>
            <value>
            The formatted number.
            </value>
        </member>
        <member name="T:Rock.Model.PhoneNumberConfiguration">
            <summary>
            Phone Number Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PhoneNumberConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PhoneNumberConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Field.ConfigurationValue">
            <summary>
            The Name, Description and Value of an field type's configuration items
            </summary>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Field.ConfigurationValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Field.ConfigurationValue"/> class.
            </summary>
            <param name="name">The name (used as the heading label when rendering markup).</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Rock.Field.ConfigurationValue.Name" -->
        <member name="P:Rock.Field.ConfigurationValue.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Field.ConfigurationValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Rock.Field.Types.SelectMultiFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectMultiFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DocumentFieldType">
            <summary>
            Field used to save and dispaly a document
            </summary>
        </member>
        <member name="T:Rock.Field.Types.PersonFieldType">
            <summary>
            Field used to save and display a person
            </summary>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PersonFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.UrlFieldType">
            <summary>
            Field used to save and dispaly a url
            </summary>
        </member>
        <member name="T:Rock.Field.Types.CurrencyFieldType">
            <summary>
            Field used to save and dispaly a currency value
            </summary>
        </member>
        <member name="T:Rock.Field.Types.DecimalFieldType">
            <summary>
            Field used to save and dispaly a decimal numeric value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DecimalFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DecimalFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Field.Types.DefinedValueFieldType">
            <summary>
            Field Type used to display a dropdown list of Defined Values for a specific Defined Type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedValueFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DefinedTypeFieldType">
            <summary>
            Field Type used to display a dropdown list of Defined Types
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DefinedTypeFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.DateFieldType">
            <summary>
            Field used to save and dispaly a text value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Formats date display
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <param name="configurationValues">The configuration values.</param>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.DateFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.ImageFieldType">
            <summary>
            Field used to save and dispaly a text value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ImageFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.VideoFieldType">
            <summary>
            Video field type
            </summary>
        </member>
        <member name="M:Rock.Field.Types.VideoFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues"></param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.VideoFieldType.AddLinks(System.Web.UI.Page)">
            <summary>
            Adds any required CSS or Script Links to the current page
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="T:Rock.Model.FinancialBatch">
            <summary>
            Batch POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatch.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.BatchDate">
            <summary>
            Gets or sets the batch date.
            </summary>
            <value>
            The batch date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.CreatedByPersonId">
            <summary>
            Gets or sets the created by person id.
            </summary>
            <value>
            The created by person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.CampusId">
            <summary>
            Gets or sets the campus id.
            </summary>
            <value>
            The campus id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.AccountingSystemCode">
            <summary>
            Gets or sets an optional transaction code from an accounting system that batch is associated with
            </summary>
            <value>
            The accounting system code.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.ControlAmount">
            <summary>
            Gets or sets the control amount.
            </summary>
            <value>
            The control amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Campus">
            <summary>
            Gets or sets the campus.
            </summary>
            <value>
            The campus.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.CreateByPerson">
            <summary>
            Gets or sets the create by person.
            </summary>
            <value>
            The create by person.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialBatch.Transactions">
            <summary>
            Gets or sets the transactions.
            </summary>
            <value>
            The transactions.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialBatchConfiguration">
            <summary>
            Batch Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialBatchConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialBatchConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.BatchStatus">
            <summary>
            The status of a batch
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Pending">
            <summary>
            Pending
            In the process of scanning the checks to it
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Open">
            <summary>
            Open
            Transactions are all entered and are ready to be matched
            </summary>
        </member>
        <member name="F:Rock.Model.BatchStatus.Closed">
            <summary>
            Closed
            All is well and good
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialAccount">
            <summary>
            Financial Account POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ParentAccountId">
            <summary>
            Gets or sets the parent account id.
            </summary>
            <value>
            The parent fund id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.CampusId">
            <summary>
            Gets or sets the campus id.
            </summary>
            <value>
            The campus id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.PublicName">
            <summary>
            Gets or sets the name of the public.
            </summary>
            <value>
            The name of the public.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.IsTaxDeductible">
            <summary>
            Gets or sets a value indicating whether [tax deductible].
            </summary>
            <value>
              <c>true</c> if [tax deductible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.GlCode">
            <summary>
            Gets or sets the general ledger code.
            </summary>
            <value>
            The gl code.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.IsActive">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Rock.Model.FinancialAccount"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.AccountTypeValueId">
            <summary>
            Gets or sets the fund type id.
            </summary>
            <value>
            The fund type id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ParentAccount">
            <summary>
            Gets or sets the parent account.
            </summary>
            <value>
            The parent fund.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.Campus">
            <summary>
            Gets or sets the campus.
            </summary>
            <value>
            The campus.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.AccountTypeValue">
            <summary>
            Gets or sets the type of the account.
            </summary>
            <value>
            The type of the fund.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialAccount.ChildAccounts">
            <summary>
            Gets or sets the child accounts.
            </summary>
            <value>
            The child funds.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialAccountConfiguration">
            <summary>
            Fund Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialAccountConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialAccountConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialGateway">
            <summary>
            Payment Gateway POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGateway.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialGateway.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialGateway.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialGateway.EntityTypeId">
            <summary>
            Gets or sets the entity type id for the associated Gateway MEF component
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialGateway.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialGatewayConfiguration">
            <summary>
            Payment Gateway Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialGatewayConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialGatewayConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.PersonAccount">
            <summary>
            PersonAccountLookup POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccount.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.PersonAccount.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAccount.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>
            The account.
            </value>
        </member>
        <member name="P:Rock.Model.PersonAccount.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="T:Rock.Model.PersonAccountLookupConfiguration">
            <summary>
            PersonAccountLookup Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.PersonAccountLookupConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.PersonAccountLookupConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialPledge">
            <summary>
            Financial Pledge POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.AccountId">
            <summary>
            Gets or sets the fund id.
            </summary>
            <value>
            The fund id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.TotalAmount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PledgeFrequencyValueId">
            <summary>
            Gets or sets the frequency type id.
            </summary>
            <value>
            The frequency type id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>
            The end date.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.Person">
            <summary>
            Gets or sets the person.
            </summary>
            <value>
            The person.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>
            The fund.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialPledge.PledgeFrequencyValue">
            <summary>
            Gets or sets the frequency of the pledge
            </summary>
            <value>
            The frequency of the pledge
            </value>
        </member>
        <member name="T:Rock.Model.FinancialPledgeConfiguration">
            <summary>
            Pledge Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialPledgeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialPledgeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransaction">
            <summary>
            Transaction POCO class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionBase`1">
            <summary>
            abstract base class for FinancialTransaction so that we can have child classes like FinancialTransactionRefund
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rock.Model.FinancialTransactionBase`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.AuthorizedPersonId">
            <summary>
            Gets or sets the authorized person id.
            </summary>
            <value>
            The authorized person id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.BatchId">
            <summary>
            Gets or sets the batch id.
            </summary>
            <value>
            The batch id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.GatewayId">
            <summary>
            Gets or sets the gateway id.
            </summary>
            <value>
            The gateway id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionDateTime">
            <summary>
            Gets or sets the transaction date time.
            </summary>
            <value>
            The transaction date time.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
            <value>
            The transaction code.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionTypeValueId">
            <summary>
            Gets or sets the transaction type value id.
            </summary>
            <value>
            The transaction type value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CurrencyTypeValueId">
            <summary>
            Gets or sets the currency type value id.
            </summary>
            <value>
            The currency type value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CreditCardTypeValueId">
            <summary>
            Gets or sets the credit card type value id.
            </summary>
            <value>
            The credit card type value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.SourceTypeValueId">
            <summary>
            Gets or sets the source type value id.
            </summary>
            <value>
            The source type value id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CheckMicrEncrypted">
            <summary>
            Gets or sets the check micr encrypted.
            Plain Text format is {routingnumber}_{accountnumber}_{checknumber}
            </summary>
            <value>
            The check micr encrypted.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.AuthorizedPerson">
            <summary>
            Gets or sets the authorized person.
            </summary>
            <value>
            The authorized person.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Batch">
            <summary>
            Gets or sets the batch.
            </summary>
            <value>
            The batch.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Gateway">
            <summary>
            Gets or sets the gateway.
            </summary>
            <value>
            The gateway.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionTypeValue">
            <summary>
            Gets or sets the transaction type value.
            </summary>
            <value>
            The transaction type value.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CurrencyTypeValue">
            <summary>
            Gets or sets the currency type value.
            </summary>
            <value>
            The currency type value.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.CreditCardTypeValue">
            <summary>
            Gets or sets the credit card type value.
            </summary>
            <value>
            The credit card type value.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.SourceTypeValue">
            <summary>
            Gets or sets the source type value.
            </summary>
            <value>
            The source type value.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Refund">
            <summary>
            Gets or sets the refund.
            </summary>
            <value>
            The refund.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.TransactionDetails">
            <summary>
            Gets or sets the transaction details.
            </summary>
            <value>
            The transaction details.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionBase`1.Images">
            <summary>
            Gets or sets the images.
            </summary>
            <value>
            The images.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionScannedCheck">
            <summary>
            Special Class to use when uploading a FinancialTransaction from a Scanned Check thru the Rest API.
            The Rest Client can't be given access to the DataEncryptionKey, so they'll upload it (using SSL) 
            with the plaintext CheckMicr and the Rock server will encrypt prior to saving to database
            </summary>
        </member>
        <member name="P:Rock.Model.FinancialTransactionScannedCheck.ScannedCheckMicr">
            <summary>
            Gets or sets the scanned check micr.
            </summary>
            <value>
            The scanned check micr.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionConfiguration">
            <summary>
            Transaction Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetail">
            <summary>
            TransactionDetail POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetail.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.TransactionId">
            <summary>
            Gets or sets the transaction id.
            </summary>
            <value>
            The transaction id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.AccountId">
            <summary>
            Gets or sets the account id.
            </summary>
            <value>
            The account id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityTypeId">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>
            The transaction.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>
            The account.
            </value>
        </member>
        <member name="P:Rock.Model.FinancialTransactionDetail.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="T:Rock.Model.FinancialTransactionDetailConfiguration">
            <summary>
            TransactionDetail Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.FinancialTransactionDetailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.FinancialTransactionDetailConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.TransactionSearchValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.DateRange">
            <summary>
            Gets or sets the date range.
            </summary>
            <value>
            The date range.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.AmountRange">
            <summary>
            Gets or sets the amount range.
            </summary>
            <value>
            The amount range.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.AccountId">
            <summary>
            Gets or sets the account.
            </summary>
            <value>
            The fund.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.TransactionTypeValueId">
            <summary>
            Gets or sets the type of the currency.
            </summary>
            <value>
            The type of the currency.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.CurrencyTypeValueId">
            <summary>
            Gets or sets the type of the currency.
            </summary>
            <value>
            The type of the currency.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.CreditCardTypeValueId">
            <summary>
            Gets or sets the type of the credit card.
            </summary>
            <value>
            The type of the credit card.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.SourceTypeValueId">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>
            The type of the source.
            </value>
        </member>
        <member name="P:Rock.Model.TransactionSearchValue.TransactionCode">
            <summary>
            Gets or sets the transaction code.
            </summary>
            <value>
            The transaction code.
            </value>
        </member>
        <member name="T:Rock.Model.Group">
            <summary>
            Group POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Group.IsAncestorOfGroup(System.Int32)">
            <summary>
            Determines whether [is ancestor of group] [the specified parent group id].
            </summary>
            <param name="parentGroupId">The parent group id.</param>
            <returns>
              <c>true</c> if [is ancestor of group] [the specified parent group id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.Group.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.Group.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentGroupId">
            <summary>
            Gets or sets the Parent Group Id.
            </summary>
            <value>
            Parent Group Id.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupTypeId">
            <summary>
            Gets or sets the Group Type Id.
            </summary>
            <value>
            Group Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.Group.CampusId">
            <summary>
            Gets or sets the Campus Id.
            </summary>
            <value>
            Campus Id.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.Group.IsSecurityRole">
            <summary>
            Gets or sets the Is Security Role.
            </summary>
            <value>
            Is Security Role.
            </value>
        </member>
        <member name="P:Rock.Model.Group.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentGroup">
            <summary>
            Gets or sets the Parent Group.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Group"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupType">
            <summary>
            Gets or sets the Group Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.Group.GroupType"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Campus">
            <summary>
            Gets or sets the Campus.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Campus"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Groups">
            <summary>
            Gets or sets the Groups.
            </summary>
            <value>
            Collection of Groups.
            </value>
        </member>
        <member name="P:Rock.Model.Group.Members">
            <summary>
            Gets or sets the Members.
            </summary>
            <value>
            Collection of Members.
            </value>
        </member>
        <member name="P:Rock.Model.Group.GroupLocations">
            <summary>
            Gets or sets the group locations.
            </summary>
            <value>
            The group locations.
            </value>
        </member>
        <member name="P:Rock.Model.Group.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.GroupConfiguration">
            <summary>
            Group Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupParentCircularReferenceException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Model.GroupParentCircularReferenceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupParentCircularReferenceException"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupRoleService">
            <summary>
            GroupRole Service class
            </summary>
            <summary>
            Group Role POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupRoleService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleService.#ctor(Rock.Data.IRepository{Rock.Model.GroupRole})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupRoleService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleService.CanDelete(Rock.Model.GroupRole,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupRoleService.GetBySortOrder(System.Nullable{System.Int32})">
            <summary>
            Gets the by sort order.
            </summary>
            <param name="sortOrder">The sort order.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupRoleExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleExtensionMethods.Clone(Rock.Model.GroupRole,System.Boolean)">
            <summary>
            Clones this GroupRole object to a new GroupRole object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupService">
            <summary>
            Group Service class
            </summary>
            <summary>
            Group POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupService.#ctor(Rock.Data.IRepository{Rock.Model.Group})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupService.CanDelete(Rock.Model.Group,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByGroupTypeId(System.Int32)">
            <summary>
            Gets Groups by Group Type Id
            </summary>
            <param name="groupTypeId">Group Type Id.</param>
            <returns>An enumerable list of Group objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByGuid(System.Guid)">
            <summary>
            Gets Group by Guid
            </summary>
            <param name="guid">Guid.</param>
            <returns>Group object.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByIsSecurityRole(System.Boolean)">
            <summary>
            Gets Groups by Is Security Role
            </summary>
            <param name="isSecurityRole">Is Security Role.</param>
            <returns>An enumerable list of Group objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByParentGroupId(System.Nullable{System.Int32})">
            <summary>
            Gets Groups by Parent Group Id
            </summary>
            <param name="parentGroupId">Parent Group Id.</param>
            <returns>An enumerable list of Group objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.GetByParentGroupIdAndName(System.Nullable{System.Int32},System.String)">
            <summary>
            Gets Groups by Parent Group Id And Name
            </summary>
            <param name="parentGroupId">Parent Group Id.</param>
            <param name="name">Name.</param>
            <returns>An enumerable list of Group objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupService.Delete(Rock.Model.Group,System.Nullable{System.Int32})">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupExtensionMethods.Clone(Rock.Model.Group,System.Boolean)">
            <summary>
            Clones this Group object to a new Group object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupRole">
            <summary>
            Group Role POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRole.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupRole.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.GroupTypeId">
            <summary>
            Gets or sets the Group Type Id.
            </summary>
            <value>
            Group Type Id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.MaxCount">
            <summary>
            Gets or sets the max count.
            </summary>
            <value>
            The max count.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.MinCount">
            <summary>
            Gets or sets the min count.
            </summary>
            <value>
            The min count.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.IsLeader">
            <summary>
            Is this role a leader of the group
            </summary>
            <value>
            The is leader.
            </value>
        </member>
        <member name="P:Rock.Model.GroupRole.GroupType">
            <summary>
            Gets or sets the Group Type.
            </summary>
            <value>
            A <see cref="P:Rock.Model.GroupRole.GroupType"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.GroupRoleConfiguration">
            <summary>
            Group Role Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupRoleConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupRoleConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupType">
            <summary>
            Group Type POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupType"/> class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Description.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupTerm">
            <summary>
            Gets or sets the group term.
            </summary>
            <value>
            The group term.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupMemberTerm">
            <summary>
            Gets or sets the group member term.
            </summary>
            <value>
            The group member term.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.DefaultGroupRoleId">
            <summary>
            Gets or sets the Default Group Role Id.
            </summary>
            <value>
            Default Group Role Id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.AllowMultipleLocations">
            <summary>
            Gets or sets a value indicating whether groups of this type support multiple locations
            </summary>
            <value>
            <c>true</c> if [allow multiple locations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ShowInGroupList">
            <summary>
            Gets or sets a value indicating whether [show in group list].
            </summary>
            <value>
              <c>true</c> if [show in group list]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ShowInNavigation">
            <summary>
            Gets or sets a value indicating whether [show in navigation].
            If false, this GroupType will be hidden navigation controls, such as TreeViews and Menus
            </summary>
            <value>
              <c>true</c> if [show in navigation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconSmallFileId">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconLargeFileId">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.TakesAttendance">
            <summary>
            Gets or sets a value indicating whether groups of this type support taking attendance
            </summary>
            <value>
              <c>true</c> if [takes attendance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.AttendanceRule">
            <summary>
            Gets or sets the attendance rule.
            </summary>
            <value>
            The attendance rule.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.AttendancePrintTo">
            <summary>
            Gets or sets the attendance print to.
            </summary>
            <value>
            The attendance print to.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
            <value>
            The display order.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Groups">
            <summary>
            Gets or sets the Groups.
            </summary>
            <value>
            Collection of Groups.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ChildGroupTypes">
            <summary>
            Gets or sets the Child Group Types.
            </summary>
            <value>
            Collection of Child Group Types.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.ParentGroupTypes">
            <summary>
            Gets or sets the Parent Group Types.
            </summary>
            <value>
            Collection of Parent Group Types.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.Roles">
            <summary>
            Gets or sets the Group Roles.
            </summary>
            <value>
            Collection of Group Roles.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.LocationTypes">
            <summary>
            Gets or sets the location types.
            </summary>
            <value>
            The location types.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.DefaultGroupRole">
            <summary>
            Gets or sets the Default Group Role.
            </summary>
            <value>
            A <see cref="T:Rock.Model.GroupRole"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconSmallFile">
            <summary>
            Gets or sets the small icon.
            </summary>
            <value>
            The small icon.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.IconLargeFile">
            <summary>
            Gets or sets the large icon.
            </summary>
            <value>
            The large icon.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupCount">
            <summary>
            Gets the group query.
            </summary>
            <value>
            The group query.
            </value>
        </member>
        <member name="P:Rock.Model.GroupType.GroupQuery">
            <summary>
            Gets the group query.
            </summary>
            <value>
            The group query.
            </value>
        </member>
        <member name="T:Rock.Model.GroupTypeConfiguration">
            <summary>
            Group Type Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.AttendanceRule">
            <summary>
            The attendance rule to use when person checks in to a group of this type
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.None">
            <summary>
            None, person does not need to belong to the group, and they will not automatically 
            be added to the group
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.AddOnCheckIn">
            <summary>
            Person will be added to the group whenever they check-in
            </summary>
        </member>
        <member name="F:Rock.Model.AttendanceRule.AlreadyBelongs">
            <summary>
            User must already belong to the group before they will be allowed to check-in
            </summary>
        </member>
        <member name="T:Rock.Model.GroupTypeService">
            <summary>
            GroupType Service class
            </summary>
            <summary>
            Group Type POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeService.#ctor(Rock.Data.IRepository{Rock.Model.GroupType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeService.CanDelete(Rock.Model.GroupType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.GetByDefaultGroupRoleId(System.Nullable{System.Int32})">
            <summary>
            Gets Group Types by Default Group Role Id
            </summary>
            <param name="defaultGroupRoleId">Default Group Role Id.</param>
            <returns>An enumerable list of GroupType objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupTypeService.Delete(Rock.Model.GroupType,System.Nullable{System.Int32})">
            <summary>
            Deletes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="personId">The person id.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupTypeExtensionMethods.Clone(Rock.Model.GroupType,System.Boolean)">
            <summary>
            Clones this GroupType object to a new GroupType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupMember">
            <summary>
            Member POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMember.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupMember.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            System.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupId">
            <summary>
            Gets or sets the Group Id.
            </summary>
            <value>
            Group Id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupRoleId">
            <summary>
            Gets or sets the Group Role Id.
            </summary>
            <value>
            Group Role Id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.Person">
            <summary>
            Gets or sets the Person.
            </summary>
            <value>
            A <see cref="T:Rock.Model.Person"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.Group">
            <summary>
            Gets or sets the Group.
            </summary>
            <value>
            A <see cref="P:Rock.Model.GroupMember.Group"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.GroupMember.GroupRole">
            <summary>
            Gets or sets the Group Role.
            </summary>
            <value>
            A <see cref="P:Rock.Model.GroupMember.GroupRole"/> object.
            </value>
        </member>
        <member name="T:Rock.Model.GroupMemberConfiguration">
            <summary>
            Member Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupMemberConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.GroupMemberService">
            <summary>
            GroupMember Service class
            </summary>
            <summary>
            Member POCO Service class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupMemberService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberService.#ctor(Rock.Data.IRepository{Rock.Model.GroupMember})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupMemberService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberService.CanDelete(Rock.Model.GroupMember,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable">
            <summary>
            Gets a queryable list of group members
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.Boolean)">
            <summary>
            Gets a queryable list of group members
            </summary>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.String)">
            <summary>
            Gets a list of all group members with eager loading of properties specfied in includes
            </summary>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.Queryable(System.String,System.Boolean)">
            <summary>
            Gets a list of all group members with eager loading of properties specfied in includes
            </summary>
            <param name="includes">The includes.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupId(System.Int32,System.Boolean)">
            <summary>
            Gets Members by Group Id
            </summary>
            <param name="groupId">Group Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Member objects.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupIdAndPersonId(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets Mebers by group id and person id.
            </summary>
            <param name="groupId">The group id.</param>
            <param name="personId">The person id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupIdAndPersonIdAndGroupRoleId(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets Member by Group Id And Person Id And Group Role Id
            </summary>
            <param name="groupId">Group Id.</param>
            <param name="personId">Person Id.</param>
            <param name="groupRoleId">Group Role Id.</param>
            <returns>Member object.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByGroupRoleId(System.Int32,System.Boolean)">
            <summary>
            Gets Members by Group Role Id
            </summary>
            <param name="groupRoleId">Group Role Id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns>
            An enumerable list of Member objects.
            </returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetByPersonId(System.Int32)">
            <summary>
            Gets Members by Person Id
            </summary>
            <param name="personId">Person Id.</param>
            <returns>An enumerable list of Member objects.</returns>
        </member>
        <member name="M:Rock.Model.GroupMemberService.GetFirstNames(System.Int32,System.Boolean)">
            <summary>
            Gets the first names of each person in the group ordered by group role, age, and gender
            </summary>
            <param name="groupId">The group id.</param>
            <param name="includeDeceased">if set to <c>true</c> [include deceased].</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupMemberExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.GroupMemberExtensionMethods.Clone(Rock.Model.GroupMember,System.Boolean)">
            <summary>
            Clones this GroupMember object to a new GroupMember object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.GroupLocation">
            <summary>
            GroupLocation POCO class.
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.LocationId">
            <summary>
            Gets or sets the location id.
            </summary>
            <value>
            The location id.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.GroupLocationTypeValueId">
            <summary>
            Gets or sets the location type. (i.e. Home, Work, P.O. Box)
            </summary>
            <value>
            The location type.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.IsMailing">
            <summary>
            Gets or sets a value indicating whether this instance is for mailings.
            </summary>
            <value>
            <c>true</c> if this instance is mailing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.IsLocation">
            <summary>
            Gets or sets a value indicating whether this instance is for determing location.
            </summary>
            <value>
            <c>true</c> if this instance is location; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.LocationTypeValue">
            <summary>
            Gets or sets the Location Type.
            </summary>
            <value>
            A <see cref="T:Rock.Model.DefinedValue"/> object.
            </value>
        </member>
        <member name="P:Rock.Model.GroupLocation.Schedules">
            <summary>
            Gets or sets the schedules.
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="T:Rock.Model.GroupLocationConfiguration">
            <summary>
            GroupLocation Configuration class
            </summary>
        </member>
        <member name="M:Rock.Model.GroupLocationConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.GroupLocationConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Jobs.CleanCachedImages">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
            <author>Jon Edmiston</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.CleanCachedImages.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.CleanCachedImages.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="M:Rock.Jobs.CleanCachedImages.ProcessDirectory(System.String)">
            <summary>
            Processes the directory.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
        </member>
        <member name="T:Rock.Jobs.SendGridProcess">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
            <author>Jon Edmiston</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.SendGridProcess.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.SendGridProcess.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Jobs.RockCleanup">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
            <author>Jon Edmiston</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockCleanup.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Migrations.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Migrations.Configuration"/> class.
            </summary>
        </member>
        <member name="M:Rock.Migrations.Configuration.Seed(Rock.Data.RockContext)">
            <summary>
            Seeds the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Migrations.RockCSharpMigrationCodeGenerator`1">
            <summary>
            
            </summary>
            <typeparam name="T">Target DbContext to be migrated</typeparam>
        </member>
        <member name="F:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.dbContextEntities">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Migrations.RockCSharpMigrationCodeGenerator`1"/> class.
            </summary>
            <param name="limitOperationsToDbContextTables">if set to <c>true</c> [limit operations to db context tables].</param>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.PopulateDbContextEntityLookup">
            <summary>
            Populates the db context entity lookup which is used by Rock.Data.AlternateKeyAttribute and LimitOperationsToDbContextTables
            </summary>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.GenerateCustomColumnCode(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.String)">
            <summary>
            Generates the custom column code.
            </summary>
            <param name="writer">The writer.</param>
            <param name="fullTableName">Full name of the table.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
            <param name="createTableOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.
            </summary>
            <param name="addColumnOperation">The operation to generate code for.</param>
            <param name="writer">Text writer to add the generated code to.</param>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
            <summary>
            Generates the primary code file that the user can view and edit.
            </summary>
            <param name="operations">Operations to be performed by the migration.</param>
            <param name="namespace">Namespace that code should be generated in.</param>
            <param name="className">Name of the class that should be generated.</param>
            <returns>
            The generated code.
            </returns>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.GetFilteredOperations(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the filtered operations.
            </summary>
            <param name="operations">The operations.</param>
            <param name="skippedOperationComments">The skipped operation comments.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.GetOperationTableColumnInfo(System.Data.Entity.Migrations.Model.MigrationOperation)">
            <summary>
            Gets the operation table column info.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.LimitOperationsToDbContextTables">
            <summary>
            Gets or sets a value indicating whether Migrations Code Generation should 
            skip operations if the Table is not directly associated with the DbContext.
            Default is True. 
            </summary>
            <value>
            <c>true</c> if [limit operations to db context tables]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.TableColumnInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.TableColumnInfo.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:Rock.Migrations.RockCSharpMigrationCodeGenerator`1.TableColumnInfo.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Address">
            <summary>
            Searches for people with matching address
            </summary>
        </member>
        <member name="T:Rock.Search.SearchComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Search.SearchComponent.Search(System.String)">
            <summary>
            Returns a list of value/label results matching the searchterm
            </summary>
            <param name="searchterm">The searchterm.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.SearchComponent.SearchLabel">
            <summary>
            The label to display for the type of search
            </summary>
        </member>
        <member name="P:Rock.Search.SearchComponent.ResultUrl">
            <summary>
            The url to redirect user to after they've entered search criteria
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Address.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Address.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Email">
            <summary>
            Searches for people who's email matches selected term
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Email.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Email.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Name">
            <summary>
            Searches for people with matching names
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Name.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Name.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.Person.Phone">
            <summary>
            Searches for people with matching phones
            </summary>
        </member>
        <member name="M:Rock.Search.Person.Phone.Search(System.String)">
            <summary>
            Returns a list of matching people
            </summary>
            <param name="searchterm"></param>
            <returns></returns>
        </member>
        <member name="P:Rock.Search.Person.Phone.AttributeValueDefaults">
            <summary>
            Gets the attribute value defaults.
            </summary>
            <value>
            The attribute defaults.
            </value>
        </member>
        <member name="T:Rock.Search.SearchContainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Search.SearchContainer.instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Search.SearchContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Rock.Search.SearchContainer"/> class from being created.
            </summary>
        </member>
        <member name="P:Rock.Search.SearchContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Security.AdditionalActionsAttribute">
            <summary>
            A class Attribute that can be used by objects that implement ISecured to add additional supported actions
            </summary>
        </member>
        <member name="M:Rock.Security.AdditionalActionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.AdditionalActionsAttribute"/> class.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="P:Rock.Security.AdditionalActionsAttribute.AdditionalActions">
            <summary>
            Gets or sets the additional actions to support
            </summary>
            <value>
            The Actions.
            </value>
        </member>
        <member name="T:Rock.Security.Authentication.ActiveDirectory">
            <summary>
            Authenticates a username using Active Directory
            </summary>
        </member>
        <member name="T:Rock.Security.AuthenticationComponent">
            <summary>
            Base class for components that perform authentication based on a username and password entered by the user
            </summary>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the specified user name and password
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.AuthenticationComponent.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the specified user name and password
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.ActiveDirectory.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Security.Authentication.Database">
            <summary>
            Authenticates a username/password using the Rock database
            </summary>
        </member>
        <member name="M:Rock.Security.Authentication.Database.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Security.Authentication.Database"/> class.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Authentication requires a 'PasswordKey' app setting</exception>
        </member>
        <member name="M:Rock.Security.Authentication.Database.Authenticate(Rock.Model.UserLogin,System.String)">
            <summary>
            Authenticates the specified user name.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authentication.Database.EncodePassword(Rock.Model.UserLogin,System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="user">The user.</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Security.ExternalAuthenticationComponent">
            <summary>
            Base class for components that authenticate user by redirecting to third-party site (i.e. Facebook, Twitter, Google, etc)
            </summary>
        </member>
        <member name="M:Rock.Security.ExternalAuthenticationComponent.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this 
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthenticationComponent.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthenticationComponent.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the user based on a request from a third-party provider.  Will set the username and returnUrl values.
            </summary>
            <param name="request">The request.</param>
            <param name="userName">Name of the user.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthenticationComponent.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Security.ExternalAuthenticationContainer">
            <summary>
            MEF Container for External Authentication Components
            </summary>
        </member>
        <member name="P:Rock.Security.ExternalAuthenticationContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Security.Encryption">
            <summary>
            From http://stackoverflow.com/questions/202011/encrypt-decrypt-string-in-net
            </summary>
        </member>
        <member name="M:Rock.Security.Encryption.EncryptString(System.String)">
            <summary>
            Encrypt the given string using AES.  The string can be decrypted using 
            DecryptStringAES().  The sharedSecret parameters must match.
            </summary>
            <param name="plainText">The text to encrypt.</param>
        </member>
        <member name="M:Rock.Security.Encryption.DecryptString(System.String)">
            <summary>
            Decrypt the given string.  Assumes the string was encrypted using 
            EncryptStringAES(), using an identical sharedSecret.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
        </member>
        <member name="M:Rock.Security.Encryption.ReadByteArray(System.IO.Stream)">
            <summary>
            Reads the byte array.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
            <exception cref="T:System.SystemException">
            Stream did not contain properly formatted byte array
            or
            Did not read byte array properly
            </exception>
        </member>
        <member name="T:Rock.Security.ExternalAuthentication.Facebook">
            <summary>
            Authenticates a user using Facebook
            </summary>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.IsReturningFromAuthentication(System.Web.HttpRequest)">
            <summary>
            Tests the Http Request to determine if authentication should be tested by this
            authentication provider.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.GenerateLoginUrl(System.Web.HttpRequest)">
            <summary>
            Generates the login URL.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.Authenticate(System.Web.HttpRequest,System.String@,System.String@)">
            <summary>
            Authenticates the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="username">The username.</param>
            <param name="returnUrl">The return URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.ExternalAuthentication.Facebook.ImageUrl">
            <summary>
            Gets the URL of an image that should be displayed.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rock.Security.GlobalDefault">
            <summary>
            A generic ISecured entity
            </summary>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="M:Rock.Security.GlobalDefault.Read(System.Int32)">
            <summary>
            Reads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.GlobalDefault.ToString">
            <summary>
            Just return empty string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.GlobalDefault.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Security.GlobalDefault.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Security.GlobalDefault.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="T:Rock.Security.AuthenticationContainer">
            <summary>
            MEF Container class for Authentication Componenets
            </summary>
        </member>
        <member name="P:Rock.Security.AuthenticationContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.RockPackagePathResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.RockPackagePathResolver.#ctor(NuGet.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.RockPackagePathResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Rock.Services.NuGet.RockPackagePathResolver.GetPackageDirectory(System.String,NuGet.SemanticVersion)">
            <summary>
            Gets the package directory.
            </summary>
            <param name="packageId">The package id.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectManager">
            <summary>
            This is the service layer that handles installing, updating, removing Packages (aka Plugins)
            from the website / local filesystem and the Rock Quarry (our NuGet server).
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.#ctor(System.String,System.String)">
            <summary>
            Creates a WebProjectManager service.
            </summary>
            <param name="remoteSource">URL of the NuGet server API (ex, http://nuget.org/api/v2 ).</param>
            <param name="siteRoot">The physical path to the web root.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetLatestRemotePackages(System.String,System.Boolean)">
            <summary>
            Gets the newest/latest package or all of them matching the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <param name="includeAllVersions">if true, returns all matching packages; otherwise only the latest</param>
            <returns>
            a list of packages
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetRemotePackages(System.String)">
            <summary>
            Gets all matching packages for the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <returns>a list of packages</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetInstalledPackages(System.String)">
            <summary>
            Gets all matching installed packages for the given keyword search.
            </summary>
            <param name="searchTerms">a string of space delimited search terms</param>
            <returns>a list of packages</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetInstalledPackage(System.String)">
            <summary>
            Gets the locally installed package for the given id.
            </summary>
            <param name="packageId">the Id of a package</param>
            <returns>a package</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.InstallPackage(NuGet.IPackage)">
            <summary>
            Installs and adds a package reference to the project
            </summary>
            <returns>Warnings encountered when installing the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.UpdatePackage(NuGet.IPackage)">
            <summary>
            Updates a package reference. Installs the package to the App_Data repository if it does not already exist.
            </summary>
            <returns>Warnings encountered when updating the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.UninstallPackage(NuGet.IPackage,System.Boolean)">
            <summary>
            Removes a package reference and uninstalls the package
            </summary>
            <returns>Warnings encountered when uninstalling the package.</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.IsPackageInstalled(NuGet.IPackage)">
            <summary>
            Will let you know if this exact package is installed locally
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.IsPackageInstalled(NuGet.IPackage,System.Boolean)">
            <summary>
            Will let you know if this package is installed locally. If anyVersion is true
            it does not matter which version of the package; otherwise only returns true if
            an exact match.
            </summary>
            <param name="package"></param>
            <param name="anyVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetUpdate(NuGet.IPackage)">
            <summary>
            Gets the latest version of the given package.
            </summary>
            <param name="package">a package</param>
            <returns>a package; otherwise null if no package was found</returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetUpdates">
            <summary>
            Gets all versions of the given package.
            </summary>
            <returns>
            a list of packages
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.PerformLoggedAction(System.Action)">
            <summary>
            Performs the logged action.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackagesRequiringLicenseAcceptance(NuGet.IPackage)">
            <summary>
            Gets the packages requiring license acceptance.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackagesRequiringLicenseAcceptance(NuGet.IPackage,NuGet.IPackageRepository,NuGet.IPackageRepository)">
            <summary>
            Gets the packages requiring license acceptance.
            </summary>
            <param name="package">The package.</param>
            <param name="localRepository">The local repository.</param>
            <param name="sourceRepository">The source repository.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackageDependencies(NuGet.IPackage,NuGet.IPackageRepository,NuGet.IPackageRepository)">
            <summary>
            Gets the package dependencies.
            </summary>
            <param name="package">The package.</param>
            <param name="localRepository">The local repository.</param>
            <param name="sourceRepository">The source repository.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackages(NuGet.IPackageRepository,System.String)">
            <summary>
            Gets the packages.
            </summary>
            <param name="repository">The repository.</param>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetPackages(System.Linq.IQueryable{NuGet.IPackage},System.String)">
            <summary>
            Gets the packages.
            </summary>
            <param name="packages">The packages.</param>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.GetWebRepositoryDirectory(System.String)">
            <summary>
            Gets the web repository directory.
            </summary>
            <param name="siteRoot">The site root.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.LocalRepository">
            <summary>
            Represents the local NuGet package repository.
            </summary>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.SourceRepository">
            <summary>
            Represents the remote/source NuGet package repository.
            </summary>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectManager.ErrorLogger">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Services.NuGet.WebProjectManager.ErrorLogger._errors">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectManager.ErrorLogger.Log(NuGet.MessageLevel,System.String,System.Object[])">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectManager.ErrorLogger.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="T:Rock.Services.NuGet.WebProjectSystem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Services.NuGet.WebProjectSystem._isBindingRedirectSupported">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Services.NuGet.WebProjectSystem"/> class.
            </summary>
            <param name="siteRoot">The site root.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddFrameworkReference(System.String)">
            <summary>
            Adds the framework reference.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.AddReference(System.String,System.IO.Stream)">
            <summary>
            Adds the reference.
            </summary>
            <param name="referencePath">The reference path.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.GetReferencePath(System.String)">
            <summary>
            Gets the reference path.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.IsSupportedFile(System.String)">
            <summary>
            Determines whether [is supported file] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if [is supported file] [the specified path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ReferenceExists(System.String)">
            <summary>
            References the exists.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.RemoveReference(System.String)">
            <summary>
            Removes the reference.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.ResolvePath(System.String)">
            <summary>
            Resolves the path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Services.NuGet.WebProjectSystem.GetPropertyValue(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.IsBindingRedirectSupported">
            <summary>
            Gets a value indicating whether this instance is binding redirect supported.
            </summary>
            <value>
            <c>true</c> if this instance is binding redirect supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
            <value>
            The name of the project.
            </value>
        </member>
        <member name="P:Rock.Services.NuGet.WebProjectSystem.TargetFramework">
            <summary>
            Gets the target framework.
            </summary>
            <value>
            The target framework.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.BlockType">
            <summary>
            System Blocks.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BlockType.PLUGIN_MANAGER">
            <summary>
            Gets the Plugin Manager guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.BlockType.HTML_CONTENT">
            <summary>
            HTML Content Block Type Guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Site">
            <summary>
            System Site guids
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Site.SITE_ROCK_CHMS">
            <summary>
            Gets the default RockChMS Site guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.GroupRole">
            <summary>
            Group Role System Guids
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_FAMILY_MEMBER_ADULT">
            <summary>
            Gets the adult family member role
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_FAMILY_MEMBER_CHILD">
            <summary>
            Gets the child family member role
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_KNOWN_RELATIONSHIPS_OWNER">
            <summary>
            Gets the Known Relationships owner role.
            </summary>
            <value>
            The role Guid
            </value>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_IMPLIED_RELATIONSHIPS_OWNER">
            <summary>
            Gets the Implied Relationships owner role.
            </summary>
            <value>
            The role Guid.
            </value>
        </member>
        <member name="F:Rock.SystemGuid.GroupRole.GROUPROLE_IMPLIED_RELATIONSHIPS_RELATED">
            <summary>
            Gets the Implied Relationships related role.
            </summary>
            <value>
            The role Guid.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.DefinedValue">
            <summary>
            Static Guids used by the Rock ChMS application
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.COMMUNICATION_CHANNEL_EMAIL">
            <summary>
            Email communication
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CHECKIN_SEARCH_TYPE_PHONE_NUMBER">
            <summary>
            Phone number search type
            
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CHECKIN_SEARCH_TYPE_BARCODE">
            <summary>
            Barcode Search Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_CHECKIN_KIOSK">
            <summary>
            Check-in Kiosk device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_GIVING_KIOSK">
            <summary>
            Giving Kiosk device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.DEVICE_TYPE_PRINTER">
            <summary>
            Printer device type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH">
            <summary>
            Cash
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_CONTRIBUTION">
            <summary>
            A Contribution Transaction
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_EVENT_REGISTRATION">
            <summary>
            An Event Registration Transaction
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_CHECK_FRONT">
            <summary>
            Front of Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_CHECK_BACK">
            <summary>
            Back of Check
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_ENVELOPE_FRONT">
            <summary>
            Front of Envelope
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_IMAGE_TYPE_ENVELOPE_BACK">
            <summary>
            Back of Envelope
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_TYPE_ONE_TIME">
            <summary>
            One Time
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_TYPE_ONE_TIME_FUTURE">
            <summary>
            One Time (Future)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_PAYMENT_TYPE_CREDIT_CARD">
            <summary>
            Credit Card
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.TRANSACTION_PAYMENT_TYPE_CHECKING">
            <summary>
            Checking/ACH 
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.NOTE_TYPE_MANUAL_NOTE">
            <summary>
            Manually entered note.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_PHONE_TYPE_PRIMARY">
            <summary>
            Person Primary Phone
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_PHONE_TYPE_SECONDARY">
            <summary>
            Person Secondary Phone
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_ACTIVE">
            <summary>
            Active Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_INACTIVE">
            <summary>
            Inactive Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_STATUS_PENDING">
            <summary>
            Pending Record Status
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_TYPE_PERSON">
            <summary>
            Person Record Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedValue.PERSON_RECORD_TYPE_BUSINESS">
            <summary>
            Business Record Type
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.GroupType">
            <summary>
            System Group Types
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_SECURITY_ROLE">
            <summary>
            Gets the Security Role group type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY">
            <summary>
            Gets the Family group type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.GroupType.GROUPTYPE_EVENTATTENDEES">
            <summary>
            Gets the Event Attendees GroupType
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.FieldType">
            <summary>
            System Blocks.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.BINARY_FILE">
            <summary>
            Binary File field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.BOOLEAN">
            <summary>
            Boolean field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DATE">
            <summary>
            Date field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.DEFINED_VALUE">
            <summary>
            Defined value field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.MULTI_SELECT">
            <summary>
            Multi Select field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.INTEGER">
            <summary>
            Integer field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.IMAGE">
            <summary>
            Image field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.SINGLE_SELECT">
            <summary>
            Single Select field type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.FieldType.TEXT">
            <summary>
            Text field type
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Group">
            <summary>
            System Groups
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Group.GROUP_ADMINISTRATORS">
            <summary>
            Gets the administrator group guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Group.GROUP_STAFF_MEMBERS">
            <summary>
            Gets the staff member group guid
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.DefinedType">
            <summary>
            Static Guids used by the Rock ChMS application
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.COMMUNICATION_CHANNEL">
            <summary>
            The types of communication supported (i.e. email, sms, twitter, app-push, etc)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.CHECKIN_SEARCH_TYPE">
            <summary>
            Guid for checkin search type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.DEVICE_TYPE">
            <summary>
            Guid for Device Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_ACCOUNT_TYPE">
            <summary>
            Guid for Financial Currency Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_CURRENCY_TYPE">
            <summary>
            Guid for Financial Currency Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE">
            <summary>
            Guid for Financial Credit Card Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_PAYMENT_TYPE">
            <summary>
            Guid for Financial Payment Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_PLEDGE_FREQUENCY">
            <summary>
            Guid for the Financial Pledge Frequency 
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_SOURCE_TYPE">
            <summary>
            Guid for Financial Source Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_FREQUENCY">
            <summary>
            Guid for Financial Frequency 
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON">
            <summary>
            Guid for Financial Transaction Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_IMAGE_TYPE">
            <summary>
            Guid for Financial transaction image type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_TYPE">
            <summary>
            Guid for Financial Transaction Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.LOCATION_LOCATION_TYPE">
            <summary>
            Guid for the types of Locations (such as Home, Main Office, etc)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.LOCATION_ADDRESS_STATE">
            <summary>
            Guid for the types of States that can be tied to a Location's address.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.MARKETING_CAMPAIGN_AUDIENCE_TYPE">
            <summary>
            Guid for Marketing Campaign Audience Type
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.METRIC_COLLECTION_FREQUENCY">
            <summary>
            Metric Collection Frequency
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_TYPE">
            <summary>
            Guid for the types of Person Records (such as person, business, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_STATUS">
            <summary>
            Guid for the types of Person Record Statuses (such as active, inactive, pending, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_RECORD_STATUS_REASON">
            <summary>
            Guid for the types of Person Status Reasons (such as deceased, moved, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_STATUS">
            <summary>
            Guid for the person status (such as member, attendee, participant, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_TITLE">
            <summary>
            Guid for the types of Person Titles (such as Mr., Mrs., Dr., etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_SUFFIX">
            <summary>
            Guid for the types of Person Suffixes (such as Jr., Sr., etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS">
            <summary>
            Guid for the types of Person Marital Statuses (such as Married, Single, Divorced, Widowed, etc.)
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE">
            <summary>
            Guid for the types of Person phone numbers (such as Primary, Secondary, etc.)
            </summary>
        </member>
        <member name="P:Rock.SystemGuid.DefinedType.FINANCIAL_BATCH_TYPE">
            <summary>
            Guid for the types of Batches (ACH, Visa, MasterCard, Discover, Amex, and PayPal)
            </summary>
        </member>
        <member name="T:Rock.SystemGuid.Page">
            <summary>
            System Pages.  NOTE: Some of these are referenced in Migrations to avoid string-typos.
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Page.PLUGIN_SETTINGS">
            <summary>
            Gets the Plugin Settings guid
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.Page.PLUGIN_MANAGER">
            <summary>
            Gets the Plugin Manager guid
            </summary>
        </member>
        <member name="T:Rock.Transactions.AuditTransaction">
            <summary>
            Writes entity audits 
            </summary>
        </member>
        <member name="M:Rock.Transactions.AuditTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.AuditTransaction.Audits">
            <summary>
            Gets or sets the audits.
            </summary>
            <value>
            The audits.
            </value>
        </member>
        <member name="T:Rock.Transactions.WorkflowTriggerTransaction">
            <summary>
            Writes any entity chnages that are configured to be tracked
            </summary>
        </member>
        <member name="M:Rock.Transactions.WorkflowTriggerTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.Trigger">
            <summary>
            Gets or sets the workflow trigger.
            </summary>
            <value>
            The workflow trigger.
            </value>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="P:Rock.Transactions.WorkflowTriggerTransaction.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="T:Rock.Transactions.UserLastActivityTransaction">
            <summary>
            Tracks when a person is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.UserLastActivityTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.UserId">
            <summary>
            Gets or sets the user id.
            </summary>
            <value>
            The user id.
            </value>
        </member>
        <member name="P:Rock.Transactions.UserLastActivityTransaction.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
            <value>
            The last activity date.
            </value>
        </member>
        <member name="T:Rock.Transactions.PersonViewTransaction">
            <summary>
            Tracks when a person is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.PersonViewTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.ViewerPersonId">
            <summary>
            Gets or sets the viewer person id.
            </summary>
            <value>
            The viewer person id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.TargetPersonId">
            <summary>
            Gets or sets the target person id.
            </summary>
            <value>
            The target person id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.IPAddress">
            <summary>
            Gets or sets the IP address that requested the page.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.Source">
            <summary>
            Gets or sets the source of the view (site id or application name)
            </summary>
            <value>
            Source.
            </value>
        </member>
        <member name="P:Rock.Transactions.PersonViewTransaction.DateViewed">
            <summary>
            Gets or sets the DateTime the person was viewed.
            </summary>
            <value>
            Date Viewed.
            </value>
        </member>
        <member name="T:Rock.Transactions.PageViewTransaction">
            <summary>
            Tracks when a page is viewed.
            </summary>
        </member>
        <member name="M:Rock.Transactions.PageViewTransaction.Execute">
            <summary>
            Execute method to write transaction to the database.
            </summary>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.PageId">
            <summary>
            Gets or sets the Page Id.
            </summary>
            <value>
            Page Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.SiteId">
            <summary>
            Gets or sets the Site Id.
            </summary>
            <value>
            Site Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.PersonId">
            <summary>
            Gets or sets the Person Id.
            </summary>
            <value>
            Person Id.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.DateViewed">
            <summary>
            Gets or sets the DateTime the page was viewed.
            </summary>
            <value>
            Date Viewed.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.IPAddress">
            <summary>
            Gets or sets the IP address that requested the page.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="P:Rock.Transactions.PageViewTransaction.UserAgent">
            <summary>
            Gets or sets the browser vendor and version.
            </summary>
            <value>
            IP Address.
            </value>
        </member>
        <member name="T:Rock.Transactions.RockQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Transactions.RockQueue.#cctor">
            <summary>
            Initializes the <see cref="T:Rock.Transactions.RockQueue"/> class.
            </summary>
        </member>
        <member name="P:Rock.Transactions.RockQueue.TransactionQueue">
            <summary>
            Gets or sets the transaction queue.
            </summary>
            <value>
            The transaction queue.
            </value>
        </member>
        <member name="T:Rock.SystemGuid.EmailTemplate">
            <summary>
            System Email Templates
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EmailTemplate.SECURITY_FORGOT_USERNAME">
            <summary>
            Gets the template guid for the Forgot Username email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EmailTemplate.SECURITY_ACCOUNT_CREATED">
            <summary>
            Gets the template guid for the Account Created email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EmailTemplate.SECURITY_CONFIRM_ACCOUNT">
            <summary>
            Gets the template guid for the Confirm Account email
            </summary>
        </member>
        <member name="F:Rock.SystemGuid.EmailTemplate.CONFIG_EXCEPTION_NOTIFICATION">
            <summary>
            Gets the template guid for the Exception Notification email
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActivityType">
            <summary>
            ActivityType POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.IsActive">
            <summary>
            Gets or sets the Active.
            </summary>
            <value>
            Determines is the job is currently active..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.WorkflowTypeId">
            <summary>
            Gets or sets the workflow type id.
            </summary>
            <value>
            The workflow type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Friendly name for the job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.IsActivatedWithWorkflow">
            <summary>
            Gets or sets a value indicating whether this instance is activatedd with workflow.
            </summary>
            <value>
            <c>true</c> if this instance is activatedd with workflow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.WorkflowType">
            <summary>
            Gets or sets the type of the workflow.
            </summary>
            <value>
            The type of the workflow.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.ActionTypes">
            <summary>
            Gets or sets the action types.
            </summary>
            <value>
            The action types.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivityType.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActivityTypeConfiguration">
            <summary>
            ActivityType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActionType">
            <summary>
            ActionType POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ActivityTypeId">
            <summary>
            Gets or sets the activity type id.
            </summary>
            <value>
            The activity type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Friendly name for the job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.IsActionCompletedOnSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is action completed on success.
            </summary>
            <value>
            <c>true</c> if this instance is action completed on success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.IsActivityCompletedOnSuccess">
            <summary>
            Gets or sets a value indicating whether this instance is activity completed on success.
            </summary>
            <value>
            <c>true</c> if this instance is activity completed on success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ActivityType">
            <summary>
            Gets or sets the type of the activity.
            </summary>
            <value>
            The type of the activity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.WorkflowAction">
            <summary>
            Gets the workflow action.
            </summary>
            <value>
            The workflow action.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActionType.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionTypeConfiguration">
            <summary>
            ActionType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowActivity">
            <summary>
            Activity POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.Process(Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this instance.
            </summary>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.AddLogEntry(System.String)">
            <summary>
            Adds a log entry.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.MarkComplete">
            <summary>
            Marks this activity as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.AddSystemLogEntry(System.String)">
            <summary>
            Logs a system event.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowActivity.Activate(Rock.Model.WorkflowActivityType,Rock.Model.Workflow)">
            <summary>
            Activates the specified activity type.
            </summary>
            <param name="activityType">Type of the activity.</param>
            <param name="workflow">The workflow.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.WorkflowId">
            <summary>
            Gets or sets the workflow id.
            </summary>
            <value>
            The workflow id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivityTypeId">
            <summary>
            Gets or sets the activity type id.
            </summary>
            <value>
            The activity type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivatedDateTime">
            <summary>
            Gets or sets the activated date time.
            </summary>
            <value>
            The activated date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.LastProcessedDateTime">
            <summary>
            Gets or sets the last processed date time.
            </summary>
            <value>
            The last processed date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.CompletedDateTime">
            <summary>
            Gets or sets the completed date time.
            </summary>
            <value>
            The completed date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.Workflow">
            <summary>
            Gets or sets the  workflow.
            </summary>
            <value>
            The workflow.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActivityType">
            <summary>
            Gets or sets the type of the activity.
            </summary>
            <value>
            The type of the activity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.Actions">
            <summary>
            Gets or sets the activities.
            </summary>
            <value>
            The activities.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ActiveActions">
            <summary>
            Gets the active actions.
            </summary>
            <value>
            The active actions.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowActivity.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActivityConfiguration">
            <summary>
            Activity Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActivityConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActivityConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowAction">
            <summary>
            Action POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowAction.Process(Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this instance.
            </summary>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
            <exception cref="T:System.SystemException"></exception>
        </member>
        <member name="M:Rock.Model.WorkflowAction.AddLogEntry(System.String)">
            <summary>
            Adds a log entry.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowAction.MarkComplete">
            <summary>
            Marks this action as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.WorkflowAction.AddSystemLogEntry(System.String)">
            <summary>
            Logs a system event.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.WorkflowAction.Activate(Rock.Model.WorkflowActionType,Rock.Model.WorkflowActivity)">
            <summary>
            Activates the specified action type.
            </summary>
            <param name="actionType">Type of the action.</param>
            <param name="activity">The activity.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActivityId">
            <summary>
            Gets or sets the activity id.
            </summary>
            <value>
            The activity id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActionTypeId">
            <summary>
            Gets or sets the activity type id.
            </summary>
            <value>
            The activity type id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.LastProcessedDateTime">
            <summary>
            Gets or sets the last processed date time.
            </summary>
            <value>
            The last processed date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.CompletedDateTime">
            <summary>
            Gets or sets the completed date time.
            </summary>
            <value>
            The completed date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.Activity">
            <summary>
            Gets or sets the  activity.
            </summary>
            <value>
            The activity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ActionType">
            <summary>
            Gets or sets the type of the activity.
            </summary>
            <value>
            The type of the activity.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowAction.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowActionConfiguration">
            <summary>
            Action Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowActionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowActionConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Jobs.ProcessWorkflows">
            <summary>
            Job to process the persisted active workflows
            </summary>
            <author>David Turner</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.ProcessWorkflows.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.ProcessWorkflows.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            fires that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
            <param name="context">The execution context.</param>
            <remarks>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <see cref="T:Quartz.IJobListener"/>s or
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's
            execution.
            </remarks>
        </member>
        <member name="T:Rock.Workflow.Action.CompleteWorkflow">
            <summary>
            Marks a workflow as complete
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.CompleteWorkflow.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.ActivateActivity">
            <summary>
            Activates a new activity for a given activity type
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.ActivateActivity.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.SendEmail">
            <summary>
            Sends email
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.SendEmail.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Workflow.Action.SetStatus">
            <summary>
            Sets a workflow status
            </summary>
        </member>
        <member name="M:Rock.Workflow.Action.SetStatus.Execute(Rock.Model.WorkflowAction,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Executes the specified workflow.
            </summary>
            <param name="action">The action.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTypeService">
            <summary>
            Workflow POCO Service class
            </summary>
            <summary>
            WorkflowType Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowType})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTypeService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeService.CanDelete(Rock.Model.WorkflowType,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowService">
            <summary>
            Workflow POCO Service class
            </summary>
            <summary>
            Workflow Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowService.Activate(Rock.Model.WorkflowType,System.String,System.Nullable{System.Int32})">
            <summary>
            Activates a new worflow instance
            </summary>
            <param name="workflowType">Type of the workflow.</param>
            <param name="name">The name.</param>
            <param name="currentPersonId">The current person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowService.Process(Rock.Model.Workflow,System.Nullable{System.Int32},System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes the specified workflow.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="CurrentPersonId">The current person id.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="M:Rock.Model.WorkflowService.GetActive">
            <summary>
            Gets the active workflows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.WorkflowService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowService.#ctor(Rock.Data.IRepository{Rock.Model.Workflow})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowService.CanDelete(Rock.Model.Workflow,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Workflow.WorkflowActionContainer">
            <summary>
            MEF Container class for WorkflowAction Componenets
            </summary>
        </member>
        <member name="M:Rock.Workflow.WorkflowActionContainer.GetComponent(System.String)">
            <summary>
            Gets the component with the matching Entity Type Name
            </summary>
            <param name="entityTypeName">Name of the entity type.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Workflow.WorkflowActionContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowLogService">
            <summary>
            WorkflowLog Service class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogService.#ctor(Rock.Data.IRepository{Rock.Model.WorkflowLog})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowLogService"/> class
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogService.CanDelete(Rock.Model.WorkflowLog,System.String@)">
            <summary>
            Determines whether this instance can delete the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="errorMessage">The error message.</param>
            <returns>
              <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Model.WorkflowLogExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogExtensionMethods.Clone(Rock.Model.WorkflowLog,System.Boolean)">
            <summary>
            Clones this WorkflowLog object to a new WorkflowLog object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowExtensionMethods.Clone(Rock.Model.Workflow,System.Boolean)">
            <summary>
            Clones this Workflow object to a new Workflow object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowTypeExtensionMethods">
            <summary>
            Generated Extension Methods
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeExtensionMethods.Clone(Rock.Model.WorkflowType,System.Boolean)">
            <summary>
            Clones this WorkflowType object to a new WorkflowType object
            </summary>
            <param name="source">The source.</param>
            <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Model.WorkflowLog">
            <summary>
            WorkflowLog POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLog.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowLog.WorkflowId">
            <summary>
            Gets or sets the workflow id.
            </summary>
            <value>
            The workflow id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.LogDateTime">
            <summary>
            Gets or sets the log date time.
            </summary>
            <value>
            The log date time.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.LogText">
            <summary>
            Gets or sets the log entry.
            </summary>
            <value>
            The log entry.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowLog.Workflow">
            <summary>
            Gets or sets the  workflow.
            </summary>
            <value>
            The workflow.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowLogConfiguration">
            <summary>
            WorkflowLog Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowLogConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowLogConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.Workflow">
            <summary>
            Workflow POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.Workflow.Process(System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Workflow.Process(Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes this instance.
            </summary>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Workflow.AddLogEntry(System.String)">
            <summary>
            Adds a log entry.
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.Workflow.MarkComplete">
            <summary>
            Marks this workflow as complete.
            </summary>
        </member>
        <member name="M:Rock.Model.Workflow.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Model.Workflow.ProcessActivity(System.DateTime,Rock.Data.IEntity,System.Collections.Generic.List{System.String}@)">
            <summary>
            Processes the activity.
            </summary>
            <param name="processStartTime">The process start time.</param>
            <param name="entity">The entity.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Model.Workflow.AddSystemLogEntry(System.String)">
            <summary>
            adds a system log entry
            </summary>
            <param name="logEntry">The log entry.</param>
        </member>
        <member name="M:Rock.Model.Workflow.Activate(Rock.Model.WorkflowType,System.String)">
            <summary>
            Activates the specified workflow type.
            </summary>
            <param name="workflowType">Type of the workflow.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Model.Workflow.WorkflowTypeId">
            <summary>
            Gets or sets the workflow type id.
            </summary>
            <value>
            The workflow type id.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Friendly name for the job..
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.IsProcessing">
            <summary>
            Gets or sets a value indicating whether this instance is processing.
            </summary>
            <value>
            <c>true</c> if this instance is processing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ActivatedDateTime">
            <summary>
            Gets or sets the activated date time.
            </summary>
            <value>
            The activated date time.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.LastProcessedDateTime">
            <summary>
            Gets or sets the last processed date time.
            </summary>
            <value>
            The last processed date time.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.CompletedDateTime">
            <summary>
            Gets or sets the completed date time.
            </summary>
            <value>
            The completed date time.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.WorkflowType">
            <summary>
            Gets or sets the type of the workflow.
            </summary>
            <value>
            The type of the workflow.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.Activities">
            <summary>
            Gets or sets the activities.
            </summary>
            <value>
            The activities.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ActiveActivities">
            <summary>
            Gets the active activities.
            </summary>
            <value>
            The active activities.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.HasActiveActivities">
            <summary>
            Gets a value indicating whether this instance has active activities.
            </summary>
            <value>
            <c>true</c> if this instance has active activities; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.LogEntries">
            <summary>
            Gets or sets the log entries.
            </summary>
            <value>
            The log entries.
            </value>
        </member>
        <member name="P:Rock.Model.Workflow.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowConfiguration">
            <summary>
            Workflow Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowType">
            <summary>
            WorkflowType POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            Determines whether the job is a system job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsActive">
            <summary>
            Gets or sets the is active.
            </summary>
            <value>
            The is active.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Friendly name for the job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.CategoryId">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>
            The category id.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Order">
            <summary>
            Gets or sets the Order.
            </summary>
            <value>
            Order.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.WorkTerm">
            <summary>
            Gets or sets the work term.
            </summary>
            <value>
            The work term.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.ProcessingIntervalSeconds">
            <summary>
            Gets or sets the processing interval seconds.
            </summary>
            <value>
            The processing interval seconds.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.IsPersisted">
            <summary>
            Gets or sets a value indicating whether this instance is persisted.
            </summary>
            <value>
            <c>true</c> if this instance is persisted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.LoggingLevel">
            <summary>
            Gets or sets the logging level.
            </summary>
            <value>
            The logging level.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Model.WorkflowType.ActivityTypes">
            <summary>
            Gets or sets the activity types.
            </summary>
            <value>
            The activity types.
            </value>
        </member>
        <member name="T:Rock.Model.WorkflowTypeConfiguration">
            <summary>
            WorkflowType Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.WorkflowTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.WorkflowTypeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.WorkflowLoggingLevel">
            <summary>
            The level of details to log
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.None">
            <summary>
            Don't log any details
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Workflow">
            <summary>
            Log workflow events
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Activity">
            <summary>
            Log workflow and activity events
            </summary>
        </member>
        <member name="F:Rock.Model.WorkflowLoggingLevel.Action">
            <summary>
            Log workflow, activity, and action events
            </summary>
        </member>
        <member name="T:Rock.Model.ServiceJob">
            <summary>
            Job POCO Entity.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJob.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Rock.Model.ServiceJob.IsSystem">
            <summary>
            Gets or sets the System.
            </summary>
            <value>
            Determines whether the job is a system job..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.IsActive">
            <summary>
            Gets or sets the Active.
            </summary>
            <value>
            Determines is the job is currently active..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value>
            Friendly name for the job..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Description">
            <summary>
            Gets or sets the Description.
            </summary>
            <value>
            Notes about the job..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Assembly">
            <summary>
            Gets or sets the Assembly.
            </summary>
            <value>
            Assembly (.dll) that contains the job class..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.Class">
            <summary>
            Gets or sets the Class.
            </summary>
            <value>
            The class name of the job to run..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.CronExpression">
            <summary>
            Gets or sets the Cron Expression.
            </summary>
            <value>
            The cron expression that is used to determine the schedule of the job (see http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger for syntax.).
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastSuccessfulRunDateTime">
            <summary>
            Gets or sets the Last Successful Run.
            </summary>
            <value>
            Date and time the job last completed successfully..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunDateTime">
            <summary>
            Gets or sets the Last Run Date.
            </summary>
            <value>
            Last date and time the job attempted to run..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunDurationSeconds">
            <summary>
            Gets or sets the Last Run Duration.
            </summary>
            <value>
            Number of seconds that the last job took to finish..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastStatus">
            <summary>
            Gets or sets the Last Status.
            </summary>
            <value>
            The completion status from the last time the job was run (valid values 'Success', 'Exception', 'Error Loading Job')..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastStatusMessage">
            <summary>
            Gets or sets the Last Status Message.
            </summary>
            <value>
            Message from the last run.  Usually used to store the exception message..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.LastRunSchedulerName">
            <summary>
            Gets or sets the Last Run Scheduler Name.
            </summary>
            <value>
            Name of the scheduler that the job ran under.  This is used to determine if a job ran in IIS or the Windows service..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.NotificationEmails">
            <summary>
            Gets or sets the Notification Emails.
            </summary>
            <value>
            Email addresses (separated with commas) to be used for notification..
            </value>
        </member>
        <member name="P:Rock.Model.ServiceJob.NotificationStatus">
            <summary>
            Gets or sets the Notification Status.
            </summary>
            <value>
            Enum[JobNotificationStatus].
            </value>
        </member>
        <member name="T:Rock.Model.ServiceJobConfiguration">
            <summary>
            Job Configuration class.
            </summary>
        </member>
        <member name="M:Rock.Model.ServiceJobConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Model.ServiceJobConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Rock.Model.JobNotificationStatus">
            <summary>
            Job notification status
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.All">
            <summary>
            Notify on all status
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.Success">
            <summary>
            Notify when successful
            </summary>
            
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.Error">
            <summary>
            Notify when an error occurs
            </summary>
        </member>
        <member name="F:Rock.Model.JobNotificationStatus.None">
            <summary>
            Notify when a warning occurs
            </summary>
        </member>
        <member name="T:Rock.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rock.Version.Current">
            <summary>
            Gets the current.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.AttributeCache">
            <summary>
            Information about an attribute that is required by the rendering engine.
            This information will be cached by Rock. 
            
            NOTE: Because this attribute object is cached and shared by all entities 
            using the attribute, a particlar instance's values are not included as a 
            property of this attribute object.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CopyFromModel(Rock.Model.Attribute)">
            <summary>
            Copies from model.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CopyFromModel(Rock.Model.Attribute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Copies from model.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="qualifiers">The qualifiers.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CreateControl">
            <summary>
            Creates the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.CreateControl(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Web.UI.Control"/> based on the attribute's field type.
            </summary>
            <param name="value">The value.</param>
            <param name="setValue">if set to <c>true</c> set the control's value</param>
            <param name="setId">if set to <c>true</c> [set id].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsAuthorized(System.String,Rock.Model.Person)">
            <summary>
            Return <c>true</c> if the user is authorized to perform the selected action on this object.
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsAllowedByDefault(System.String)">
            <summary>
            If a user or role is not specifically allowed or denied to perform the selected action,
            return <c>true</c> if they should be allowed anyway or <c>false</c> if not.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.IsPrivate(System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified action is private (Only the current user has access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified action is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.MakePrivate(System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the action on the current entity private (Only the current user will have access).
            </summary>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The current person id.</param>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(System.Int32)">
            <summary>
            Returns Attribute object from cache.  If attribute does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id of the Attribute to read</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(Rock.Model.Attribute)">
            <summary>
            Adds Attribute model to cache, and returns cached object
            </summary>
            <param name="attributeModel">The attributeModel to cache</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Read(Rock.Model.Attribute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds Attribute model to cache, and returns cached object.  
            </summary>
            <param name="attributeModel">The attribute model.</param>
            <param name="qualifiers">The qualifiers.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.AttributeCache.Flush(System.Int32)">
            <summary>
            Removes attribute from cache
            </summary>
            <param name="id">The id of the attribute to remove from cache</param>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeQualifierColumn">
            <summary>
            Gets or sets the entity type qualifier column.
            </summary>
            <value>
            The entity type qualifier column.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.EntityTypeQualifierValue">
            <summary>
            Gets or sets the entity type qualifier value.
            </summary>
            <value>
            The entity type qualifier value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsGridColumn">
            <summary>
            Gets or sets a value indicating whether this instance is grid column.
            </summary>
            <value>
            <c>true</c> if this instance is grid column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsMultiValue">
            <summary>
            Gets or sets a value indicating whether this instance is multi value.
            </summary>
            <value>
            <c>true</c> if this instance is multi value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.QualifierValues">
            <summary>
            Gets the qualifier values if any have been defined for the attribute
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.TypeId">
            <summary>
            Gets the Entity Type ID for this entity.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.TypeName">
            <summary>
            The auth entity. Classes that implement the <see cref="T:Rock.Security.ISecured"/> interface should return
            a value that is unique across all <see cref="T:Rock.Security.ISecured"/> classes.  Typically this is the
            qualified name of the class.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.ParentAuthority">
            <summary>
            A parent authority.  If a user is not specifically allowed or denied access to
            this object, Rock will check access to the parent authority specified by this property.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.AttributeCache.SupportedActions">
            <summary>
            A list of actions that this class supports.
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.BlockTypeCache">
            <summary>
            Information about a block type that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(System.Int32)">
            <summary>
            Returns Block Type object from cache.  If block does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Read(Rock.Model.BlockType)">
            <summary>
            Reads the specified block type model.
            </summary>
            <param name="blockTypeModel">The block type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockTypeCache.Flush(System.Int32)">
            <summary>
            Removes block type from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.IsInstancePropertiesVerified">
            <summary>
            Gets a value indicating whether the <see cref="T:Rock.Attribute.TextFieldAttribute"/> attributes have been
            verified for the block type.  If not, Rock will create and/or update the attributes associated with the block.
            </summary>
            <value>
            <c>true</c> if attributes have already been verified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockTypeCache.CheckedAdditionalSecurityActions">
            <summary>
            Gets or sets a value indicating whether [checked additional security actions].
            </summary>
            <value>
            <c>true</c> if [checked additional security actions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.BlockCache">
            <summary>
            Information about a block that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns Block object from cache.  If block does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id.</param>
            <param name="siteId">The site id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(System.Guid,System.Nullable{System.Int32})">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <param name="siteId">The site id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Read(Rock.Model.Block,System.Nullable{System.Int32})">
            <summary>
            Adds Block model to cache, and returns cached object
            </summary>
            <param name="blockModel">The block model.</param>
            <param name="siteId">The site id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.BlockCache.Flush(System.Int32)">
            <summary>
            Removes block from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.PageId">
            <summary>
            Gets or sets the page id.
            </summary>
            <value>
            The page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.SiteId">
            <summary>
            Gets or sets the site id.
            </summary>
            <value>
            The site id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Layout">
            <summary>
            Gets or sets the layout.
            </summary>
            <value>
            The layout.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockTypeId">
            <summary>
            Gets or sets the block type id.
            </summary>
            <value>
            The block type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Zone">
            <summary>
            Gets or sets the zone.
            </summary>
            <value>
            The zone.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.OutputCacheDuration">
            <summary>
            Gets or sets the duration of the output cache.
            </summary>
            <value>
            The duration of the output cache.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Page">
            <summary>
            Gets the page.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.Site">
            <summary>
            Gets the <see cref="P:Rock.Web.Cache.BlockCache.Site"/> object for the block.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockType">
            <summary>
            Gets the block type
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.SupportedActions">
            <summary>
            Gets the supported actions.
            </summary>
            <value>
            The supported actions.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.BlockCache.BlockLocation">
            <summary>
            Gets the block location.
            </summary>
            <value>
            The block location.
            </value>
        </member>
        <member name="T:Rock.Security.Role">
            <summary>
            Information about a Role that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Security.Role.#ctor">
            <summary>
            Use Static Read() method to instantiate a new Role object
            </summary>
        </member>
        <member name="M:Rock.Security.Role.IsUserInRole(System.String)">
            <summary>
            Is user in role
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.CacheKey(System.Int32)">
            <summary>
            Caches the key.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.Read(System.Int32)">
            <summary>
            Returns Role object from cache.  If role does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.AllRoles">
            <summary>
            Returns a list of all the possible Roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Role.Flush(System.Int32)">
            <summary>
            Removes role from cache
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:Rock.Security.Role.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Rock.Security.Role.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Rock.Security.Role.Users">
            <summary>
            Gets the users that belong to the role
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.CampusCache">
            <summary>
            Information about a campus that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.CacheKey(System.Int32)">
            <summary>
            Gets the cache key for the selected campu id.
            </summary>
            <param name="id">The campus id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(System.Int32)">
            <summary>
            Returns Campus object from cache.  If campus does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Read(Rock.Model.Campus)">
            <summary>
            Adds Campus model to cache, and returns cached object
            </summary>
            <param name="campusModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.CampusCache.Flush(System.Int32)">
            <summary>
            Removes campus from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.CampusCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.CampusCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.EntityTypeCache">
            <summary>
            Information about a entityType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetEntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.CopyFromModel(Rock.Model.EntityType)">
            <summary>
            Copies from model.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetId(System.Type)">
            <summary>
            Gets the id.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.GetId(System.String)">
            <summary>
            Gets the id.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Type)">
            <summary>
            Reads the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.String)">
            <summary>
            Returns EntityType object from cache.  If entityBlockType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.String,System.Boolean)">
            <summary>
            Reads the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="createNew">if set to <c>true</c> [create new].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Int32)">
            <summary>
            Returns EntityType object from cache.  If entityBlockType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Read(Rock.Model.EntityType)">
            <summary>
            Reads the specified field type model.
            </summary>
            <param name="entityTypeModel">The field type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.EntityTypeCache.Flush(System.Int32)">
            <summary>
            Removes entityType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>
            The GUID.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>
            The name of the assembly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.FriendlyName">
            <summary>
            Gets or sets the name of the friendly.
            </summary>
            <value>
            The name of the friendly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.IsEntity">
            <summary>
            Gets or sets a value indicating whether this instance is entity.
            </summary>
            <value>
              <c>true</c> if this instance is entity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.EntityTypeCache.IsSecured">
            <summary>
            Gets or sets a value indicating whether this instance is secured.
            </summary>
            <value>
            <c>true</c> if this instance is secured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.DefinedTypeCache">
            <summary>
            Information about a definedType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(System.Int32)">
            <summary>
            Returns DefinedType object from cache.  If definedType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Read(Rock.Model.DefinedType)">
            <summary>
            Reads the specified defined type model.
            </summary>
            <param name="definedTypeModel">The defined type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedTypeCache.Flush(System.Int32)">
            <summary>
            Removes definedType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.FieldTypeId">
            <summary>
            Gets or sets the field type id.
            </summary>
            <value>
            The field type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedTypeCache.DefinedValues">
            <summary>
            Gets the defined values.
            </summary>
            <value>
            The defined values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.DefinedValueCache">
            <summary>
            Information about a definedValue that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies the model property values to the DTO properties
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.Int32)">
            <summary>
            Returns DefinedValue object from cache.  If definedValue does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.String)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Read(Rock.Model.DefinedValue)">
            <summary>
            Reads the specified defined value model.
            </summary>
            <param name="definedValueModel">The defined value model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.DefinedValueCache.Flush(System.Int32)">
            <summary>
            Removes definedValue from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.DefinedTypeId">
            <summary>
            Gets or sets the defined type id.
            </summary>
            <value>
            The defined type id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.DefinedType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.DefinedValueCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.GlobalAttributesCache">
            <summary>
            Global Attributes
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.#ctor">
            <summary>
            Use Static Read() method to instantiate a new Global Attributes object
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.GetValue(System.String)">
            <summary>
            Gets the Global Attribute values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.SetValue(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="currentPersonId">The current person id.</param>
            <param name="saveValue">if set to <c>true</c> [save value].</param>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.Read">
            <summary>
            Returns Global Attributes from cache.  If they are not already in cache, they
            will be read and added to cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.GlobalAttributesCache.Flush">
            <summary>
            Removes Global Attributes from cache
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.GlobalAttributesCache.AttributeKeys">
            <summary>
            Gets or sets the attribute keys.
            </summary>
            <value>
            The attribute keys.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.GlobalAttributesCache.AttributeValues">
            <summary>
            Gets or sets the attribute values.
            </summary>
            <value>
            The attribute values.
            </value>
        </member>
        <member name="T:Rock.Web.Cache.FieldTypeCache">
            <summary>
            Information about a fieldType that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.Int32)">
            <summary>
            Returns FieldType object from cache.  If fieldType does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.String)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Read(Rock.Model.FieldType)">
            <summary>
            Reads the specified field type model.
            </summary>
            <param name="fieldTypeModel">The field type model.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.FieldTypeCache.Flush(System.Int32)">
            <summary>
            Removes fieldType from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.FieldTypeCache.Field">
            <summary>
            Gets the field 
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.SiteCache">
            <summary>
            Information about a site that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(System.Int32)">
            <summary>
            Returns Site object from cache.  If site does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Read(Rock.Model.Site)">
            <summary>
            Adds Site model to cache, and returns cached object
            </summary>
            <param name="siteModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.SiteCache.Flush(System.Int32)">
            <summary>
            Removes site from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.Theme">
            <summary>
            Gets or sets the theme.
            </summary>
            <value>
            The theme.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPageId">
            <summary>
            Gets or sets the default page id.
            </summary>
            <value>
            The default page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.FaviconUrl">
            <summary>
            Gets or sets the favicon URL.
            </summary>
            <value>
            The favicon URL.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.AppleTouchIconUrl">
            <summary>
            Gets or sets the apple touch icon URL.
            </summary>
            <value>
            The apple touch icon URL.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.FacebookAppId">
            <summary>
            Gets or sets the facebook app id.
            </summary>
            <value>
            The facebook app id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.FacebookAppSecret">
            <summary>
            Gets or sets the facebook app secret.
            </summary>
            <value>
            The facebook app secret.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.LoginPageReference">
            <summary>
            Gets or sets the login page reference.
            </summary>
            <value>
            The login page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.RegistrationPageReference">
            <summary>
            Gets or sets the registration page reference.
            </summary>
            <value>
            The registration page reference.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.ErrorPage">
            <summary>
            Gets or sets the error page.
            </summary>
            <value>
            The error page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.SiteCache.DefaultPage">
            <summary>
            Gets the default page.
            </summary>
        </member>
        <member name="T:Rock.Web.Cache.PageCache">
            <summary>
            Information about a page that is required by the rendering engine.
            This information will be cached by the engine
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.CopyFromModel(Rock.Data.IEntity)">
            <summary>
            Copies from model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.DisplayInNav(Rock.Model.Person)">
            <summary>
              <c>true</c> or <c>false</c> value of whether the page can be displayed in a navigation menu
            based on the <see cref="P:Rock.Web.Cache.PageCache.DisplayInNavWhen"/> property value and the security of the currently logged in user
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetCurrentContext(System.String)">
            <summary>
            Gets the current context object for a given entity type.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetPageHierarchy">
            <summary>
            Gets all the pages in the current hierarchy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushBlocks">
            <summary>
            Flushes the cached block instances.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushChildPages">
            <summary>
            Flushes the cached child pages.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.BlockContentUpdated(System.Object)">
            <summary>
            Fires the block content updated event.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.SaveSharedItem(System.String,System.Object)">
            <summary>
            Used to save an item to the current HTTPRequests items collection.  This is useful if multiple blocks
            on the same page will need access to the same object.  The first block can read the object and save
            it using this method for the other blocks to reference
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.GetSharedItem(System.String)">
            <summary>
            Retrieves an item from the current HTTPRequest items collection.  This is useful to retrieve an object
            that was saved by a previous block on the same page.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.AddCSSLink(System.Web.UI.Page,System.String)">
            <summary>
            Adds a new CSS link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">Current System.Web.UI.Page</param>
            <param name="href">Path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.AddCSSLink(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Adds a new CSS link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">The page.</param>
            <param name="href">The href.</param>
            <param name="mediaType">MediaType to use in the css link.</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.AddMetaTag(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            Adds a meta tag to the page header priore to the page being rendered
            </summary>
            <param name="page">The page.</param>
            <param name="htmlMeta">The HTML meta tag.</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.AddHtmlLink(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlLink)">
            <summary>
            Adds a new Html link that will be added to the page header prior to the page being rendered
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.AddScriptLink(System.Web.UI.Page,System.String)">
            <summary>
            Adds a new script tag to the page header prior to the page being rendered
            </summary>
            <param name="page">Current System.Web.UI.Page</param>
            <param name="path">Path to script file.  Should be relative to layout template.  Will be resolved at runtime</param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.MenuXml(Rock.Model.Person)">
            <summary>
            Returns XML for a page menu.  XML will be 1 level deep
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.MenuXml(System.Int32,Rock.Model.Person,Rock.Web.Cache.PageCache,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns XML for a page menu.
            </summary>
            <param name="levelsDeep">The page levels deep.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FormatPath(System.String,System.String)">
            <summary>
            Formats the page url based on the selected theme and layout
            </summary>
            <param name="theme"></param>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.CacheKey(System.Int32)">
            <summary>
            Gets the cache key for the selected page id.
            </summary>
            <param name="pageId">The page id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(System.Int32)">
            <summary>
            Returns Page object from cache.  If page does not already exist in cache, it
            will be read and added to cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(System.Guid)">
            <summary>
            Reads the specified GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Read(Rock.Model.Page)">
            <summary>
            Adds Page model to cache, and returns cached object
            </summary>
            <param name="pageModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.Flush(System.Int32)">
            <summary>
            Removes page from cache
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushLayout(System.String)">
            <summary>
            Flushes all the pages that use a specific layout.
            </summary>
        </member>
        <member name="M:Rock.Web.Cache.PageCache.FlushLayoutBlocks(System.String)">
            <summary>
            Flushes the block instances for all the pages that use a specific layout.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentPageId">
            <summary>
            Gets or sets the parent page id.
            </summary>
            <value>
            The parent page id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is system.
            </summary>
            <value>
              <c>true</c> if this instance is system; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.SiteId">
            <summary>
            Gets or sets the site id.
            </summary>
            <value>
            The site id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Layout">
            <summary>
            Gets or sets the layout.
            </summary>
            <value>
            The layout.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.RequiresEncryption">
            <summary>
            Gets or sets a value indicating whether [requires encryption].
            </summary>
            <value>
              <c>true</c> if [requires encryption]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.EnableViewState">
            <summary>
            Gets or sets a value indicating whether [enable view state].
            </summary>
            <value>
              <c>true</c> if [enable view state]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayTitle">
            <summary>
            Gets or sets a value indicating whether [page display title].
            </summary>
            <value>
              <c>true</c> if [page display title]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayBreadCrumb">
            <summary>
            Gets or sets a value indicating whether [page display breadcrumb].
            </summary>
            <value>
            <c>true</c> if [page display breadcrumb]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [page display icon].
            </summary>
            <value>
              <c>true</c> if [page display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageDisplayDescription">
            <summary>
            Gets or sets a value indicating whether [page display description].
            </summary>
            <value>
            <c>true</c> if [page display description]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.DisplayInNavWhen">
            <summary>
            Gets or sets the display in nav when.
            </summary>
            <value>
            The display in nav when.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayDescription">
            <summary>
            Gets or sets a value indicating whether [menu display description].
            </summary>
            <value>
            <c>true</c> if [menu display description]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [menu display icon].
            </summary>
            <value>
              <c>true</c> if [menu display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.MenuDisplayChildPages">
            <summary>
            Gets or sets a value indicating whether [menu display child pages].
            </summary>
            <value>
            <c>true</c> if [menu display child pages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbDisplayName">
            <summary>
            Gets or sets a value indicating whether [breadcrumb display name].
            </summary>
            <value>
            <c>true</c> if [breadcrumb display name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbDisplayIcon">
            <summary>
            Gets or sets a value indicating whether [breadcrumb display icon].
            </summary>
            <value>
            <c>true</c> if [breadcrumb display icon]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IconCssClass">
            <summary>
            Gets or sets the icon CSS class.
            </summary>
            <value>
            The icon CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.OutputCacheDuration">
            <summary>
            Gets or sets the duration of the output cache.
            </summary>
            <value>
            The duration of the output cache.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IconFileId">
            <summary>
            Gets or sets the icon file id.
            </summary>
            <value>
            The icon file id.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.IncludeAdminFooter">
            <summary>
            Gets or sets a value indicating whether [include admin footer].
            </summary>
            <value>
              <c>true</c> if [include admin footer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentPage">
            <summary>
            Gets the parent page.
            </summary>
            <value>
            The parent page.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Site">
            <summary>
            Gets the <see cref="P:Rock.Web.Cache.PageCache.Site"/> object for the page.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Pages">
            <summary>
            Gets a List of child <see cref="T:Rock.Web.Cache.PageCache"/> objects.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Blocks">
            <summary>
            Gets a List of all the <see cref="T:Rock.Web.Cache.BlockCache"/> objects configured for the page and the page's layout.
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.PageContexts">
            <summary>
            Gets or sets the page contexts that have been defined for the page
            </summary>
            <value>
            The page contexts.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.Context">
            <summary>
            Gets a dictionary of the current context items (models).
            </summary>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.ParentAuthority">
            <summary>
            Gets the parent authority.
            </summary>
            <value>
            The parent authority.
            </value>
        </member>
        <member name="P:Rock.Web.Cache.PageCache.BreadCrumbText">
            <summary>
            Gets the bread crumb text.
            </summary>
            <value>
            The bread crumb text.
            </value>
        </member>
        <member name="E:Rock.Web.Cache.PageCache.OnBlockContentUpdated">
            <summary>
            Occurs when a block on the page updates content.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.ContextAwareAttribute">
            <summary>
            Custom attribute used to decorate Rock Blocks that require context.  If entity type is not 
            included in the attribute, a block property will automatically be added for user to set 
            the entity type when block is placed on a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ContextAwareAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ContextAwareAttribute"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.ContextAwareAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.ContextAwareAttribute"/> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="P:Rock.Web.UI.ContextAwareAttribute.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>
            The type of the entity.
            </value>
        </member>
        <member name="P:Rock.Web.UI.ContextAwareAttribute.DefaultParameterName">
            <summary>
            Gets the default name of the parameter.
            </summary>
            <value>
            The default name of the parameter.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.CampusesPicker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.CampusesPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.CampusPicker"/> class.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.Campuses">
            <summary>
            Gets or sets the campuses.
            </summary>
            <value>
            The campuses.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.AvailableCampusIds">
            <summary>
            Gets the available campus ids.
            </summary>
            <value>
            The available campus ids.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.CampusesPicker.SelectedCampusIds">
            <summary>
            Gets the selected campus ids.
            </summary>
            <value>
            The selected campus ids.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalAlert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalAlert.Show(System.String,Rock.Web.UI.Controls.ModalAlertType)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="alertType">Type of the message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalAlert.Hide">
            <summary>
            Hides this instance.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalAlert.ScriptKey">
            <summary>
            Gets the script key.
            </summary>
            <value>
            The script key.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalAlertType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Alert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.ModalAlertType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalDialog">
            <summary>
            A Modal Popup Dialog Window
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Init"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalDialog.SaveLink_ServerClick(System.Object,System.EventArgs)">
            <summary>
            Handles the ServerClick event of the SaveLink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.IsDefaultSaveDisabled">
            <summary>
            Gets or sets a value indicating whether the default save behavior should be enabled.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ModalDialog.Content">
            <summary>
            The content of the popup.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.ModalDialog.SaveClick">
            <summary>
            Occurs when the save button is clicked.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledRadioButtonList">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledRadioButtonList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledRadioButtonList.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledRadioButtonList.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledRadioButtonList.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledRadioButtonList.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.EnumField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EnumField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField" /> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateTimeField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateTimeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateTimeField"/> class.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DateField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DateField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DateField"/> class.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditValueField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for editing the value of a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.EditValueField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueField.editValueFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the editValueFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditValueField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditValueFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.EditValueField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditValueFieldTemplate.lbEditValue_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbEdit control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditValueFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.lbFilter_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbFilter control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the rendered content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.GetUserPreference(System.String)">
            <summary>
            Gets the user preference for a given key if it exists
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.SaveUserPreference(System.String,System.String)">
            <summary>
            Adds or updates an item in the User Preferences dictionary
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridFilter.ApplyFilterClick">
            <summary>
            Occurs when user applies a filter.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridFilter.DisplayFilterValue">
            <summary>
            Occurs when grid filter displays an existing filter value.  Key and Value can be 
            updated to a more human-readable form if needed.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs">
            <summary>
            Argument for DisplayFilterValue event
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridFilter.DisplayFilterValueArgs.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledText">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.Literal"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledText.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledText.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledText.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledText.TextCssClass">
            <summary>
            Gets or sets the text CSS class.
            </summary>
            <value>
            The text CSS class.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledText.Text">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ModalIFrameDialog">
            <summary>
            A Modal Popup Dialog Window
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Init"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ModalIFrameDialog.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.ImageUploader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a label and <see cref="T:System.Web.UI.WebControls.TextBox"/> control to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> that receives the rendered output.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.ImageUploader.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.ImageId">
            <summary>
            Gets or sets a value indicating whether [display required indicator].
            </summary>
            <value>
                <c>true</c> if [display required indicator]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.ImageUploader.Enabled">
            <summary>
            Gets or sets a value indicating whether the Web server control is enabled.
            </summary>
            <returns>true if control is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageTitle">
            <summary>
            Renders the title of a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PageTitle.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.FieldTypeList">
            <summary>
            A composite control that renders a label, dropdownlist, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DataDropDownList">
            <summary>
            A composite control that renders a label, dropdownlist, and datavalidation control for a specific field of a data model
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.ShowErrorMessage(System.String)">
            <summary>
            Shows the error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DataDropDownList.RenderDataValidator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders any data validators.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.SourceTypeName">
            <summary>
            Gets or sets the name of the assembly qualified name of the entity that is being validated
            </summary>
            <value>
            The name of the assembly qualified type name.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.PropertyName">
            <summary>
            Gets or sets the name of the entity property.
            </summary>
            <value>
            The name of the entity property.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.DataDropDownList.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rock.Web.UI.Controls.FieldTypeList.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridActions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.#ctor(Rock.Web.UI.Controls.Grid)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridActions"/> class.
            </summary>
            <param name="parentGrid">The parent grid.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RecreateChildControls">
            <summary>
            Recreates the child controls in a control derived from <see cref="T:System.Web.UI.WebControls.CompositeControl"/>.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML opening tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lb_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRender event of the linkbutton controls.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbCommunicate_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbAdd control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridActions.lbExcelExport_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbExcelExport control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowCommunicate">
            <summary>
            Gets or sets a value indicating whether [show communicate].
            </summary>
            <value>
              <c>true</c> if [show communicate]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowAdd">
            <summary>
            Gets or sets a value indicating whether [show add].
            </summary>
            <value>
              <c>true</c> if [show add]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ShowExcelExport">
            <summary>
            Gets or sets a value indicating whether [show excel export].
            </summary>
            <value>
              <c>true</c> if [show excel export]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ClientAddScript">
            <summary>
            Gets or sets the client add script.
            </summary>
            <value>
            The client add script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.ClientExcelExportScript">
            <summary>
            Gets or sets the client excel export script.
            </summary>
            <value>
            The client excel export script.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridActions.TagKey">
            <summary>
            Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> value that corresponds to this Web server control. This property is used primarily by control developers.
            </summary>
            <returns>One of the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> enumeration values.</returns>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.CommunicateClick">
            <summary>
            Occurs when communicate action is clicked.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.AddClick">
            <summary>
            Occurs when add action is clicked.
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.GridActions.ExcelExportClick">
            <summary>
            Occurs when add action is clicked.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.LabeledCheckBox">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledCheckBox.label">
            <summary>
            The label
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.LabeledCheckBox.helpBlock">
            <summary>
            The help block
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledCheckBox.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.LabeledCheckBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBox.Tip">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBox.Help">
            <summary>
            Gets or sets the help block.
            </summary>
            <value>
            The help block.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.LabeledCheckBox.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
            <value>
            The label text.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.SearchField">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.TextBox"/> control with an associated label.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SearchField.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.SearchField.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.Zone">
            <summary>
            Defines a Rock Zone on a page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Zone.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Zone.Name">
            <summary>
            Gets or sets the help tip.
            </summary>
            <value>
            The help tip.
            </value>
        </member>
        <member name="T:Rock.Web.UI.DialogMasterPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.DialogMasterPage.FireSave(System.Object,System.EventArgs)">
            <summary>
            Fires the save.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Rock.Web.UI.DialogMasterPage.OnSave">
            <summary>
            Occurs when [on save].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.RockPage">
            <summary>
            RockPage is the base abstract class that all page templates should inherit from
            </summary>
        </member>
        <member name="F:Rock.Web.UI.RockPage.UserName">
            <summary>
            The full name of the currently logged in user
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.FindRockControls(System.Web.UI.ControlCollection)">
            <summary>
            Recurses a control collection looking for any zone controls
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.FindZone(System.String)">
            <summary>
            Find the <see cref="T:Rock.Web.UI.Controls.Zone"/> for the specified zone name.  Looks in the
            <see cref="P:Rock.Web.UI.RockPage.Zones"/> property to see if it has been defined.  If an existing zone 
            <see cref="T:Rock.Web.UI.Controls.Zone"/> cannot be found, the <see cref="T:System.Web.UI.HtmlControls.HtmlForm"/> control
            is returned
            </summary>
            <param name="zoneName">Name of the zone.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.InitializeCulture">
            <summary>
            Initializes the page's culture to use the culture specified by the browser ("auto")
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnInit(System.EventArgs)">
            <summary>
            Loads all of the configured blocks for the current page into the control tree
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetAttributeValue(System.String)">
            <summary>
            Returns the current page's first value for the selected attribute
            If the attribute doesn't exist, null is returned
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rock.Web.UI.RockPage.GetAttributeValues(System.String)" -->
        <member name="M:Rock.Web.UI.RockPage.DimOtherBlocks(Rock.Web.UI.RockBlock,System.Boolean)">
            <summary>
            Dims the other blocks.
            </summary>
            <param name="caller">The caller.</param>
            <param name="dimmed">if set to <c>true</c> [dimmed].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetControlList``1(System.Web.UI.ControlCollection,System.Collections.Generic.List{``0})">
            <summary>
            Gets the control list. 
            http://stackoverflow.com/questions/7362482/c-sharp-get-all-web-controls-on-page
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controlCollection">The control collection.</param>
            <param name="resultCollection">The result collection.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddPopupControls">
            <summary>
            Adds the popup controls.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddConfigElements">
            <summary>
            Adds the config elements.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddBlockConfig(Rock.Web.UI.Controls.HtmlGenericContainer,Rock.Web.UI.RockBlock,Rock.Web.Cache.BlockCache,System.Boolean,System.Boolean)">
            <summary>
            Adds the block config.
            </summary>
            <param name="blockWrapper">The block wrapper.</param>
            <param name="blockControl">The block control.</param>
            <param name="block">The block.</param>
            <param name="canAdministrate">if set to <c>true</c> [can config].</param>
            <param name="canEdit">if set to <c>true</c> [can edit].</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddBlockMove">
            <summary>
            Adds the block move.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameter(System.String)">
            <summary>
            Checks the page's RouteData values and then the query string for a
            parameter matching the specified name, and if found returns the string
            value
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameter(Rock.Web.PageReference,System.String)">
            <summary>
            Checks the page reference's parms and querystring for a
            parameter matching the specified name, and if found returns the string
            </summary>
            <param name="pageReference">The page reference.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.PageParameters">
            <summary>
            Gets the page route and query string parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.Web.UI.Page,System.String)">
            <summary>
            Adds a new CSS link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">The page.</param>
            <param name="href">Path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddCSSLink(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Adds the CSS link.
            </summary>
            <param name="page">The page.</param>
            <param name="href">Path to css file.  Should be relative to layout template.  Will be resolved at runtime</param>
            <param name="mediaType">Type of the media to use for the css link.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddMetaTag(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            Adds a meta tag.
            </summary>
            <param name="page">The page.</param>
            <param name="htmlMeta">The HTML meta tag.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.HtmlMetaExists(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlMeta)">
            <summary>
            HTMLs the meta exists.
            </summary>
            <param name="page">The page.</param>
            <param name="newMeta">The new meta.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddHtmlLink(System.Web.UI.Page,System.Web.UI.HtmlControls.HtmlLink,System.String)">
            <summary>
            Adds a new Html link that will be added to the page header prior to the page being rendered
            </summary>
            <param name="page">The page.</param>
            <param name="htmlLink">The HTML link.</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.HtmlLinkExists(System.Web.UI.Control,System.Web.UI.HtmlControls.HtmlLink)">
            <summary>
            HTMLs the link exists.
            </summary>
            <param name="header">The header.</param>
            <param name="newLink">The new link.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.AddScriptLink(System.Web.UI.Page,System.String)">
            <summary>
            Adds a new script tag to the page header prior to the page being rendered
            </summary>
            <param name="page">The page.</param>
            <param name="path">Path to script file.  Should be relative to layout template.  Will be resolved at runtime</param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetUserPreference(System.String)">
            <summary>
            Gets the value for the current user for a given key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.GetUserPreferences(System.String)">
            <summary>
            Gets the values for the current user that start with a given key.
            </summary>
            <param name="keyPrefix">The key prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SetUserPreference(System.String,System.String)">
            <summary>
            Sets a value for the current user for a given key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rock.Web.UI.RockPage.SessionUserPreferences">
            <summary>
            Sessions the user values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPage">
            <summary>
            The current Rock page instance being requested.  This value is set 
            by the RockRouteHandler immediately after instantiating the page
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPageReference">
            <summary>
            Gets the current page reference.
            </summary>
            <value>
            The current page reference.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.Zones">
            <summary>
            The content areas on a layout page that blocks can be added to 
            </summary>
            <remarks>
            The Dictionary's key is the zonekey and the KeyValuePair is a combination 
            of the friendly zone name and the zone control
            </remarks>
        </member>
        <member name="P:Rock.Web.UI.RockPage.BreadCrumbs">
            <summary>
            Gets the bread crumbs.
            </summary>
            <value>
            The bread crumbs.
            </value>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentUser">
            <summary>
            The currently logged in user
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPerson">
            <summary>
            Returns the current person.  This is either the currently logged in user, or if the user
            has not logged in, it may also be an impersonated person determined from using the encrypted
            person key
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentPersonId">
            <summary>
            The Person ID of the currently logged in user.  Returns null if there is not a user logged in
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.CurrentTheme">
            <summary>
            Gets the full url path to the current theme folder
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.AppPath">
            <summary>
            Gets the root url path
            </summary>
        </member>
        <member name="P:Rock.Web.UI.RockPage.RockBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rock.Web.UI.BlockAttributesUpdatedEventArgs">
            <summary>
            Event Argument used when block instance properties are updated
            </summary>
        </member>
        <member name="T:Rock.Web.UI.JsonResult">
            <summary>
            JSON Object used for client/server communication
            </summary>
        </member>
        <member name="M:Rock.Web.UI.JsonResult.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.JsonResult"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Rock.Web.UI.JsonResult.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.JsonResult.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Rock.Web.UI.JsonResult.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Rock.Attribute.TextFieldAttribute">
            <summary>
            A class Attribute that can be used by any oject that inherits from <see cref="T:Rock.Attribute.IHasAttributes"/> to specify what attributes it needs.  The 
            Framework provides methods in the <see cref="T:Rock.Attribute.Helper"/> class to create, read, and update the attributes
            </summary>
            <remarks>
            If using a custom <see cref="T:Rock.Field.IFieldType"/> make sure that the fieldtype has been added to Rock.
            </remarks>
        </member>
        <member name="M:Rock.Attribute.TextFieldAttribute.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Attribute.TextFieldAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:Rock.Web.RockRouteHandler">
            <summary>
            Rock custom route handler
            </summary>
        </member>
        <member name="M:Rock.Web.RockRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Determine the logical page being requested by evaluating the routedata, or querystring and
            then loading the appropriate layout (ASPX) page
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.HttpHandlerError">
            <summary>
            Handler used when an error occurrs
            </summary>
        </member>
        <member name="M:Rock.Web.HttpHandlerError.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.HttpHandlerError"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Rock.Web.HttpHandlerError.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:Rock.Web.HttpHandlerError.StatusCode">
            <summary>
            Gets the status code.
            </summary>
        </member>
        <member name="P:Rock.Web.HttpHandlerError.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:Rock.Security.Authorization">
            <summary>
            Static class for managing authorizations
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.SetAuthCookie(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the auth cookie.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="isPersisted">if set to <c>true</c> [is persisted].</param>
            <param name="IsImpersonated">if set to <c>true</c> [is impersonated].</param>
        </member>
        <member name="M:Rock.Security.Authorization.Load">
            <summary>
            Load the static Authorizations object
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.ReloadAction(System.Int32,System.Int32,System.String)">
            <summary>
            Reloads the authorizations for the specified entity and action.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Rock.Security.Authorization.Flush">
            <summary>
            Clear the static Authorizations object
            </summary>
        </member>
        <member name="M:Rock.Security.Authorization.Authorized(Rock.Security.ISecured,System.String,Rock.Model.SpecialRole)">
            <summary>
            Evaluates whether a selected user is allowed to perform the selected action on the selected
            entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="specialRole">The special role.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.Authorized(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Evaluates whether a selected person is allowed to perform the selected action on the selected
            entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.IsPrivate(Rock.Security.ISecured,System.String,Rock.Model.Person)">
            <summary>
            Determines whether the specified entity is private. Entity is considered private if only the current user 
            has access.  In this scenario, the first rule would give current user access, and second rule would deny 
            all users.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <returns>
              <c>true</c> if the specified entity is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Security.Authorization.MakePrivate(Rock.Security.ISecured,System.String,Rock.Model.Person,System.Nullable{System.Int32})">
            <summary>
            Makes the private.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
            <param name="person">The person.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Security.Authorization.AuthRules(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the authorization rules for the specified entity and action.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.EncodeEntityTypeName(System.Type)">
            <summary>
            Encodes the entity type name for use in a URL
            </summary>
            <param name="iSecuredType">Type of the item to secure.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.EncodeEntityTypeName(System.String)">
            <summary>
            Encodes the entity type name for use in a URL
            </summary>
            <param name="assemblyQualifiedName">Assembly name of the item to secure.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.DecodeEntityTypeName(System.String)">
            <summary>
            Decodes the entity type name.
            </summary>
            <param name="encodedTypeName">Name of the encoded type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Security.Authorization.CopyAuthorization(Rock.Security.ISecured,Rock.Security.ISecured,System.Nullable{System.Int32})">
            <summary>
            Copies the authorizations from one <see cref="T:Rock.Security.ISecured"/> object to another
            </summary>
            <param name="sourceEntity">The source entity.</param>
            <param name="targetEntity">The target entity.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Security.Authorization.FindAuthRules(Rock.Security.ISecured)">
            <summary>
            Finds the auth rules.
            </summary>
            <param name="securableObject">The securable object.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Security.Authorization.Authorizations">
            <summary>
            Authorizations is a static variable for storing all authorizations.  It uses multiple Dictionary objects similiar 
            to a multi-dimensional array to store information.  The first dimension is the entity type id, second is the entity
            ID, third is the action, and the fourth dimension is a list of AuthRules for the action.
            </summary>
        </member>
        <member name="T:Rock.Security.AuthRule">
            <summary>
            Lightweight class to store if a particular user or role is allowed or denied access
            </summary>
        </member>
        <member name="M:Rock.Security.AuthRule.#ctor(System.Int32,System.Nullable{System.Int32},System.String,Rock.Model.SpecialRole,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.AuthRule"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="entityId">The entity id.</param>
            <param name="allowOrDeny">Allow or Deny ("A" or "D").</param>
            <param name="specialRole">The special role.</param>
            <param name="personId">The person id.</param>
            <param name="groupId">The group id.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Rock.Security.AuthRule.#ctor(Rock.Model.Auth)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Security.AuthRule"/> class.
            </summary>
            <param name="auth">The auth.</param>
        </member>
        <member name="P:Rock.Security.AuthRule.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
            <value>
            The entity id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.AllowOrDeny">
            <summary>
            Gets or sets a value indicating if this is an allow or deny rule.  Acceptable values are "A" or "D".
            </summary>
            <value>
            The allow or deny.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.SpecialRole">
            <summary>
            Gets or sets the special role.
            </summary>
            <value>
            The special role.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.PersonId">
            <summary>
            Gets or sets the person id.
            </summary>
            <value>
            The person id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.GroupId">
            <summary>
            Gets or sets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>
            The order.
            </value>
        </member>
        <member name="P:Rock.Security.AuthRule.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for editing the security of an item in a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SecurityField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityField.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityField.TitleField">
            <summary>
            Gets or sets the field that contains the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.SecurityFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.SecurityField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityFieldTemplate.#ctor(System.Web.UI.Page,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SecurityFieldTemplate"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="titleField">The title field.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.SecurityFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityFieldTemplate.TitleField">
            <summary>
            Gets or sets the title field
            </summary>
            <value>
            The title field
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SecurityFieldTemplate.EntityTypeId">
            <summary>
            Gets or sets the entity type id.
            </summary>
            <value>
            The entity type id.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.ReorderField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for reordering rows in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.ReorderField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.ReorderFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.ReorderField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.ReorderFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for editing a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.EditField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.editFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the editFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.EditField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.EditFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.EditField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.EditFieldTemplate.lbEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbEdit control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.EditFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.EditFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DeleteField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column for deleting a row in a grid
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.DeleteField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.Initialize(System.Boolean,System.Web.UI.Control)">
            <summary>
            Performs basic instance initialization for a data control field.
            </summary>
            <param name="sortingEnabled">A value that indicates whether the control supports the sorting of columns of data.</param>
            <param name="control">The data control that owns the <see cref="T:System.Web.UI.WebControls.DataControlField"/>.</param>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.deleteFieldTemplate_LinkButtonClick(System.Object,Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Handles the LinkButtonClick event of the deleteFieldTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteField.OnClick(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:Click"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DeleteField.ParentGrid">
            <summary>
            Gets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.DeleteField.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.DeleteFieldTemplate">
            <summary>
            Template used by the <see cref="T:Rock.Web.UI.Controls.DeleteField"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.lbDelete_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRender event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.lbDelete_DataBinding(System.Object,System.EventArgs)">
            <summary>
            Handles the DataBinding event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.DeleteFieldTemplate.lbDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbDelete control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.DeleteFieldTemplate.ParentGrid">
            <summary>
            Gets or sets the parent grid.
            </summary>
            <value>
            The parent grid.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.DeleteFieldTemplate.LinkButtonClick">
            <summary>
            Occurs when [link button click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.Grid">
            <summary>
            Rock Grid Control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.Grid"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Actions_CommunicateClick(System.Object,System.EventArgs)">
            <summary>
            Handles the CommunicateClick event of the Actions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Actions_ExcelExportClick(System.Object,System.EventArgs)">
            <summary>
            Handles the ExcelExportClick event of the Actions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            TODO: Added this override to prevent the default behavior of rending a grid with a table inside
            and div element.  The div may be needed for paging when grid is not used in an update panel
            so if wierd errors start happening, this could be the culprit.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> used to render the server control content on the client's browser.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnDataBound(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.BaseDataBoundControl.DataBound"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowDataBound(System.Web.UI.WebControls.GridViewRowEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs"/> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowCreated(System.Web.UI.WebControls.GridViewRowEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" /> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreateChildTable">
            <summary>
            Creates a new child table.
            </summary>
            <returns>
            Always returns a new <see cref="T:System.Web.UI.WebControls.Table"/> that represents the child table.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreateChildControls(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Creates the control hierarchy used to render the <see cref="T:System.Web.UI.WebControls.GridView"/> control using the specified data source.
            </summary>
            <param name="dataSource">An <see cref="T:System.Collections.IEnumerable"/> that contains the data source for the <see cref="T:System.Web.UI.WebControls.GridView"/> control.</param>
            <param name="dataBinding">true to indicate that the child controls are bound to data; otherwise, false.</param>
            <returns>
            The number of rows created.
            </returns>
            <exception cref="T:System.Web.HttpException">
              <paramref name="dataSource"/> returns a null <see cref="T:System.Web.UI.DataSourceView"/>.-or-<paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and cannot return a <see cref="P:System.Web.UI.DataSourceSelectArguments.TotalRowCount"/>. -or-<see cref="P:System.Web.UI.WebControls.GridView.AllowPaging"/> is true and <paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and cannot perform data source paging.-or-<paramref name="dataSource"/> does not implement the <see cref="T:System.Collections.ICollection"/> interface and <paramref name="dataBinding"/> is set to false.</exception>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.Grid_Sorting(System.Object,System.Web.UI.WebControls.GridViewSortEventArgs)">
            <summary>
            Handles the Sorting event of the Grid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowCommand(System.Web.UI.WebControls.GridViewCommandEventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" /> that contains event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.CreatePreviewColumns(System.Type)">
            <summary>
            Creates grid columns by reflecting on the properties of a type.  If any of the properties
            have the [Previewable] attribute, columns will only be created for those properties
            </summary>
            <param name="modelType">Type of the model.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.GetGridField(System.Reflection.PropertyInfo)">
            <summary>
            Gets the grid field.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.pagerTemplate_ItemsPerPageClick(System.Object,Rock.Web.UI.Controls.NumericalEventArgs)">
            <summary>
            Handles the ItemsPerPageClick event of the pagerTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.pagerTemplate_NavigateClick(System.Object,Rock.Web.UI.Controls.NumericalEventArgs)">
            <summary>
            Handles the NavigateClick event of the pagerTemplate control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            Raises the appropriate events for the <see cref="T:System.Web.UI.WebControls.GridView"/> control when it posts back to the server.
            </summary>
            <param name="eventArgument">The event argument from which to create a <see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> for the event or events that are raised.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnGridReorder(Rock.Web.UI.Controls.GridReorderEventArgs)">
            <summary>
            Raises the <see cref="E:GridReorder"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnGridRebind(System.EventArgs)">
            <summary>
            Raises the <see cref="E:GridRebind"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.Grid.OnRowSelected(Rock.Web.UI.Controls.RowEventArgs)">
            <summary>
            Raises the <see cref="E:RowSelected"/> event.
            </summary>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.IsPersonList">
            <summary>
            Gets or sets a value indicating whether this instance is person list.  If so, 
            the data source should have an Id field/property that is a person Id
            </summary>
            <value>
            <c>true</c> if this instance is person list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.IsDeleteEnabled">
            <summary>
            Gets or sets a value indicating whether [delete enabled].
            </summary>
            <value>
              <c>true</c> if [delete enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ShowConfirmDeleteDialog">
            <summary>
            Gets or sets a value indicating whether [show confirm delete dialog].
            </summary>
            <value>
            <c>true</c> if [show confirm delete dialog]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.RowItemText">
            <summary>
            Gets or sets the name of the row item.
            </summary>
            <value>
            The name of the row item.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.EmptyDataText">
            <summary>
            Gets or sets the text to display in the empty data row rendered when a <see cref="T:System.Web.UI.WebControls.GridView" /> control is bound to a data source that does not contain any records.
            </summary>
            <returns>The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.</returns>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.HideDeleteButtonForIsSystem">
            <summary>
            Gets or sets a value indicating whether [hide delete button for is system].
            </summary>
            <value>
            <c>true</c> if [hide delete button for is system]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.RowClickEnabled">
            <summary>
            Gets or sets a value indicating whether [row click enabled].
            </summary>
            <value>
              <c>true</c> if [row click enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.DisplayType">
            <summary>
            Gets or sets the display type.
            </summary>
            <value>
            The display type.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.SortProperty">
            <summary>
            Gets the sort property.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.CommunicateMergeFields">
            <summary>
            Gets or sets a list of datasource field/properties that can optionally be included as additional 
            merge fields when a new communication is created from the grid.  NOTE: A side affect of using 
            additional merge fields is that user will not be able to add additional recipients to the 
            communication after it is created from the grid
            </summary>
            <value>
            The communicate merge fields.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.CommunicationPageRoute">
            <summary>
            Gets or sets the new communication page route.
            </summary>
            <value>
            The new communication page route.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ActionRow">
            <summary>
            Gets the action row.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.Actions">
            <summary>
            Gets the actions control
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.Grid.ShowActionRow">
            <summary>
            Gets or sets a value indicating whether the action row should be displayed.
            </summary>
            <value>
              <c>true</c> if action row should be displayed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.GridReorder">
            <summary>
            Occurs when [grid reorder].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.GridRebind">
            <summary>
            Occurs when [grid rebind].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.Grid.RowSelected">
            <summary>
            Occurs when [row click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridReorderEventHandler">
            <summary>
            Delegate used for raising the grid reorder event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridRebindEventHandler">
            <summary>
            Delegate used for raising the grid rebind event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.PageNavigationEventHandler">
            <summary>
            Delegate used for raising the grid items per page changed event
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.NumericalEventArgs">
            <summary>
            Items Per RockPage Event Argument
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NumericalEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.NumericalEventArgs"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NumericalEventArgs.Number">
            <summary>
            Gets the items per page.
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridReorderEventArgs">
            <summary>
            Grid Reorder Event Argument
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridReorderEventArgs._cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.GridReorderEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.GridReorderEventArgs"/> class.
            </summary>
            <param name="dataKey">The data key.</param>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.DataKey">
            <summary>
            Gets the data key.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.OldIndex">
            <summary>
            Gets the old index.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.NewIndex">
            <summary>
            Gets the new index.
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Controls.GridReorderEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the reorder event should be cancelled
            </summary>
            <value>
              <c>true</c> if cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.JsonResult">
            <summary>
            JSON Result  
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.JsonResult"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.#ctor(System.String,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.JsonResult"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.JsonResult.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.SortProperty">
            <summary>
            Class for saving sort expression
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.SortProperty.#ctor(System.Web.UI.WebControls.GridViewSortEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.SortProperty"/> class.
            </summary>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.DirectionString">
            <summary>
            Gets the direction as an ASC or DESC string.
            </summary>
            <value>
            The direction string.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.SortProperty.Property">
            <summary>
            Gets or sets the property name
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.PagerTemplate">
            <summary>
            Template used for the pager row in the <see cref="T:Rock.Web.UI.Controls.Grid"/> control
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            When implemented by a class, defines the <see cref="T:System.Web.UI.Control"/> object that child controls and templates belong to. These child controls are in turn defined within an inline template.
            </summary>
            <param name="container">The <see cref="T:System.Web.UI.Control"/> object to contain the instances of controls from the inline template.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.SetNavigation(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set the RockPage Navigation Display
            </summary>
            <param name="pageCount">The number of total pages</param>
            <param name="pageIndex">The current page index</param>
            <param name="pageSize">The number of items on each page</param>
            <param name="itemCount">The item count.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.lbPage_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbPage control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.lbItems_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the lbPageSize control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.PagerTemplate.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Rock.Web.UI.Controls.PagerTemplate.NavigateClick">
            <summary>
            Occurs when [navigate click].
            </summary>
        </member>
        <member name="E:Rock.Web.UI.Controls.PagerTemplate.ItemsPerPageClick">
            <summary>
            Occurs when [page click].
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.GridDisplayType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridDisplayType.Full">
            <summary>
            The full
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.GridDisplayType.Light">
            <summary>
            The light
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.BoolField">
            <summary>
            <see cref="T:Rock.Web.UI.Controls.Grid"/> Column to display a boolean value.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BoolField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.BoolField"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.BoolField.FormatDataValue(System.Object,System.Boolean)">
            <summary>
            Formats the specified field value for a cell in the <see cref="T:System.Web.UI.WebControls.BoundField"/> object.
            </summary>
            <param name="dataValue">The field value to format.</param>
            <param name="encode">true to encode the value; otherwise, false.</param>
            <returns>
            The field value converted to the format specified by <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString"/>.
            </returns>
        </member>
        <member name="T:Rock.Web.UI.Controls.HtmlGenericContainer">
            <summary>
            An HtmlGenericContainer that implements the INamingContainer interface
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlGenericContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.HtmlGenericContainer"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.HtmlGenericContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.HtmlGenericContainer"/> class.
            </summary>
            <param name="tag">The name of the element for which this instance of the class is created.</param>
        </member>
        <member name="T:Rock.Web.UI.Controls.NotificationBox">
            <summary>
            Displays a standard warning or error message box
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.NotificationBox.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Title">
            <summary>
            Gets or sets the title (title is inline with the message text but is bold).
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.Heading">
            <summary>
            Gets or sets the heading (heading is on it's own line at the top)
            </summary>
            <value>
            The heading.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.NotificationBox.NotificationBoxType">
            <summary>
            Gets or sets the type of the notification box.
            </summary>
            <value>
            The type of the notification box.
            </value>
        </member>
        <member name="T:Rock.Web.UI.Controls.NotificationBoxType">
            <summary>
            The type of notification box to display
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Info">
            <summary>
            Display an information box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Warning">
            <summary>
            Display a warning box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Error">
            <summary>
            Display an error box
            </summary>
        </member>
        <member name="F:Rock.Web.UI.Controls.NotificationBoxType.Success">
            <summary>
            Display a success box
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Controls.RowEventArgs">
            <summary>
            Event argument used by the <see cref="T:Rock.Web.UI.Controls.Grid"/> events
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Controls.RowEventArgs.#ctor(System.Web.UI.WebControls.GridViewRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.UI.Controls.RowEventArgs"/> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowIndex">
            <summary>
            Gets the index of the row that fired the event
            </summary>
            <value>
            The index of the row.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyValue">
            <summary>
            Gets the row key value.  
            Usually the Id value of the data in the row
            Cast this to an Int (or use RowKeyId) if your datakey is an integer
            </summary>
            <value>
            The row key value.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyValues">
            <summary>
            Gets the row key values
            Use this if your datarow has multiple keys (rare)
            </summary>
            <value>
            The row key values.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Controls.RowEventArgs.RowKeyId">
            <summary>
            Gets the row key id
            Usually the Id value of the data in the row
            </summary>
            <value>
            The row key id.
            </value>
        </member>
        <member name="T:Rock.ExtensionMethods">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:Rock.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Converts object to JSON string
            </summary>
            <param name="obj">Object.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="rootObj">The root obj.</param>
            <param name="propertyNamePath">The property path name (i.e. FirstName, Owner.FirstName, etc).</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.GetFriendlyTypeName(System.Type)">
            <summary>
            Gets the name of the friendly type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SplitCase(System.String)">
            <summary>
            Splits a Camel or Pascal cased identifier into seperate words.
            </summary>
            <param name="str">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SplitDelimitedValues(System.String,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by any combination of whitespace, comma, semi-colon, or pipe characters
            </summary>
            <param name="str">The string.</param>
            <param name="whitespace">if set to <c>true</c> [whitespace].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            Replaces every instance of oldValue (regardless of case) with the newValue.
            from http://www.codeproject.com/Articles/10890/Fastest-C-Case-Insenstive-String-Replace
            </summary>
            <param name="str">The source string.</param>
            <param name="oldValue">The value to replace.</param>
            <param name="newValue">The value to insert.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.EscapeQuotes(System.String)">
            <summary>
            Adds escape character for quotes in a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Ellipsis(System.String,System.Int32)">
            <summary>
            Truncates a string after a max length and adds ellipsis.  Truncation will occur at first space prior to maxLength
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Pluralize(System.String)">
            <summary>
            Pluralizes the specified string.
            </summary>
            <param name="str">The string to pluralize.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Singularize(System.String)">
            <summary>
            Singularizes the specified string.
            </summary>
            <param name="str">The string to singularize.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsNumeric(System.String)">
            <summary>
            Removes any non-numeric characters
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsBoolean(System.String,System.Boolean)">
            <summary>
            Returns True for 'True', 'Yes', '1'
            </summary>
            <param name="str">The string.</param>
            <param name="NullIsFalse">if set to <c>true</c> [null is false].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsInteger(System.String,System.Boolean)">
            <summary>
            Attempts to convert string to integer.  Returns null if unsuccessful.
            </summary>
            <param name="str">The STR.</param>
            <param name="emptyStringAsZero">if set to <c>true</c> [empty string as zero].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ResolveMergeFields(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Use DotLiquid to resolve any merge codes within the content using the values 
            in the mergeObjects.
            </summary>
            <param name="content">The content.</param>
            <param name="mergeObjects">The merge objects.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.DefinedValue(System.Nullable{System.Int32})">
            <summary>
            Gets the Defined Value name associated with this id
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Bit(System.Boolean)">
            <summary>
            A numeric 1 or 0
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToYesNo(System.Boolean)">
            <summary>
            To the yes no.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToTrueFalse(System.Boolean)">
            <summary>
            To the true false.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.FromTrueFalse(System.String)">
            <summary>
            Froms the true false.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Age(System.Nullable{System.DateTime})">
            <summary>
            Returns the age at the current date
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Age(System.DateTime)">
            <summary>
            Returns the age at the current date
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.TotalMonths(System.DateTime,System.DateTime)">
            <summary>
            The total months.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.TotalYears(System.DateTime,System.DateTime)">
            <summary>
            The total years.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToElapsedString(System.Nullable{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            Returns a friendly elapsed time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToElapsedString(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns a friendly elapsed time string.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="condensed">if set to <c>true</c> [condensed].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToRelativeDateString(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Returns a string in FB style relative format (x seconds ago, x minutes ago, about an hour ago, etc.).
            or if max days has already passed in FB datetime format (February 13 at 11:28am or November 5, 2011 at 1:57pm)
            </summary>
            <param name="dateTime">the datetime to convert to relative time.</param>
            <param name="maxDays">maximum number of days before formatting in FB date-time format (ex. November 5, 2011 at 1:57pm) </param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ToTimeString(System.TimeSpan)">
            <summary>
            Returns a TimeSpan to HH:MM AM/PM.
            Examples: 1:45 PM, 12:01 AM
            </summary>
            <param name="timespan">The timespan.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.LoadControl(System.Web.UI.Control,System.String,System.Object[])">
            <summary>
            Loads a user control using the constructor with the parameters specified.
            </summary>
            <param name="control">The control.</param>
            <param name="userControlPath">The user control path.</param>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RockBlock(System.Web.UI.Control)">
            <summary>
            Gets the parent RockBlock.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RockPage(System.Web.UI.Control)">
            <summary>
            Rocks the page.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ParentUpdatePanel(System.Web.UI.Control)">
            <summary>
            Parents the update panel.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AddCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Adds a CSS class name to a web control
            </summary>
            <param name="webControl">The web control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Removes a CSS class name from a web control.
            </summary>
            <param name="webControl">The web control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.AddCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Adds a CSS class name to an html control
            </summary>
            <param name="htmlControl">The html control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Removes a CSS class name from an html control.
            </summary>
            <param name="htmlControl">The html control.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            Try's to set the selected value, if the value does not exist, will set the first item in the list
            </summary>
            <param name="ddl">The DDL.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetReadOnlyValue(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            Sets the read only value.
            </summary>
            <param name="ddl">The DDL.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.DropDownList,System.Nullable{System.Int32})">
            <summary>
            Try's to set the selected value, if the value does not exist, will set the first item in the list
            </summary>
            <param name="ddl">The DDL.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.BindToEnum(System.Web.UI.WebControls.ListControl,System.Type,System.Boolean)">
            <summary>
            Binds to enum.
            </summary>
            <param name="listControl">The list control.</param>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.BindToDefinedType(System.Web.UI.WebControls.ListControl,Rock.Web.Cache.DefinedTypeCache,System.Boolean)">
            <summary>
            Binds to the values of a definedType
            </summary>
            <param name="listControl">The list control.</param>
            <param name="definedType">Type of the defined.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.SelectedValueAsInt(System.Web.UI.WebControls.ListControl,System.Boolean)">
            <summary>
            Returns the Value as Int or null if Value is <see cref="T:Rock.Constants.None"/>
            </summary>
            <param name="NoneAsNull">if set to <c>true</c>, will return Null if SelectedValue = <see cref="T:Rock.Constants.None" /> </param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SelectedValueAsEnum``1(System.Web.UI.WebControls.ListControl)">
            <summary>
            Selecteds the value as enum.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToString(System.Enum)">
            <summary>
            Converts to the enum value to it's string value
            </summary>
            <param name="eff">The eff.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToInt(System.Enum)">
            <summary>
            Converts to int.
            </summary>
            <param name="eff">The eff.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ConvertToEnum``1(System.String)">
            <summary>
            Converts a string value to an enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue">The enum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AsDelimited``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Concatonate the items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Join(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Joins a dictionary of items
            </summary>
            <param name="items">The items.</param>
            <param name="delimter">The delimter.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the list by the name of a property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Orders the list by the name of a property in descending order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then Orders the list by the name of a property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Then Orders the list by a a property in descending order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The type of object.</param>
            <param name="property">The property to order by.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.Sort``1(System.Linq.IQueryable{``0},Rock.Web.UI.Controls.SortProperty)">
            <summary>
            Sorts the object by the specified sort property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="sortProperty">The sort property.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.LoadAttributes(Rock.Attribute.IHasAttributes)">
            <summary>
            Loads the attributes.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.CopyAttributesFrom(Rock.Attribute.IHasAttributes,Rock.Attribute.IHasAttributes)">
            <summary>
            Copies the attributes.
            </summary>
            <param name="entity">The entity.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.PageId(System.Web.Routing.Route)">
            <summary>
            Pages the id.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.RouteId(System.Web.Routing.Route)">
            <summary>
            Routes the id.
            </summary>
            <param name="route">The route.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.AddPageRoute(System.Collections.ObjectModel.Collection{System.Web.Routing.RouteBase},Rock.Model.PageRoute)">
            <summary>
            Adds the page route.
            </summary>
            <param name="routes">The routes.</param>
            <param name="pageRoute">The page route.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveEntity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.RemoveEntity``1(System.Collections.Generic.List{``0},System.Guid)">
            <summary>
            Removes the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.ValueAsInt(System.Web.UI.WebControls.HiddenField)">
            <summary>
            Values as int.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.ExtensionMethods.SetValue(System.Web.UI.WebControls.HiddenField,System.Int32)">
            <summary>
            Sets the value.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.ExtensionMethods.IsZero(System.Web.UI.WebControls.HiddenField)">
            <summary>
            Determines whether the specified hidden field is zero.
            </summary>
            <param name="hiddenField">The hidden field.</param>
            <returns>
              <c>true</c> if the specified hidden field is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rock.Field.Types.BooleanFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value">The value.</param>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="message">The message.</param>
            <returns>
              <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Renders the controls neccessary for prompting user for a new value and adds them to the parentControl
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.BooleanFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.PageReferenceFieldType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.FormatValue(System.Web.UI.Control,System.String,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.Boolean)">
            <summary>
            Returns the field's current value(s)
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="value">Information about the value</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="condensed">Flag indicating if the value should be condensed (i.e. for use in a grid column)</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues">The configuration values.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.PageReferenceFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues">The configuration values.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.IntegerFieldType">
            <summary>
            Field used to save and dispaly a numeric value
            </summary>
        </member>
        <member name="M:Rock.Field.Types.IntegerFieldType.IsValid(System.String,System.Boolean,System.String@)">
            <summary>
            Tests the value to ensure that it is a valid value.  If not, message will indicate why
            </summary>
            <param name="value"></param>
            <param name="required"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.IntegerFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues">The configuration values.</param>
            <returns>
            The control
            </returns>
        </member>
        <member name="T:Rock.Field.Types.SelectSingleFieldType">
            <summary>
            Field Type used to display a list of options as checkboxes.  Value is saved as a | delimited list
            </summary>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationKeys">
            <summary>
            Returns a list of the configuration keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationControls">
            <summary>
            Creates the HTML controls required to configure this type of field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.ConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control})">
            <summary>
            Gets the configuration value.
            </summary>
            <param name="controls">The controls.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.SetConfigurationValues(System.Collections.Generic.List{System.Web.UI.Control},System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="controls"></param>
            <param name="configurationValues"></param>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Creates the control(s) neccessary for prompting user for a new value
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.SelectSingleFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Types.ColorFieldType">
            <summary>
            Field Type used to display a dropdown list of System.Drawing.Color options
            </summary>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.EditControl(System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Renders the controls neccessary for prompting user for a new value and adds them to the parentControl
            </summary>
            <param name="configurationValues"></param>
            <returns>
            The control
            </returns>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.GetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue})">
            <summary>
            Reads new values entered by the user for the field
            </summary>
            <param name="control">Parent control that controls were added to in the CreateEditControl() method</param>
            <param name="configurationValues"></param>
            <returns></returns>
        </member>
        <member name="M:Rock.Field.Types.ColorFieldType.SetEditValue(System.Web.UI.Control,System.Collections.Generic.Dictionary{System.String,Rock.Field.ConfigurationValue},System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="control">The control.</param>
            <param name="configurationValues"></param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Rock.Field.Helper">
            <summary>
            Helper class for use with <see cref="T:Rock.Field.IFieldType"/> classes
            </summary>
        </member>
        <member name="M:Rock.Field.Helper.InstantiateFieldType(System.String,System.String)">
            <summary>
            Instantiates an instance of a specific field type based on the assembly and class name of the field type
            </summary>
            <param name="assembly">Assembly Name (i.e. Rock)</param>
            <param name="typeName">Class Name (i.e. Rock.Field.Types.Text)</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Field.Types.TextFieldType">
            <summary>
            Field used to save and dispaly a text value
            </summary>
        </member>
        <member name="T:Rock.Attribute.Helper">
            <summary>
            Static Helper class for creating, saving, and reading attributes and attribute values of any <see cref="T:Rock.Attribute.IHasAttributes"/> class
            </summary>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttributes(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Updates the attributes.
            </summary>
            <param name="type">The type (should be a <see cref="T:Rock.Attribute.IHasAttributes"/> object.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="currentPersonId">The current person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttributes(System.Type,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Uses reflection to find any <see cref="T:Rock.Attribute.FieldAttribute"/> attributes for the specified type and will create and/or update
            a <see cref="T:Rock.Model.Attribute"/> record for each attribute defined.
            </summary>
            <param name="type">The type (should be a <see cref="T:Rock.Attribute.IHasAttributes"/> object.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="currentPersonId">The current person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.UpdateAttribute(Rock.Model.AttributeService,Rock.Model.AttributeQualifierService,Rock.Model.FieldTypeService,Rock.Model.CategoryService,Rock.Attribute.FieldAttribute,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds or Updates a <see cref="T:Rock.Model.Attribute"/> item for the attribute.
            </summary>
            <param name="property">The property.</param>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityQualifierColumn">The entity qualifier column.</param>
            <param name="entityQualifierValue">The entity qualifier value.</param>
            <param name="currentPersonId">The current person id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.LoadAttributes(Rock.Attribute.IHasAttributes)">
            <summary>
            Loads the <see cref="P:IHasAttributes.Attributes"/> and <see cref="P:IHasAttributes.AttributeValues"/> of any <see cref="T:Rock.Attribute.IHasAttributes"/> object
            </summary>
            <param name="entity">The item.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.GetAttributeCategories(Rock.Attribute.IHasAttributes,System.Boolean)">
            <summary>
            Gets the attribute categories.
            </summary>
            <param name="entity">The entity.</param>
            <param name="allowMultiple">if set to <c>true</c> returns the attribute in each of it's categories, if false, only returns attribut in first category.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.GetAttributeCategories(System.Collections.Generic.List{Rock.Web.Cache.AttributeCache},System.Boolean)">
            <summary>
            Gets attributes grouped by category
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="allowMultiple">if set to <c>true</c> returns the attribute in each of it's categories, if false, only returns attribut in first category.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValues(Rock.Attribute.IHasAttributes,System.Nullable{System.Int32})">
            <summary>
            Saves the attribute values.
            </summary>
            <param name="model">The model.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValue(Rock.Attribute.IHasAttributes,Rock.Web.Cache.AttributeCache,System.String,System.Nullable{System.Int32})">
            <summary>
            Saves an attribute value.
            </summary>
            <param name="model">The model.</param>
            <param name="attribute">The attribute.</param>
            <param name="newValue">The new value.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.SaveAttributeValues(Rock.Attribute.IHasAttributes,Rock.Web.Cache.AttributeCache,System.Collections.Generic.List{Rock.Model.AttributeValue},System.Nullable{System.Int32})">
            <summary>
            Saves an attribute value.
            </summary>
            <param name="model">The model.</param>
            <param name="attribute">The attribute.</param>
            <param name="newValues">The new values.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.CopyAttributes(Rock.Attribute.IHasAttributes,Rock.Attribute.IHasAttributes)">
            <summary>
            Copies the attributes from one entity to another
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddEditControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Boolean)">
            <summary>
            Adds edit controls for each of the item's attributes
            </summary>
            <param name="item"></param>
            <param name="parentControl"></param>
            <param name="setValue"></param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddEditControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Adds edit controls for each of the item's attributes
            </summary>
            <param name="item"></param>
            <param name="parentControl"></param>
            <param name="setValue"></param>
            <param name="exclude">List of attribute names not to render</param>
        </member>
        <member name="M:Rock.Attribute.Helper.AddDisplayControls(Rock.Attribute.IHasAttributes,System.Web.UI.Control,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the display HTML.
            </summary>
            <param name="item">The item.</param>
            <param name="parentControl">The parent control.</param>
            <param name="exclude">The exclude.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Attribute.Helper.SetErrorIndicators(System.Web.UI.Control,Rock.Attribute.IHasAttributes)">
            <summary>
            Sets any missing required field error indicators.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rock.Attribute.Helper.GetEditValues(System.Web.UI.Control,Rock.Attribute.IHasAttributes)">
            <summary>
            Gets the edit values.
            </summary>
            <param name="parentControl">The parent control.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Rock.Attribute.AttributeCategory">
            <summary>
            Attributes group by category
            </summary>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Rock.Attribute.AttributeCategory.CategoryName">
            <summary>
            Gets the name of the category.
            </summary>
            <value>
            The name of the category.
            </value>
        </member>
        <member name="T:Rock.Web.HttpModule">
            <summary>
            Provides application start, and module initialization and disposal events to the implementing class.
            </summary>
        </member>
        <member name="M:Rock.Web.HttpModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:Rock.Web.HttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Rock.Web.HttpModule.Application_Start(System.Web.HttpApplication)">
            <summary>
            Method that will be called once on application start.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Rock.Web.PageReference">
            <summary>
            Helper class to work with the PageReference field type
            </summary>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
            <param name="parameters">The route parameters.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageId">The page id.</param>
            <param name="routeId">The route id.</param>
            <param name="parameters">The route parameters.</param>
            <param name="queryString">The query string.</param>
        </member>
        <member name="M:Rock.Web.PageReference.#ctor(Rock.Web.PageReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Web.PageReference"/> class.
            </summary>
            <param name="pageReference">The page reference.</param>
        </member>
        <member name="M:Rock.Web.PageReference.BuildUrl">
            <summary>
            Builds the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.GetRouteIdFromPageAndParms">
            <summary>
            Gets the route id from page and parms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.BuildRouteURL(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds the route URL.
            </summary>
            <param name="parms">The parms.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.GetParentPageReferences(Rock.Web.UI.RockPage,Rock.Web.Cache.PageCache,Rock.Web.PageReference)">
            <summary>
            Gets the parent page references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.PageReference.SavePageReferences(System.Collections.Generic.List{Rock.Web.PageReference})">
            <summary>
            Saves the history.
            </summary>
            <param name="pageReferences">The page references.</param>
        </member>
        <member name="P:Rock.Web.PageReference.PageId">
            <summary>
            Gets or sets the page id.
            </summary>
        </member>
        <member name="P:Rock.Web.PageReference.RouteId">
            <summary>
            Gets the route id.
            </summary>
        </member>
        <member name="P:Rock.Web.PageReference.Parameters">
            <summary>
            Gets the route parameters.
            </summary>
            <value>
            The route parameters.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.QueryString">
            <summary>
            Gets the query string.
            </summary>
            <value>
            The query string.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.BreadCrumbs">
            <summary>
            Gets or sets the bread crumbs.
            </summary>
            <value>
            The bread crumbs.
            </value>
        </member>
        <member name="P:Rock.Web.PageReference.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Reflection">
            <summary>
            Static helper methods for using Reflection
            </summary>
        </member>
        <member name="M:Rock.Reflection.FindTypes(System.Type)">
            <summary>
            Finds the all the types that implement or inherit from the baseType.  The baseType
            will not be included in the result
            </summary>
            <param name="baseType">base type.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.SearchAssembly(System.Reflection.Assembly,System.Type)">
            <summary>
            Searches the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="baseType">Type of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Reflection.GetDescription(System.Type)">
            <summary>
            Returnes the Description Attribute value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Rock.Jobs.JobPulse">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
            <author>Jon Edmiston</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.JobPulse.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobPulse.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Jobs.RockJobListener">
            <summary>
            Summary description for JobListener
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Jobs.RockJobListener"/> class.
            </summary>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred).
            <para>
            This method will not be invoked if the execution of the Job was vetoed
            by a <see cref="T:Quartz.ITriggerListener"/>.
            </para>
            </summary>
            <param name="context"></param>
            <seealso cref="M:Rock.Jobs.RockJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's
            execution.
            </summary>
            <param name="context"></param>
            <seealso cref="M:Rock.Jobs.RockJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Rock.Jobs.RockJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
            has been executed, and before the associated <see cref="T:Quartz.Spi.IOperableTrigger"/>'s
            <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
            <param name="context"></param>
            <param name="jobException"></param>
        </member>
        <member name="P:Rock.Jobs.RockJobListener.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
        </member>
        <member name="T:Rock.Jobs.TestJob">
            <summary>
            Job to keep a heartbeat of the job process so we know when the jobs stop working
            </summary>
            <author>Jon Edmiston</author>
            <author>Spark Development Network</author>
        </member>
        <member name="M:Rock.Jobs.TestJob.#ctor">
            <summary> 
            Empty constructor for job initilization
            <para>
            Jobs require a public empty constructor so that the
            scheduler can instantiate the class whenever it needs.
            </para>
            </summary>
        </member>
        <member name="M:Rock.Jobs.TestJob.Execute(Quartz.IJobExecutionContext)">
            <summary> 
            Job that updates the JobPulse setting with the current date/time.
            This will allow us to notify an admin if the jobs stop running.
            
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            <see cref="T:Quartz.ITrigger"/> fires that is associated with
            the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="T:Rock.Data.ModelUpdatedEventArgs">
            <summary>
            Event argument used when model was added, updated, or deleted
            </summary>
        </member>
        <member name="F:Rock.Data.ModelUpdatedEventArgs.Model">
            <summary>
            The affected model
            </summary>
        </member>
        <member name="F:Rock.Data.ModelUpdatedEventArgs.PersonId">
            <summary>
            The id of the person making the update
            </summary>
        </member>
        <member name="M:Rock.Data.ModelUpdatedEventArgs.#ctor(Rock.Data.IEntity,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.ModelUpdatedEventArgs"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="T:Rock.Data.ModelUpdatingEventArgs">
            <summary>
            Event argument used when model is being added, updated, or deleted
            </summary>
        </member>
        <member name="M:Rock.Data.ModelUpdatingEventArgs.#ctor(Rock.Data.IEntity,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.ModelUpdatingEventArgs"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="personId">The person id.</param>
        </member>
        <member name="P:Rock.Data.ModelUpdatingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether event should be cancelled.
            </summary>
            <value>
              <c>true</c> if event should be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rock.Data.KeyEntity">
            <summary>
            Object used for current model (context) implementation 
            </summary>
        </member>
        <member name="T:Rock.Data.RockContext">
            <summary>
            Entity Framework Context
            </summary>
        </member>
        <member name="M:Rock.Data.RockContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the context has been initialized, but
            before the model has been locked down and used to initialize the context. 
            </summary>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:Rock.Data.RockContext.GetEntityFromTableName(System.String)">
            <summary>
            Gets the name of the entity from table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="P:Rock.Data.RockContext.Attendances">
            <summary>
            Gets or sets the attendances.
            </summary>
            <value>
            The attendances.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttendanceCodes">
            <summary>
            Gets or sets the attendance codes.
            </summary>
            <value>
            The attendance codes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Attributes">
            <summary>
            Gets or sets the Attributes.
            </summary>
            <value>
            the Attributes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttributeQualifiers">
            <summary>
            Gets or sets the Attribute Qualifiers.
            </summary>
            <value>
            the Attribute Qualifiers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.AttributeValues">
            <summary>
            Gets or sets the Attribute Values.
            </summary>
            <value>
            the Attribute Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Audits">
            <summary>
            Gets or sets the Attribute Values.
            </summary>
            <value>
            the Attribute Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Auths">
            <summary>
            Gets or sets the Auths.
            </summary>
            <value>
            the Auths.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFiles">
            <summary>
            Gets or sets the Files.
            </summary>
            <value>
            the Files.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFilesData">
            <summary>
            Gets or sets the Files data.
            </summary>
            <value>
            the Files data
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BinaryFileTypes">
            <summary>
            Gets or sets the Binary File Types.
            </summary>
            <value>
            the Binary File Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Blocks">
            <summary>
            Gets or sets the Blocks.
            </summary>
            <value>
            the Blocks.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.BlockTypes">
            <summary>
            Gets or sets the Block Types.
            </summary>
            <value>
            the Block Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Campuses">
            <summary>
            Gets or sets the Campuses.
            </summary>
            <value>
            the Campuses.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Communications">
            <summary>
            Gets or sets the communications.
            </summary>
            <value>
            The communications.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.CommunicationRecipients">
            <summary>
            Gets or sets the communication recipients.
            </summary>
            <value>
            The communication recipients.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DataViews">
            <summary>
            Gets or sets the data views.
            </summary>
            <value>
            The data views.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DataViewFilters">
            <summary>
            Gets or sets the data view filters.
            </summary>
            <value>
            The data view filters.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DefinedTypes">
            <summary>
            Gets or sets the Defined Types.
            </summary>
            <value>
            the Defined Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.DefinedValues">
            <summary>
            Gets or sets the Defined Values.
            </summary>
            <value>
            the Defined Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Devices">
            <summary>
            Gets or sets the devices.
            </summary>
            <value>
            The devices.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.EmailTemplates">
            <summary>
            Gets or sets the Email Templates.
            </summary>
            <value>
            the Email Templates.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.EntityTypes">
            <summary>
            Gets or sets the entity types.
            </summary>
            <value>
            The entity types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ExceptionLogs">
            <summary>
            Gets or sets the Exception Logs.
            </summary>
            <value>
            the Exception Logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FieldTypes">
            <summary>
            Gets or sets the Field Types.
            </summary>
            <value>
            the Field Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialAccounts">
            <summary>
            Gets or sets the accounts.
            </summary>
            <value>
            The fund.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialBatches">
            <summary>
            Gets or sets the batches.
            </summary>
            <value>
            The batches.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialGateways">
            <summary>
            Gets or sets the financial gateways.
            </summary>
            <value>
            The financial gateways.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPledges">
            <summary>
            Gets or sets the pledges.
            </summary>
            <value>
            The pledges.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPersonBankAccounts">
            <summary>
            Gets or sets the financial person bank account.
            </summary>
            <value>
            The financial person bank account.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialPersonSavedAccounts">
            <summary>
            Gets or sets the financial person saved account.
            </summary>
            <value>
            The financial person saved account.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialScheduledTransactions">
            <summary>
            Gets or sets the financial scheduled transactions.
            </summary>
            <value>
            The financial scheduled transactions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialScheduledTransactionDetails">
            <summary>
            Gets or sets the financial scheduled transaction details.
            </summary>
            <value>
            The financial scheduled transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactions">
            <summary>
            Gets or sets the transactions.
            </summary>
            <value>
            The transactions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionDetails">
            <summary>
            Gets or sets the transaction details.
            </summary>
            <value>
            The transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionImages">
            <summary>
            Gets or sets the transaction details.
            </summary>
            <value>
            The transaction details.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.FinancialTransactionRefunds">
            <summary>
            Gets or sets the financial transaction refunds.
            </summary>
            <value>
            The financial transaction refunds.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Groups">
            <summary>
            Gets or sets the Groups.
            </summary>
            <value>
            the Groups.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupLocations">
            <summary>
            Gets or sets the Group Locations.
            </summary>
            <value>
            the Group Locations.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupMembers">
            <summary>
            Gets or sets the Members.
            </summary>
            <value>
            the Members.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupRoles">
            <summary>
            Gets or sets the Group Roles.
            </summary>
            <value>
            the Group Roles.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.GroupTypes">
            <summary>
            Gets or sets the Group Types.
            </summary>
            <value>
            the Group Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.HtmlContents">
            <summary>
            Gets or sets the Html Contents.
            </summary>
            <value>
            the Html Contents.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Locations">
            <summary>
            Gets or sets the Location.
            </summary>
            <value>
            the Location.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaigns">
            <summary>
            Gets or sets the marketing campaigns.
            </summary>
            <value>
            The marketing campaigns.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAds">
            <summary>
            Gets or sets the marketing campaign ads.
            </summary>
            <value>
            The marketing campaign ads.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAdTypes">
            <summary>
            Gets or sets the marketing campaign ad types.
            </summary>
            <value>
            The marketing campaign ad types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignAudiences">
            <summary>
            Gets or sets the marketing campaign audiences.
            </summary>
            <value>
            The marketing campaign audiences.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MarketingCampaignCampuses">
            <summary>
            Gets or sets the marketing campaign campuses.
            </summary>
            <value>
            The marketing campaign campuses.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Metrics">
            <summary>
            Gets or sets the Defined Types.
            </summary>
            <value>
            the Defined Types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.MetricValues">
            <summary>
            Gets or sets the Defined Values.
            </summary>
            <value>
            the Defined Values.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>
            The notes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.NoteTypes">
            <summary>
            Gets or sets the note types.
            </summary>
            <value>
            The note types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Pages">
            <summary>
            Gets or sets the Pages.
            </summary>
            <value>
            the Pages.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PageContexts">
            <summary>
            Gets or sets the page contexts.
            </summary>
            <value>
            The page contexts.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PageRoutes">
            <summary>
            Gets or sets the Page Routes.
            </summary>
            <value>
            the Page Routes.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.People">
            <summary>
            Gets or sets the People.
            </summary>
            <value>
            the People.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonAccountLookups">
            <summary>
            Gets or sets the person account lookups.
            </summary>
            <value>
            The person account lookups.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonMerges">
            <summary>
            Gets or sets the Person Trails.
            </summary>
            <value>
            the Person Trails.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PersonVieweds">
            <summary>
            Gets or sets the Person Vieweds.
            </summary>
            <value>
            the Person Vieweds.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PhoneNumbers">
            <summary>
            Gets or sets the Phone Numbers.
            </summary>
            <value>
            the Phone Numbers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.PrayerRequests">
            <summary>
            Gets or sets the prayer requests.
            </summary>
            <value>
            The prayer requests.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Reports">
            <summary>
            Gets or sets the reports.
            </summary>
            <value>
            The reports.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Schedules">
            <summary>
            Gets or sets the schedules.
            </summary>
            <value>
            The schedules.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ServiceJobs">
            <summary>
            Gets or sets the Jobs.
            </summary>
            <value>
            the Jobs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.ServiceLogs">
            <summary>
            Gets or sets the Service Logs.
            </summary>
            <value>
            the Service Logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Sites">
            <summary>
            Gets or sets the Sites.
            </summary>
            <value>
            the Sites.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.SiteDomains">
            <summary>
            Gets or sets the Site Domains.
            </summary>
            <value>
            the Site Domains.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Tags">
            <summary>
            Gets or sets the Tags.
            </summary>
            <value>
            the Tags.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.TaggedItems">
            <summary>
            Gets or sets the Tagged Items.
            </summary>
            <value>
            the Tagged Items.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.UserLogins">
            <summary>
            Gets or sets the Users.
            </summary>
            <value>
            the Users.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.Workflows">
            <summary>
            Gets or sets the workflows.
            </summary>
            <value>
            The workflows.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActions">
            <summary>
            Gets or sets the workflow actions.
            </summary>
            <value>
            The workflow actions.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActionTypes">
            <summary>
            Gets or sets the workflow action types.
            </summary>
            <value>
            The workflow action types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActivities">
            <summary>
            Gets or sets the workflow activities.
            </summary>
            <value>
            The workflow activities.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowActivityTypes">
            <summary>
            Gets or sets the workflow activity types.
            </summary>
            <value>
            The workflow activity types.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowLogs">
            <summary>
            Gets or sets the workflow logs.
            </summary>
            <value>
            The workflow logs.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowTriggers">
            <summary>
            Gets or sets the workflow triggers.
            </summary>
            <value>
            The entity type workflow triggers.
            </value>
        </member>
        <member name="P:Rock.Data.RockContext.WorkflowTypes">
            <summary>
            Gets or sets the workflow types.
            </summary>
            <value>
            The workflow types.
            </value>
        </member>
        <member name="T:Rock.Data.ContextHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.ContextHelper.AddConfigurations(System.Data.Entity.DbModelBuilder)">
            <summary>
            Adds the configurations.
            </summary>
            <param name="modelBuilder">The model builder.</param>
        </member>
        <member name="T:Rock.Data.UnitOfWorkScope">
            <summary>
            Class used when services need to share the same DbContext
            </summary>
        </member>
        <member name="F:Rock.Data.UnitOfWorkScope.DbContext">
            <summary>
            The object context
            </summary>
        </member>
        <member name="M:Rock.Data.UnitOfWorkScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.UnitOfWorkScope"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.UnitOfWorkScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Rock.Data.UnitOfWorkScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Rock.Data.UnitOfWorkScope.CurrentObjectContext">
            <summary>
            Gets the current object context.
            </summary>
        </member>
        <member name="T:Rock.Data.EFRepository`1">
            <summary>
            Repository for working with the Entity Framework
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rock.Data.EFRepository`1.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Data.EFRepository`1._context">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Data.EFRepository`1._objectSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.EFRepository`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.EFRepository`1"/> class.
            </summary>
            <param name="objectContext">The object context.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.AsQueryable">
            <summary>
            An <see cref="T:System.Linq.IQueryable`1"/> list of entitities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.AsQueryable(System.String)">
            <summary>
            An <see cref="T:System.Linq.IQueryable`1"/> list of entitities
            with a eager load of includes properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.GetAll">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of all entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of all entities that match the where clause
            </summary>
            <param name="where">
            <example>An example where clause: <c>t =&gt; t.Id == id</c></example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the only entity that matches the where clause
            </summary>
            <remarks>If more than one entity matches the where clause, and exception occurs</remarks>
            <param name="where">
            <example>An example where clause: <c>t => t.Id == id</c></example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get's the first entity that matches the where clause
            </summary>
            <remarks>If an entity that matches the where clause does not exist, an exception occurs</remarks>
            <param name="where">
            <example>An example where clause: <c>t => t.Id == id</c></example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get's the first entity that matches the where clause
            </summary>
            <remarks>If an entity that matches the where clause does not exist, a null value is returned</remarks>
            <param name="where">
            <example>An example where clause: <c>t => t.Id == id</c></example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.DateCreated(`0)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.DateCreated(System.Int32,System.Int32)">
            <summary>
            Date the entity was created.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.DateLastModified(`0)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.DateLastModified(System.Int32,System.Int32)">
            <summary>
            Date the entity was last modified.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.CreatedByPersonId(`0)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.CreatedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who created entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.LastModifiedByPersonId(`0)">
            <summary>
            The person id who last modified the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.LastModifiedByPersonId(System.Int32,System.Int32)">
            <summary>
            The person id who last modified the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Audits(`0)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Audits(System.Int32,System.Int32)">
            <summary>
            All the audits made to the entity.
            </summary>
            <param name="entityTypeId">The entity type id.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Attach(`0)">
            <summary>
            Attaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.SetValues(`0,`0)">
            <summary>
            Sets the values.
            </summary>
            <param name="targetItem">The target item.</param>
            <param name="sourceItem">The source item.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Save(System.Nullable{System.Int32},System.Collections.Generic.List{Rock.Model.Audit}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Saves the entity and returns a list of any entity changes that
            need to be logged
            </summary>
            <param name="PersonId">The id of the person making the change</param>
            <param name="audits">The audits.</param>
            <param name="errorMessages">The error messages.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.ExecuteQuery(System.String,System.Object[])">
            <summary>
            Creates a raw sql query that will return entities
            </summary>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Data.EFRepository`1.SetConfigurationValue(System.String,System.String)">
            <summary>
            Sets the configuration value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rock.Data.EFRepository`1.AuditClass(System.Type)">
            <summary>
            Audits the class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.AuditProperty(System.Reflection.PropertyInfo)">
            <summary>
            Audits the property.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository`1.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Rock.Data.EFRepository`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Rock.Data.EFRepository">
            <summary>
            Entity Framework repository for providing non entity specific methods
            </summary>
        </member>
        <member name="F:Rock.Data.EFRepository.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rock.Data.EFRepository._context">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.EFRepository`1"/> class.
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Data.EFRepository`1"/> class.
            </summary>
            <param name="objectContext">The object context.</param>
        </member>
        <member name="M:Rock.Data.EFRepository.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return elements of the given type.  The
            type can be any type that has properties that match the names of the columns
            returned from the query, or can be a simple primitive type. The type does
            not have to be an entity type. The results of this query are never tracked
            by the context even if the type of object returned is an entity type. Use
            the SqlQuery(System.String,System.Object[]) method
            to return entities that are tracked by the context.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="query">The query.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository.GetDataAdapter(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a data adapter.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository.GetDataSet(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the data set.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository.GetDataTable(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the data table.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository.GetDataReader(System.String,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the data set.
            </summary>
            <param name="query">The query.</param>
            <param name="commandType">Type of the command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Data.EFRepository.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Executes a SQL command.
            </summary>
            <param name="command">The command.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rock.Data.EFRepository.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Rock.Data.EFRepository.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Rock.Data.EFRepository.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.RequestArray">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.TransmissionReference">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.CustomerID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.OptAddressParsed">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArray.Record">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.RequestArrayRecord">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.RecordID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Company">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.LastName">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Urbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.AddressLine1">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.AddressLine2">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.City">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.State">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Plus4">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.RequestArrayRecord.Country">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArray">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Version">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.TransmissionReference">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Results">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.TotalRecords">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArray.Record">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecord">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.RecordID">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.Results">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecord.Address">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Company">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Urbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Address1">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Address2">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.PrivateMailBox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.City">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.State">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Plus4">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.CarrierRoute">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.DeliveryPointCode">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.DeliveryPointCheckDigit">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.CongressionalDistrict">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Type">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Country">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.AddressKey">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddress.Parsed">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressUrbanization">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressUrbanization.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCity.Abbreviation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressState.Abbreviation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType.Address">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressType.Zip">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress.Code">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeAddress.Description">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip.Code">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressTypeZip.Description">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry.Abbreviation">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressCountry.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.StreetName">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.AddressRange">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Suffix">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Direction">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Suite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.PrivateMailbox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.Garbage">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.RouteService">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.LockBox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsed.DeliveryInstallation">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection.Post">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedDirection.Pre">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite.Range">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedSuite.Name">
            <remarks/>
        </member>
        <member name="T:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox.Name">
            <remarks/>
        </member>
        <member name="P:Rock.MelissaData.AddressCheck.ResponseArrayRecordAddressParsedPrivateMailbox.Range">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Location">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Tract">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Block">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.Level">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location.LevelDescription">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Err">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Desc">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Number">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Err.Location">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.MilesBetween">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.KilometersBetween">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceBetweenInfo.FeetBetween">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.MilesToWater">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.ClosestWaterLatitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.DistanceToWaterInfo.ClosestWaterLongitude">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.ReverseAddress">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Address">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.State">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ReverseAddress.County">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Region">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Country">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.GeocodeCityWorldwideInfo.Error">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.ZipCodeInfo">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.City">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.State">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.County">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.AreaCode">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityAbbreviation">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityType">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CountyFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.StateFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.TimeZone">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.DayLightSavings">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.MSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.MD">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CBSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.PMSA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.DMA">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.ZipCodeInfo.CityAlternativeName">
            <remarks/>
        </member>
        <member name="T:Rock.ServiceObjects.GeoCoder.Location_V3">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Error">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Zip">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Tract">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Block">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Level">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.LevelDescription">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.StateFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.CountyFIPS">
            <remarks/>
        </member>
        <member name="P:Rock.ServiceObjects.GeoCoder.Location_V3.Debug">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.LicenseInfo">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.LicenseInfo.UnregisteredUser">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.LicenseInfo.RegisteredUser">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.UnregisteredUser">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.UnregisteredUser.EmailAddress">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.ServiceInfoRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.ServiceInfoRecord.InfoKey">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.ServiceInfoRecord.InfoValue">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfServiceInfoRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfServiceInfoRecord.Results">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfServiceInfoRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfServiceInfoRecord.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfServiceInfoRecord.ServiceResult">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsStatus.StatusNbr">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsStatus.StatusDescription">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfMethodStatusRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfMethodStatusRecord.Results">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.MethodStatusRecord">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfSIWsStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfSIWsStatus.Results">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.MethodStatusRecord.MethodName">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfMethodStatusRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfMethodStatusRecord.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfMethodStatusRecord.ServiceResult">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsOutputOfMethodStatusRecord">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfMethodStatusRecord.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfMethodStatusRecord.ServiceResult">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsResultWithStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsResultWithStatus.ItemStatus">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.USAddressWithStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddressWithStatus.Address">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.USAddress">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.Address">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.AddressLine1">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.AddressLine2">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.StreetNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.Firm">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.PreDirection">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.StreetName">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.StreetType">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.PostDirection">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.Extension">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.ExtensionNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.Village">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.City">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Address.AddressStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.State">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.Urbanization">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.ZIPPlus4">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.ZIPCode">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.ZIPAddOn">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.CarrierRoute">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.PMB">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.PMBDesignator">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.DeliveryPoint">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.DPCheckDigit">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.LACS">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.CMRA">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.DPV">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.DPVFootnote">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.RDI">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.RecordType">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.CongressDistrict">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.County">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.CountyNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.StateNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USAddress.GeoCode">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.USGeocode">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.Geocode">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Geocode.Latitude">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.Geocode.Longitude">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USGeocode.CensusTract">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USGeocode.StateNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USGeocode.CountyNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USGeocode.BlockNumber">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USGeocode.BlockGroup">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfUSAddressWithStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsResultArrayOfUSAddressWithStatus.Results">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfUSAddressWithStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfUSAddressWithStatus.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfSIWsResultArrayOfUSAddressWithStatus.ServiceResult">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.USBatchAddress">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USBatchAddress.AddressLine1">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USBatchAddress.AddressLine2">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USBatchAddress.CityStateZIPCode">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USBatchAddress.Firm">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.USBatchAddress.Urbanization">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SubscriptionInfo">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.LicenseStatusCode">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.LicenseStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.LicenseActionCode">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.LicenseAction">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.RemainingHits">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SubscriptionInfo.Amount">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.RegisteredUser">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.RegisteredUser.UserID">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.RegisteredUser.Password">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.SIWsOutputOfUSAddress">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfUSAddress.ServiceStatus">
            <remarks/>
        </member>
        <member name="P:Rock.StrikeIron.USAddressVerification.SIWsOutputOfUSAddress.ServiceResult">
            <remarks/>
        </member>
        <member name="T:Rock.StrikeIron.USAddressVerification.CasingEnum">
            <remarks/>
        </member>
        <member name="F:Rock.StrikeIron.USAddressVerification.CasingEnum.UPPER">
            <remarks/>
        </member>
        <member name="F:Rock.StrikeIron.USAddressVerification.CasingEnum.LOWER">
            <remarks/>
        </member>
        <member name="F:Rock.StrikeIron.USAddressVerification.CasingEnum.PROPER">
            <remarks/>
        </member>
        <member name="T:Rock.TeleAtlas.Geocoding.NameValue">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.NameValue.name">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.NameValue.value">
            <remarks/>
        </member>
        <member name="T:Rock.TeleAtlas.Geocoding.Geocode">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.Geocode.resultCode">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.Geocode.mAttributes">
            <remarks/>
        </member>
        <member name="T:Rock.TeleAtlas.Geocoding.MatchType">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.MatchType.name">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.MatchType.description">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.MatchType.id">
            <remarks/>
        </member>
        <member name="T:Rock.TeleAtlas.Geocoding.OutputField">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.OutputField.name">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.OutputField.description">
            <remarks/>
        </member>
        <member name="P:Rock.TeleAtlas.Geocoding.OutputField.type">
            <remarks/>
        </member>
        <member name="T:Rock.Data.IFeed">
            <summary>
            Represents a model that supports generating a feed
            </summary>
        </member>
        <member name="M:Rock.Data.IFeed.ReturnFeed(System.Int32,System.Int32,System.String,System.String@,System.String@)">
            <summary>
            Returns the feed.
            </summary>
            <param name="key">The key.</param>
            <param name="count">The count.</param>
            <param name="format">The format.</param>
            <param name="errorMessage">The error message.</param>
            <param name="contentType">Type of the content.</param>
            <returns></returns>
        </member>
        <member name="T:Rock.Jobs.JobLoadFailedException">
            <summary>
            Job failed to load exception
            </summary>
        </member>
        <member name="M:Rock.Jobs.JobLoadFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rock.Jobs.JobLoadFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Rock.Web.UI.PersonBlock">
            <summary>
            A Block used on the person detail page
            </summary>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.String)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <param name="groupTypeGuid">The group type GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.Guid)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rock.Web.UI.PersonBlock.PersonGroups(System.Int32)">
            <summary>
            The groups of a particular type that current person belongs to
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rock.Web.UI.PersonBlock.Person">
            <summary>
            The current person being viewed
            </summary>
        </member>
        <member name="T:Rock.Web.UI.Validation.DataAnnotationValidator">
            <summary>
            Data Annotation Validator for validating based on data attributes
            </summary>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.EvaluateIsValid">
            <summary>
            When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
            </summary>
            <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.GetValidatedType">
            <summary>
            Gets the type of the validated.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Null SourceTypeName can't be validated</exception>
        </member>
        <member name="M:Rock.Web.UI.Validation.DataAnnotationValidator.GetValidatedProperty">
            <summary>
            Gets the validated property.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.SourceTypeName">
            <summary>
            The type of the source to check
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.PropertyName">
            <summary>
            The property that is annotated
            </summary>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.IsRequired">
            <summary>
            Gets a value indicating whether this <see cref="T:Rock.Web.UI.Validation.DataAnnotationValidator"/> is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.ValueMustBeInteger">
            <summary>
            Gets a value indicating whether [value must be integer].
            </summary>
            <value>
              <c>true</c> if [value must be integer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rock.Web.UI.Validation.DataAnnotationValidator.ValueMaxLength">
            <summary>
            Gets the maxlength of the value.
            </summary>
            <value>
            The length of the value.
            </value>
        </member>
    </members>
</doc>
